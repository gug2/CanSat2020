
CanSatNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08006f80  08006f80  00016f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080072f4  080072f4  000172f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  080072f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
  8 .bss          00001390  200001e0  200001e0  000201e0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001570  20001570  000201e0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   000204f3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004426  00000000  00000000  00040703  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010589  00000000  00000000  00044b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  000550b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017f8  00000000  00000000  00056140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a90c  00000000  00000000  00057938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005c5a  00000000  00000000  00062244  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00067e9e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003bf0  00000000  00000000  00067f1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f64 	.word	0x08006f64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006f64 	.word	0x08006f64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <HAL_InitTick+0x3c>)
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_InitTick+0x40>)
{
 8000eb6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	7818      	ldrb	r0, [r3, #0]
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ec2:	6810      	ldr	r0, [r2, #0]
 8000ec4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec8:	f000 facc 	bl	8001464 <HAL_SYSTICK_Config>
 8000ecc:	4604      	mov	r4, r0
 8000ece:	b958      	cbnz	r0, 8000ee8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	2d0f      	cmp	r5, #15
 8000ed2:	d809      	bhi.n	8000ee8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 fa80 	bl	80013e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_InitTick+0x44>)
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	601d      	str	r5, [r3, #0]
 8000ee6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ee8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000eea:	bd38      	pop	{r3, r4, r5, pc}
 8000eec:	2000000c 	.word	0x2000000c
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_Init>:
{
 8000ef8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x30>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f0a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f12:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 fa51 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffc8 	bl	8000eb0 <HAL_InitTick>
  HAL_MspInit();
 8000f20:	f003 fe76 	bl	8004c10 <HAL_MspInit>
}
 8000f24:	2000      	movs	r0, #0
 8000f26:	bd08      	pop	{r3, pc}
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f2c:	4a03      	ldr	r2, [pc, #12]	; (8000f3c <HAL_IncTick+0x10>)
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <HAL_IncTick+0x14>)
 8000f30:	6811      	ldr	r1, [r2, #0]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	440b      	add	r3, r1
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000240 	.word	0x20000240
 8000f40:	20000000 	.word	0x20000000

08000f44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f44:	4b01      	ldr	r3, [pc, #4]	; (8000f4c <HAL_GetTick+0x8>)
 8000f46:	6818      	ldr	r0, [r3, #0]
}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000240 	.word	0x20000240

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
 8000f52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff fff6 	bl	8000f44 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f58:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5a:	bf1c      	itt	ne
 8000f5c:	4b05      	ldrne	r3, [pc, #20]	; (8000f74 <HAL_Delay+0x24>)
 8000f5e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f62:	bf18      	it	ne
 8000f64:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f66:	f7ff ffed 	bl	8000f44 <HAL_GetTick>
 8000f6a:	1b40      	subs	r0, r0, r5
 8000f6c:	4284      	cmp	r4, r0
 8000f6e:	d8fa      	bhi.n	8000f66 <HAL_Delay+0x16>
  {
  }
}
 8000f70:	bd38      	pop	{r3, r4, r5, pc}
 8000f72:	bf00      	nop
 8000f74:	20000000 	.word	0x20000000

08000f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f78:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	f000 809b 	beq.w	80010b8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f82:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000f84:	b925      	cbnz	r5, 8000f90 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f86:	f003 fb23 	bl	80045d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f8c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f92:	06db      	lsls	r3, r3, #27
 8000f94:	f100 808e 	bmi.w	80010b4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f9e:	f023 0302 	bic.w	r3, r3, #2
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000fa8:	4b44      	ldr	r3, [pc, #272]	; (80010bc <HAL_ADC_Init+0x144>)
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000fb0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	6861      	ldr	r1, [r4, #4]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fba:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fbc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fce:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fd0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fd2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fde:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fe0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fee:	4934      	ldr	r1, [pc, #208]	; (80010c0 <HAL_ADC_Init+0x148>)
 8000ff0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ff2:	428a      	cmp	r2, r1
 8000ff4:	d052      	beq.n	800109c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ff6:	6899      	ldr	r1, [r3, #8]
 8000ff8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000ffc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ffe:	6899      	ldr	r1, [r3, #8]
 8001000:	430a      	orrs	r2, r1
 8001002:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001004:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001006:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800100c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001012:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001014:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001016:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001018:	f022 0202 	bic.w	r2, r2, #2
 800101c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001024:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001026:	f894 2020 	ldrb.w	r2, [r4, #32]
 800102a:	2a00      	cmp	r2, #0
 800102c:	d03e      	beq.n	80010ac <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800102e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001030:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001036:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800103e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	3901      	subs	r1, #1
 8001044:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001048:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800104a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800104c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800104e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001056:	3901      	subs	r1, #1
 8001058:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800105e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001060:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001064:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001070:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001072:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001074:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800107a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800107c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800107e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001080:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001084:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001086:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001088:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001094:	2300      	movs	r3, #0
 8001096:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800109a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010aa:	e7b2      	b.n	8001012 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010b2:	e7c9      	b.n	8001048 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80010b4:	2001      	movs	r0, #1
 80010b6:	e7ed      	b.n	8001094 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
}
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
 80010bc:	40012300 	.word	0x40012300
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <HAL_ADC_ConfigChannel>:
{
 80010c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80010ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	f000 8083 	beq.w	80011da <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010d4:	680d      	ldr	r5, [r1, #0]
 80010d6:	6804      	ldr	r4, [r0, #0]
 80010d8:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80010da:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010dc:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80010de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80010e2:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010e4:	d92a      	bls.n	800113c <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010e6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80010ea:	68e7      	ldr	r7, [r4, #12]
 80010ec:	3b1e      	subs	r3, #30
 80010ee:	f04f 0e07 	mov.w	lr, #7
 80010f2:	fa0e fe03 	lsl.w	lr, lr, r3
 80010f6:	ea27 070e 	bic.w	r7, r7, lr
 80010fa:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010fc:	68e7      	ldr	r7, [r4, #12]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	433b      	orrs	r3, r7
 8001104:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001106:	684a      	ldr	r2, [r1, #4]
 8001108:	2a06      	cmp	r2, #6
 800110a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800110e:	d825      	bhi.n	800115c <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001110:	4413      	add	r3, r2
 8001112:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001114:	1f59      	subs	r1, r3, #5
 8001116:	231f      	movs	r3, #31
 8001118:	408b      	lsls	r3, r1
 800111a:	ea27 0303 	bic.w	r3, r7, r3
 800111e:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001120:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001122:	fa06 f101 	lsl.w	r1, r6, r1
 8001126:	4311      	orrs	r1, r2
 8001128:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_ADC_ConfigChannel+0x11c>)
 800112c:	429c      	cmp	r4, r3
 800112e:	d034      	beq.n	800119a <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001130:	2300      	movs	r3, #0
 8001132:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001136:	4618      	mov	r0, r3
}
 8001138:	b003      	add	sp, #12
 800113a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800113c:	6927      	ldr	r7, [r4, #16]
 800113e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001142:	f04f 0e07 	mov.w	lr, #7
 8001146:	fa0e fe03 	lsl.w	lr, lr, r3
 800114a:	ea27 070e 	bic.w	r7, r7, lr
 800114e:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001150:	6927      	ldr	r7, [r4, #16]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	433b      	orrs	r3, r7
 8001158:	6123      	str	r3, [r4, #16]
 800115a:	e7d4      	b.n	8001106 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 800115c:	2a0c      	cmp	r2, #12
 800115e:	d80e      	bhi.n	800117e <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001160:	4413      	add	r3, r2
 8001162:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001164:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001168:	231f      	movs	r3, #31
 800116a:	4093      	lsls	r3, r2
 800116c:	ea21 0303 	bic.w	r3, r1, r3
 8001170:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001172:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001174:	fa06 f202 	lsl.w	r2, r6, r2
 8001178:	431a      	orrs	r2, r3
 800117a:	6322      	str	r2, [r4, #48]	; 0x30
 800117c:	e7d5      	b.n	800112a <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800117e:	4413      	add	r3, r2
 8001180:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001182:	3b41      	subs	r3, #65	; 0x41
 8001184:	221f      	movs	r2, #31
 8001186:	409a      	lsls	r2, r3
 8001188:	ea21 0202 	bic.w	r2, r1, r2
 800118c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800118e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001190:	fa06 f103 	lsl.w	r1, r6, r3
 8001194:	4311      	orrs	r1, r2
 8001196:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001198:	e7c7      	b.n	800112a <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800119a:	2d12      	cmp	r5, #18
 800119c:	d104      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <HAL_ADC_ConfigChannel+0x120>)
 80011a0:	6853      	ldr	r3, [r2, #4]
 80011a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a6:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011a8:	f1a5 0310 	sub.w	r3, r5, #16
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d8bf      	bhi.n	8001130 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011b0:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <HAL_ADC_ConfigChannel+0x120>)
 80011b2:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011b4:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011ba:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011bc:	d1b8      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_ADC_ConfigChannel+0x124>)
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_ADC_ConfigChannel+0x128>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80011c8:	230a      	movs	r3, #10
 80011ca:	4353      	muls	r3, r2
        counter--;
 80011cc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80011ce:	9b01      	ldr	r3, [sp, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0ad      	beq.n	8001130 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80011d4:	9b01      	ldr	r3, [sp, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	e7f8      	b.n	80011cc <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80011da:	2002      	movs	r0, #2
 80011dc:	e7ac      	b.n	8001138 <HAL_ADC_ConfigChannel+0x74>
 80011de:	bf00      	nop
 80011e0:	40012000 	.word	0x40012000
 80011e4:	40012300 	.word	0x40012300
 80011e8:	2000000c 	.word	0x2000000c
 80011ec:	000f4240 	.word	0x000f4240

080011f0 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 80011f0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	9301      	str	r3, [sp, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d047      	beq.n	800128e <HAL_ADCEx_InjectedStart+0x9e>
 80011fe:	2301      	movs	r3, #1
 8001200:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001204:	6803      	ldr	r3, [r0, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	07d1      	lsls	r1, r2, #31
 800120a:	d505      	bpl.n	8001218 <HAL_ADCEx_InjectedStart+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	07d2      	lsls	r2, r2, #31
 8001210:	d414      	bmi.n	800123c <HAL_ADCEx_InjectedStart+0x4c>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001212:	2000      	movs	r0, #0
}
 8001214:	b002      	add	sp, #8
 8001216:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001218:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800121a:	491e      	ldr	r1, [pc, #120]	; (8001294 <HAL_ADCEx_InjectedStart+0xa4>)
    __HAL_ADC_ENABLE(hadc);
 800121c:	f042 0201 	orr.w	r2, r2, #1
 8001220:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_ADCEx_InjectedStart+0xa8>)
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	fbb2 f2f1 	udiv	r2, r2, r1
 800122a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800122e:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8001230:	9a01      	ldr	r2, [sp, #4]
 8001232:	2a00      	cmp	r2, #0
 8001234:	d0ea      	beq.n	800120c <HAL_ADCEx_InjectedStart+0x1c>
      counter--;
 8001236:	9a01      	ldr	r2, [sp, #4]
 8001238:	3a01      	subs	r2, #1
 800123a:	e7f8      	b.n	800122e <HAL_ADCEx_InjectedStart+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 800123c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800123e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800124a:	6402      	str	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800124c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800124e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
      ADC_CLEAR_ERRORCODE(hadc);
 8001252:	bf08      	it	eq
 8001254:	6442      	streq	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001256:	2200      	movs	r2, #0
 8001258:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800125c:	f06f 0204 	mvn.w	r2, #4
 8001260:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_ADCEx_InjectedStart+0xac>)
 8001264:	6852      	ldr	r2, [r2, #4]
 8001266:	f012 0f1f 	tst.w	r2, #31
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800126a:	689a      	ldr	r2, [r3, #8]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800126c:	6858      	ldr	r0, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800126e:	d10a      	bne.n	8001286 <HAL_ADCEx_InjectedStart+0x96>
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001270:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001274:	d1cd      	bne.n	8001212 <HAL_ADCEx_InjectedStart+0x22>
 8001276:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800127a:	d1ca      	bne.n	8001212 <HAL_ADCEx_InjectedStart+0x22>
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	e7c6      	b.n	8001214 <HAL_ADCEx_InjectedStart+0x24>
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001286:	4906      	ldr	r1, [pc, #24]	; (80012a0 <HAL_ADCEx_InjectedStart+0xb0>)
 8001288:	428b      	cmp	r3, r1
 800128a:	d1c2      	bne.n	8001212 <HAL_ADCEx_InjectedStart+0x22>
 800128c:	e7f0      	b.n	8001270 <HAL_ADCEx_InjectedStart+0x80>
  __HAL_LOCK(hadc);
 800128e:	2002      	movs	r0, #2
 8001290:	e7c0      	b.n	8001214 <HAL_ADCEx_InjectedStart+0x24>
 8001292:	bf00      	nop
 8001294:	000f4240 	.word	0x000f4240
 8001298:	2000000c 	.word	0x2000000c
 800129c:	40012300 	.word	0x40012300
 80012a0:	40012000 	.word	0x40012000

080012a4 <HAL_ADCEx_InjectedStop>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012a8:	2b01      	cmp	r3, #1
{
 80012aa:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80012ac:	d026      	beq.n	80012fc <HAL_ADCEx_InjectedStop+0x58>
 80012ae:	2301      	movs	r3, #1
 80012b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80012b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	d418      	bmi.n	80012ec <HAL_ADCEx_InjectedStop+0x48>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80012ba:	6801      	ldr	r1, [r0, #0]
 80012bc:	684b      	ldr	r3, [r1, #4]
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80012be:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80012c2:	d113      	bne.n	80012ec <HAL_ADCEx_InjectedStop+0x48>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012c4:	6888      	ldr	r0, [r1, #8]
 80012c6:	f020 0001 	bic.w	r0, r0, #1
 80012ca:	6088      	str	r0, [r1, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80012cc:	6888      	ldr	r0, [r1, #8]
 80012ce:	f010 0001 	ands.w	r0, r0, #1
 80012d2:	d111      	bne.n	80012f8 <HAL_ADCEx_InjectedStop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e4:	2300      	movs	r3, #0
 80012e6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012ea:	4770      	bx	lr
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80012f4:	2001      	movs	r0, #1
 80012f6:	e7f5      	b.n	80012e4 <HAL_ADCEx_InjectedStop+0x40>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	4618      	mov	r0, r3
 80012fa:	e7f3      	b.n	80012e4 <HAL_ADCEx_InjectedStop+0x40>
  __HAL_LOCK(hadc);
 80012fc:	2002      	movs	r0, #2
}
 80012fe:	4770      	bx	lr

08001300 <HAL_ADCEx_InjectedPollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	4604      	mov	r4, r0
 8001304:	460d      	mov	r5, r1
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001306:	f7ff fe1d 	bl	8000f44 <HAL_GetTick>
 800130a:	4606      	mov	r6, r0

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	0750      	lsls	r0, r2, #29
 8001312:	d50c      	bpl.n	800132e <HAL_ADCEx_InjectedPollForConversion+0x2e>
      }
    }
  }
  
  /* Clear injected group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC);
 8001314:	f06f 020c 	mvn.w	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800131a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800131c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001320:	6422      	str	r2, [r4, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001328:	d011      	beq.n	800134e <HAL_ADCEx_InjectedPollForConversion+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800132a:	2000      	movs	r0, #0
 800132c:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 800132e:	1c6a      	adds	r2, r5, #1
 8001330:	d0ed      	beq.n	800130e <HAL_ADCEx_InjectedPollForConversion+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001332:	b935      	cbnz	r5, 8001342 <HAL_ADCEx_InjectedPollForConversion+0x42>
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8001334:	2304      	movs	r3, #4
 8001336:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001338:	2300      	movs	r3, #0
 800133a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800133e:	2003      	movs	r0, #3
 8001340:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001342:	f7ff fdff 	bl	8000f44 <HAL_GetTick>
 8001346:	1b80      	subs	r0, r0, r6
 8001348:	4285      	cmp	r5, r0
 800134a:	d2df      	bcs.n	800130c <HAL_ADCEx_InjectedPollForConversion+0xc>
 800134c:	e7f2      	b.n	8001334 <HAL_ADCEx_InjectedPollForConversion+0x34>
     (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800134e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001350:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001354:	d002      	beq.n	800135c <HAL_ADCEx_InjectedPollForConversion+0x5c>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001356:	689a      	ldr	r2, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001358:	0551      	lsls	r1, r2, #21
 800135a:	d4e6      	bmi.n	800132a <HAL_ADCEx_InjectedPollForConversion+0x2a>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800135c:	685a      	ldr	r2, [r3, #4]
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800135e:	0552      	lsls	r2, r2, #21
 8001360:	d4e3      	bmi.n	800132a <HAL_ADCEx_InjectedPollForConversion+0x2a>
      (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001362:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001364:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8001368:	d1df      	bne.n	800132a <HAL_ADCEx_InjectedPollForConversion+0x2a>
      (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800136a:	7e23      	ldrb	r3, [r4, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1dc      	bne.n	800132a <HAL_ADCEx_InjectedPollForConversion+0x2a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001370:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001376:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001378:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800137a:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800137e:	d1d4      	bne.n	800132a <HAL_ADCEx_InjectedPollForConversion+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001380:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6423      	str	r3, [r4, #64]	; 0x40
}      
 8001388:	bd70      	pop	{r4, r5, r6, pc}

0800138a <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800138a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001390:	6803      	ldr	r3, [r0, #0]
 8001392:	f06f 0204 	mvn.w	r2, #4
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001396:	3901      	subs	r1, #1
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001398:	601a      	str	r2, [r3, #0]
  switch(InjectedRank)
 800139a:	2903      	cmp	r1, #3
 800139c:	d805      	bhi.n	80013aa <HAL_ADCEx_InjectedGetValue+0x20>
 800139e:	e8df f001 	tbb	[pc, r1]
 80013a2:	090b      	.short	0x090b
 80013a4:	0207      	.short	0x0207
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80013a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
      tmp =  hadc->Instance->JDR2;
    }
    break;
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 80013a8:	9301      	str	r3, [sp, #4]
    }
    break;
    default:
    break;  
  }
  return tmp;
 80013aa:	9801      	ldr	r0, [sp, #4]
}
 80013ac:	b002      	add	sp, #8
 80013ae:	4770      	bx	lr
      tmp =  hadc->Instance->JDR3;
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	e7f9      	b.n	80013a8 <HAL_ADCEx_InjectedGetValue+0x1e>
      tmp =  hadc->Instance->JDR2;
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	e7f7      	b.n	80013a8 <HAL_ADCEx_InjectedGetValue+0x1e>
      tmp =  hadc->Instance->JDR1;
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	e7f5      	b.n	80013a8 <HAL_ADCEx_InjectedGetValue+0x1e>

080013bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013c4:	041b      	lsls	r3, r3, #16
 80013c6:	0c1b      	lsrs	r3, r3, #16
 80013c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	0200      	lsls	r0, r0, #8
 80013ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80013d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80013d8:	60d3      	str	r3, [r2, #12]
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b530      	push	{r4, r5, lr}
 80013e4:	68dc      	ldr	r4, [r3, #12]
 80013e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	bf28      	it	cs
 80013f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 0501 	mov.w	r5, #1
 80013fc:	fa05 f303 	lsl.w	r3, r5, r3
 8001400:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001404:	bf8c      	ite	hi
 8001406:	3c03      	subhi	r4, #3
 8001408:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140a:	4019      	ands	r1, r3
 800140c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140e:	fa05 f404 	lsl.w	r4, r5, r4
 8001412:	3c01      	subs	r4, #1
 8001414:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001416:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	ea42 0201 	orr.w	r2, r2, r1
 800141c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	bfad      	iteet	ge
 8001422:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	f000 000f 	andlt.w	r0, r0, #15
 800142a:	4b06      	ldrlt	r3, [pc, #24]	; (8001444 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	bfb5      	itete	lt
 8001432:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800143c:	bd30      	pop	{r4, r5, pc}
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	e000ed14 	.word	0xe000ed14

08001448 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001448:	2800      	cmp	r0, #0
 800144a:	db08      	blt.n	800145e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144c:	0942      	lsrs	r2, r0, #5
 800144e:	2301      	movs	r3, #1
 8001450:	f000 001f 	and.w	r0, r0, #31
 8001454:	fa03 f000 	lsl.w	r0, r3, r0
 8001458:	4b01      	ldr	r3, [pc, #4]	; (8001460 <HAL_NVIC_EnableIRQ+0x18>)
 800145a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100

08001464 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	3801      	subs	r0, #1
 8001466:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800146a:	d20a      	bcs.n	8001482 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001470:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	21f0      	movs	r1, #240	; 0xf0
 8001474:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001492:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001494:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001496:	bf0c      	ite	eq
 8001498:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800149c:	f022 0204 	bicne.w	r2, r2, #4
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	4770      	bx	lr
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80014a8:	4770      	bx	lr

080014aa <HAL_SYSTICK_IRQHandler>:
{
 80014aa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80014ac:	f7ff fffc 	bl	80014a8 <HAL_SYSTICK_Callback>
 80014b0:	bd08      	pop	{r3, pc}

080014b2 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d003      	beq.n	80014c2 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80014be:	2001      	movs	r0, #1
 80014c0:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c2:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80014c4:	2305      	movs	r3, #5
 80014c6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80014ca:	6813      	ldr	r3, [r2, #0]
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80014d2:	2000      	movs	r0, #0
}
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014dc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001690 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e4:	4a68      	ldr	r2, [pc, #416]	; (8001688 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001694 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ec:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80014ee:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f0:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80014f2:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80014f6:	42ac      	cmp	r4, r5
 80014f8:	f040 80b0 	bne.w	800165c <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014fc:	684c      	ldr	r4, [r1, #4]
 80014fe:	f024 0c10 	bic.w	ip, r4, #16
 8001502:	f10c 36ff 	add.w	r6, ip, #4294967295
 8001506:	2e01      	cmp	r6, #1
 8001508:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800150c:	d812      	bhi.n	8001534 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800150e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001510:	2603      	movs	r6, #3
 8001512:	fa06 f60e 	lsl.w	r6, r6, lr
 8001516:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151a:	68ce      	ldr	r6, [r1, #12]
 800151c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001520:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001522:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001524:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001526:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152a:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800152e:	409e      	lsls	r6, r3
 8001530:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8001532:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001534:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8001536:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001538:	fa06 f60e 	lsl.w	r6, r6, lr
 800153c:	43f6      	mvns	r6, r6
 800153e:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001542:	688f      	ldr	r7, [r1, #8]
 8001544:	fa07 f70e 	lsl.w	r7, r7, lr
 8001548:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154c:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8001550:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001552:	d116      	bne.n	8001582 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8001554:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001558:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001560:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001564:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001568:	f04f 0c0f 	mov.w	ip, #15
 800156c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001570:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	690f      	ldr	r7, [r1, #16]
 8001576:	fa07 f70b 	lsl.w	r7, r7, fp
 800157a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800157e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001582:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001584:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001586:	f004 0703 	and.w	r7, r4, #3
 800158a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800158e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8001592:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001594:	00e6      	lsls	r6, r4, #3
 8001596:	d561      	bpl.n	800165c <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001598:	f04f 0b00 	mov.w	fp, #0
 800159c:	f8cd b00c 	str.w	fp, [sp, #12]
 80015a0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a4:	4e39      	ldr	r6, [pc, #228]	; (800168c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80015aa:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80015ae:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80015b2:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80015b6:	9703      	str	r7, [sp, #12]
 80015b8:	9f03      	ldr	r7, [sp, #12]
 80015ba:	f023 0703 	bic.w	r7, r3, #3
 80015be:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80015c2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c6:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80015ca:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015ce:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80015d2:	f04f 0e0f 	mov.w	lr, #15
 80015d6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015da:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015dc:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e0:	d043      	beq.n	800166a <HAL_GPIO_Init+0x192>
 80015e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015e6:	42b0      	cmp	r0, r6
 80015e8:	d041      	beq.n	800166e <HAL_GPIO_Init+0x196>
 80015ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015ee:	42b0      	cmp	r0, r6
 80015f0:	d03f      	beq.n	8001672 <HAL_GPIO_Init+0x19a>
 80015f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015f6:	42b0      	cmp	r0, r6
 80015f8:	d03d      	beq.n	8001676 <HAL_GPIO_Init+0x19e>
 80015fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015fe:	42b0      	cmp	r0, r6
 8001600:	d03b      	beq.n	800167a <HAL_GPIO_Init+0x1a2>
 8001602:	4548      	cmp	r0, r9
 8001604:	d03b      	beq.n	800167e <HAL_GPIO_Init+0x1a6>
 8001606:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800160a:	42b0      	cmp	r0, r6
 800160c:	d039      	beq.n	8001682 <HAL_GPIO_Init+0x1aa>
 800160e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001612:	42b0      	cmp	r0, r6
 8001614:	bf14      	ite	ne
 8001616:	2608      	movne	r6, #8
 8001618:	2607      	moveq	r6, #7
 800161a:	fa06 f60c 	lsl.w	r6, r6, ip
 800161e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001622:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001624:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001626:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001628:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800162c:	bf0c      	ite	eq
 800162e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001630:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001632:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001634:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001636:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800163a:	bf0c      	ite	eq
 800163c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800163e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001640:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001642:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001644:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001648:	bf0c      	ite	eq
 800164a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800164c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800164e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001650:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001652:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001654:	bf54      	ite	pl
 8001656:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001658:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800165a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165c:	3301      	adds	r3, #1
 800165e:	2b10      	cmp	r3, #16
 8001660:	f47f af45 	bne.w	80014ee <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001664:	b005      	add	sp, #20
 8001666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166a:	465e      	mov	r6, fp
 800166c:	e7d5      	b.n	800161a <HAL_GPIO_Init+0x142>
 800166e:	2601      	movs	r6, #1
 8001670:	e7d3      	b.n	800161a <HAL_GPIO_Init+0x142>
 8001672:	2602      	movs	r6, #2
 8001674:	e7d1      	b.n	800161a <HAL_GPIO_Init+0x142>
 8001676:	2603      	movs	r6, #3
 8001678:	e7cf      	b.n	800161a <HAL_GPIO_Init+0x142>
 800167a:	2604      	movs	r6, #4
 800167c:	e7cd      	b.n	800161a <HAL_GPIO_Init+0x142>
 800167e:	2605      	movs	r6, #5
 8001680:	e7cb      	b.n	800161a <HAL_GPIO_Init+0x142>
 8001682:	2606      	movs	r6, #6
 8001684:	e7c9      	b.n	800161a <HAL_GPIO_Init+0x142>
 8001686:	bf00      	nop
 8001688:	40013c00 	.word	0x40013c00
 800168c:	40020000 	.word	0x40020000
 8001690:	40023800 	.word	0x40023800
 8001694:	40021400 	.word	0x40021400

08001698 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001698:	b10a      	cbz	r2, 800169e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800169a:	6181      	str	r1, [r0, #24]
 800169c:	4770      	bx	lr
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	e7fb      	b.n	800169a <HAL_GPIO_WritePin+0x2>
	...

080016a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a6:	4604      	mov	r4, r0
 80016a8:	b908      	cbnz	r0, 80016ae <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016b6:	b91b      	cbnz	r3, 80016c0 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016bc:	f003 f898 	bl	80047f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016c0:	2324      	movs	r3, #36	; 0x24
 80016c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e0:	f000 fb02 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016e4:	6865      	ldr	r5, [r4, #4]
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_I2C_Init+0x148>)
 80016e8:	429d      	cmp	r5, r3
 80016ea:	d84d      	bhi.n	8001788 <HAL_I2C_Init+0xe4>
 80016ec:	4b40      	ldr	r3, [pc, #256]	; (80017f0 <HAL_I2C_Init+0x14c>)
 80016ee:	4298      	cmp	r0, r3
 80016f0:	d9db      	bls.n	80016aa <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80016f4:	493f      	ldr	r1, [pc, #252]	; (80017f4 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80016f8:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001700:	430b      	orrs	r3, r1
 8001702:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001704:	6a13      	ldr	r3, [r2, #32]
 8001706:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800170a:	3101      	adds	r1, #1
 800170c:	4319      	orrs	r1, r3
 800170e:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001710:	69d1      	ldr	r1, [r2, #28]
 8001712:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_I2C_Init+0x148>)
 8001714:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001718:	429d      	cmp	r5, r3
 800171a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800171e:	f100 30ff 	add.w	r0, r0, #4294967295
 8001722:	d848      	bhi.n	80017b6 <HAL_I2C_Init+0x112>
 8001724:	006d      	lsls	r5, r5, #1
 8001726:	fbb0 f0f5 	udiv	r0, r0, r5
 800172a:	3001      	adds	r0, #1
 800172c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001730:	2b04      	cmp	r3, #4
 8001732:	bf38      	it	cc
 8001734:	2304      	movcc	r3, #4
 8001736:	430b      	orrs	r3, r1
 8001738:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800173a:	6811      	ldr	r1, [r2, #0]
 800173c:	6a20      	ldr	r0, [r4, #32]
 800173e:	69e3      	ldr	r3, [r4, #28]
 8001740:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001744:	4303      	orrs	r3, r0
 8001746:	430b      	orrs	r3, r1
 8001748:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800174a:	6891      	ldr	r1, [r2, #8]
 800174c:	68e0      	ldr	r0, [r4, #12]
 800174e:	6923      	ldr	r3, [r4, #16]
 8001750:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001754:	4303      	orrs	r3, r0
 8001756:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800175a:	430b      	orrs	r3, r1
 800175c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800175e:	68d1      	ldr	r1, [r2, #12]
 8001760:	69a0      	ldr	r0, [r4, #24]
 8001762:	6963      	ldr	r3, [r4, #20]
 8001764:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001768:	4303      	orrs	r3, r0
 800176a:	430b      	orrs	r3, r1
 800176c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800176e:	6813      	ldr	r3, [r2, #0]
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001776:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001778:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800177c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001780:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001782:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001786:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_I2C_Init+0x154>)
 800178a:	4298      	cmp	r0, r3
 800178c:	d98d      	bls.n	80016aa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800178e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001790:	4e18      	ldr	r6, [pc, #96]	; (80017f4 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001792:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001794:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800179c:	4333      	orrs	r3, r6
 800179e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017a0:	6a13      	ldr	r3, [r2, #32]
 80017a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017a6:	4371      	muls	r1, r6
 80017a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017ac:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80017b0:	fbb1 f1f6 	udiv	r1, r1, r6
 80017b4:	e7a9      	b.n	800170a <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017b6:	68a3      	ldr	r3, [r4, #8]
 80017b8:	b953      	cbnz	r3, 80017d0 <HAL_I2C_Init+0x12c>
 80017ba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80017be:	fbb0 f0f3 	udiv	r0, r0, r3
 80017c2:	1c43      	adds	r3, r0, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	b16b      	cbz	r3, 80017e6 <HAL_I2C_Init+0x142>
 80017ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ce:	e7b2      	b.n	8001736 <HAL_I2C_Init+0x92>
 80017d0:	2319      	movs	r3, #25
 80017d2:	436b      	muls	r3, r5
 80017d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80017d8:	1c43      	adds	r3, r0, #1
 80017da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017de:	b113      	cbz	r3, 80017e6 <HAL_I2C_Init+0x142>
 80017e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e4:	e7a7      	b.n	8001736 <HAL_I2C_Init+0x92>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e7a5      	b.n	8001736 <HAL_I2C_Init+0x92>
 80017ea:	bf00      	nop
 80017ec:	000186a0 	.word	0x000186a0
 80017f0:	001e847f 	.word	0x001e847f
 80017f4:	000f4240 	.word	0x000f4240
 80017f8:	003d08ff 	.word	0x003d08ff

080017fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001800:	4604      	mov	r4, r0
 8001802:	b908      	cbnz	r0, 8001808 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001804:	2001      	movs	r0, #1
 8001806:	e03f      	b.n	8001888 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001808:	6803      	ldr	r3, [r0, #0]
 800180a:	07dd      	lsls	r5, r3, #31
 800180c:	d410      	bmi.n	8001830 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	0798      	lsls	r0, r3, #30
 8001812:	d45a      	bmi.n	80018ca <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	071a      	lsls	r2, r3, #28
 8001818:	f100 809c 	bmi.w	8001954 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	075b      	lsls	r3, r3, #29
 8001820:	f100 80ba 	bmi.w	8001998 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001824:	69a0      	ldr	r0, [r4, #24]
 8001826:	2800      	cmp	r0, #0
 8001828:	f040 811b 	bne.w	8001a62 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800182c:	2000      	movs	r0, #0
 800182e:	e02b      	b.n	8001888 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001830:	4ba4      	ldr	r3, [pc, #656]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	f002 020c 	and.w	r2, r2, #12
 8001838:	2a04      	cmp	r2, #4
 800183a:	d007      	beq.n	800184c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001842:	2a08      	cmp	r2, #8
 8001844:	d10a      	bne.n	800185c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	0259      	lsls	r1, r3, #9
 800184a:	d507      	bpl.n	800185c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	4b9d      	ldr	r3, [pc, #628]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	039a      	lsls	r2, r3, #14
 8001852:	d5dc      	bpl.n	800180e <HAL_RCC_OscConfig+0x12>
 8001854:	6863      	ldr	r3, [r4, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1d9      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
 800185a:	e7d3      	b.n	8001804 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	4d99      	ldr	r5, [pc, #612]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d113      	bne.n	800188e <HAL_RCC_OscConfig+0x92>
 8001866:	682b      	ldr	r3, [r5, #0]
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800186e:	f7ff fb69 	bl	8000f44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4d94      	ldr	r5, [pc, #592]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001874:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	682b      	ldr	r3, [r5, #0]
 8001878:	039b      	lsls	r3, r3, #14
 800187a:	d4c8      	bmi.n	800180e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fb62 	bl	8000f44 <HAL_GetTick>
 8001880:	1b80      	subs	r0, r0, r6
 8001882:	2864      	cmp	r0, #100	; 0x64
 8001884:	d9f7      	bls.n	8001876 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001886:	2003      	movs	r0, #3
}
 8001888:	b002      	add	sp, #8
 800188a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001892:	d104      	bne.n	800189e <HAL_RCC_OscConfig+0xa2>
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189a:	602b      	str	r3, [r5, #0]
 800189c:	e7e3      	b.n	8001866 <HAL_RCC_OscConfig+0x6a>
 800189e:	682a      	ldr	r2, [r5, #0]
 80018a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018a4:	602a      	str	r2, [r5, #0]
 80018a6:	682a      	ldr	r2, [r5, #0]
 80018a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018ac:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1dd      	bne.n	800186e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80018b2:	f7ff fb47 	bl	8000f44 <HAL_GetTick>
 80018b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b8:	682b      	ldr	r3, [r5, #0]
 80018ba:	039f      	lsls	r7, r3, #14
 80018bc:	d5a7      	bpl.n	800180e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018be:	f7ff fb41 	bl	8000f44 <HAL_GetTick>
 80018c2:	1b80      	subs	r0, r0, r6
 80018c4:	2864      	cmp	r0, #100	; 0x64
 80018c6:	d9f7      	bls.n	80018b8 <HAL_RCC_OscConfig+0xbc>
 80018c8:	e7dd      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ca:	4b7e      	ldr	r3, [pc, #504]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	f012 0f0c 	tst.w	r2, #12
 80018d2:	d007      	beq.n	80018e4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018da:	2a08      	cmp	r2, #8
 80018dc:	d111      	bne.n	8001902 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	025e      	lsls	r6, r3, #9
 80018e2:	d40e      	bmi.n	8001902 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e4:	4b77      	ldr	r3, [pc, #476]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	0795      	lsls	r5, r2, #30
 80018ea:	d502      	bpl.n	80018f2 <HAL_RCC_OscConfig+0xf6>
 80018ec:	68e2      	ldr	r2, [r4, #12]
 80018ee:	2a01      	cmp	r2, #1
 80018f0:	d188      	bne.n	8001804 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	6921      	ldr	r1, [r4, #16]
 80018f6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018fa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80018fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001900:	e788      	b.n	8001814 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001902:	68e2      	ldr	r2, [r4, #12]
 8001904:	4b70      	ldr	r3, [pc, #448]	; (8001ac8 <HAL_RCC_OscConfig+0x2cc>)
 8001906:	b1b2      	cbz	r2, 8001936 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800190c:	f7ff fb1a 	bl	8000f44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001910:	4d6c      	ldr	r5, [pc, #432]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001912:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	0798      	lsls	r0, r3, #30
 8001918:	d507      	bpl.n	800192a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	682b      	ldr	r3, [r5, #0]
 800191c:	6922      	ldr	r2, [r4, #16]
 800191e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001922:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001926:	602b      	str	r3, [r5, #0]
 8001928:	e774      	b.n	8001814 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff fb0b 	bl	8000f44 <HAL_GetTick>
 800192e:	1b80      	subs	r0, r0, r6
 8001930:	2802      	cmp	r0, #2
 8001932:	d9ef      	bls.n	8001914 <HAL_RCC_OscConfig+0x118>
 8001934:	e7a7      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001936:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001938:	f7ff fb04 	bl	8000f44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193c:	4d61      	ldr	r5, [pc, #388]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800193e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001940:	682b      	ldr	r3, [r5, #0]
 8001942:	0799      	lsls	r1, r3, #30
 8001944:	f57f af66 	bpl.w	8001814 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fafc 	bl	8000f44 <HAL_GetTick>
 800194c:	1b80      	subs	r0, r0, r6
 800194e:	2802      	cmp	r0, #2
 8001950:	d9f6      	bls.n	8001940 <HAL_RCC_OscConfig+0x144>
 8001952:	e798      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001954:	6962      	ldr	r2, [r4, #20]
 8001956:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_RCC_OscConfig+0x2d0>)
 8001958:	b17a      	cbz	r2, 800197a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800195e:	f7ff faf1 	bl	8000f44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001962:	4d58      	ldr	r5, [pc, #352]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001964:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001968:	079f      	lsls	r7, r3, #30
 800196a:	f53f af57 	bmi.w	800181c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196e:	f7ff fae9 	bl	8000f44 <HAL_GetTick>
 8001972:	1b80      	subs	r0, r0, r6
 8001974:	2802      	cmp	r0, #2
 8001976:	d9f6      	bls.n	8001966 <HAL_RCC_OscConfig+0x16a>
 8001978:	e785      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800197a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800197c:	f7ff fae2 	bl	8000f44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	4d50      	ldr	r5, [pc, #320]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001982:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001986:	0798      	lsls	r0, r3, #30
 8001988:	f57f af48 	bpl.w	800181c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff fada 	bl	8000f44 <HAL_GetTick>
 8001990:	1b80      	subs	r0, r0, r6
 8001992:	2802      	cmp	r0, #2
 8001994:	d9f6      	bls.n	8001984 <HAL_RCC_OscConfig+0x188>
 8001996:	e776      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001998:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
 800199a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80019a0:	d128      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	9201      	str	r2, [sp, #4]
 80019a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019b6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	4d45      	ldr	r5, [pc, #276]	; (8001ad0 <HAL_RCC_OscConfig+0x2d4>)
 80019ba:	682b      	ldr	r3, [r5, #0]
 80019bc:	05d9      	lsls	r1, r3, #23
 80019be:	d51b      	bpl.n	80019f8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c0:	68a3      	ldr	r3, [r4, #8]
 80019c2:	4d40      	ldr	r5, [pc, #256]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d127      	bne.n	8001a18 <HAL_RCC_OscConfig+0x21c>
 80019c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80019d0:	f7ff fab8 	bl	8000f44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	4d3b      	ldr	r5, [pc, #236]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80019d6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019de:	079b      	lsls	r3, r3, #30
 80019e0:	d539      	bpl.n	8001a56 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80019e2:	2e00      	cmp	r6, #0
 80019e4:	f43f af1e 	beq.w	8001824 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e8:	4a36      	ldr	r2, [pc, #216]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
 80019ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	e717      	b.n	8001824 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80019f4:	2600      	movs	r6, #0
 80019f6:	e7df      	b.n	80019b8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001a00:	f7ff faa0 	bl	8000f44 <HAL_GetTick>
 8001a04:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	682b      	ldr	r3, [r5, #0]
 8001a08:	05da      	lsls	r2, r3, #23
 8001a0a:	d4d9      	bmi.n	80019c0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0c:	f7ff fa9a 	bl	8000f44 <HAL_GetTick>
 8001a10:	1bc0      	subs	r0, r0, r7
 8001a12:	2802      	cmp	r0, #2
 8001a14:	d9f7      	bls.n	8001a06 <HAL_RCC_OscConfig+0x20a>
 8001a16:	e736      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d104      	bne.n	8001a26 <HAL_RCC_OscConfig+0x22a>
 8001a1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	672b      	str	r3, [r5, #112]	; 0x70
 8001a24:	e7d0      	b.n	80019c8 <HAL_RCC_OscConfig+0x1cc>
 8001a26:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	672a      	str	r2, [r5, #112]	; 0x70
 8001a2e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a30:	f022 0204 	bic.w	r2, r2, #4
 8001a34:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1ca      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fa83 	bl	8000f44 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a42:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a46:	0798      	lsls	r0, r3, #30
 8001a48:	d5cb      	bpl.n	80019e2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fa7b 	bl	8000f44 <HAL_GetTick>
 8001a4e:	1bc0      	subs	r0, r0, r7
 8001a50:	4540      	cmp	r0, r8
 8001a52:	d9f7      	bls.n	8001a44 <HAL_RCC_OscConfig+0x248>
 8001a54:	e717      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff fa75 	bl	8000f44 <HAL_GetTick>
 8001a5a:	1bc0      	subs	r0, r0, r7
 8001a5c:	4540      	cmp	r0, r8
 8001a5e:	d9bd      	bls.n	80019dc <HAL_RCC_OscConfig+0x1e0>
 8001a60:	e711      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a62:	4d18      	ldr	r5, [pc, #96]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
 8001a64:	68ab      	ldr	r3, [r5, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d047      	beq.n	8001afe <HAL_RCC_OscConfig+0x302>
 8001a6e:	4e19      	ldr	r6, [pc, #100]	; (8001ad4 <HAL_RCC_OscConfig+0x2d8>)
 8001a70:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a72:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a74:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a76:	d135      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001a78:	f7ff fa64 	bl	8000f44 <HAL_GetTick>
 8001a7c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	682b      	ldr	r3, [r5, #0]
 8001a80:	0199      	lsls	r1, r3, #6
 8001a82:	d429      	bmi.n	8001ad8 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a84:	6a22      	ldr	r2, [r4, #32]
 8001a86:	69e3      	ldr	r3, [r4, #28]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a8c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a98:	4c0a      	ldr	r4, [pc, #40]	; (8001ac4 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a9a:	0852      	lsrs	r2, r2, #1
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001aa2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fa4c 	bl	8000f44 <HAL_GetTick>
 8001aac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	019a      	lsls	r2, r3, #6
 8001ab2:	f53f aebb 	bmi.w	800182c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff fa45 	bl	8000f44 <HAL_GetTick>
 8001aba:	1b40      	subs	r0, r0, r5
 8001abc:	2802      	cmp	r0, #2
 8001abe:	d9f6      	bls.n	8001aae <HAL_RCC_OscConfig+0x2b2>
 8001ac0:	e6e1      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	42470000 	.word	0x42470000
 8001acc:	42470e80 	.word	0x42470e80
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff fa34 	bl	8000f44 <HAL_GetTick>
 8001adc:	1bc0      	subs	r0, r0, r7
 8001ade:	2802      	cmp	r0, #2
 8001ae0:	d9cd      	bls.n	8001a7e <HAL_RCC_OscConfig+0x282>
 8001ae2:	e6d0      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fa2e 	bl	8000f44 <HAL_GetTick>
 8001ae8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	682b      	ldr	r3, [r5, #0]
 8001aec:	019b      	lsls	r3, r3, #6
 8001aee:	f57f ae9d 	bpl.w	800182c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff fa27 	bl	8000f44 <HAL_GetTick>
 8001af6:	1b00      	subs	r0, r0, r4
 8001af8:	2802      	cmp	r0, #2
 8001afa:	d9f6      	bls.n	8001aea <HAL_RCC_OscConfig+0x2ee>
 8001afc:	e6c3      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afe:	2801      	cmp	r0, #1
 8001b00:	f43f aec2 	beq.w	8001888 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001b04:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	69e3      	ldr	r3, [r4, #28]
 8001b08:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f47f ae79 	bne.w	8001804 <HAL_RCC_OscConfig+0x8>
 8001b12:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b14:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	f47f ae73 	bne.w	8001804 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b24:	4003      	ands	r3, r0
 8001b26:	4293      	cmp	r3, r2
 8001b28:	f47f ae6c 	bne.w	8001804 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b2e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b32:	4293      	cmp	r3, r2
 8001b34:	f47f ae66 	bne.w	8001804 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b3a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001b3e:	1ac0      	subs	r0, r0, r3
 8001b40:	bf18      	it	ne
 8001b42:	2001      	movne	r0, #1
 8001b44:	e6a0      	b.n	8001888 <HAL_RCC_OscConfig+0x8c>
 8001b46:	bf00      	nop

08001b48 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b48:	4913      	ldr	r1, [pc, #76]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001b4a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b4c:	688b      	ldr	r3, [r1, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x16>
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b5a:	4810      	ldr	r0, [pc, #64]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b5c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001b5e:	4810      	ldr	r0, [pc, #64]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b60:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b62:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b64:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b66:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b68:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6c:	bf14      	ite	ne
 8001b6e:	480c      	ldrne	r0, [pc, #48]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b70:	480a      	ldreq	r0, [pc, #40]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b76:	bf18      	it	ne
 8001b78:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7e:	fba1 0100 	umull	r0, r1, r1, r0
 8001b82:	f7ff f80d 	bl	8000ba0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x50>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001b92:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b96:	bd08      	pop	{r3, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	007a1200 	.word	0x007a1200

08001ba4 <HAL_RCC_ClockConfig>:
{
 8001ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001baa:	4604      	mov	r4, r0
 8001bac:	b910      	cbnz	r0, 8001bb4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001bae:	2001      	movs	r0, #1
 8001bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b44      	ldr	r3, [pc, #272]	; (8001cc8 <HAL_RCC_ClockConfig+0x124>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f002 020f 	and.w	r2, r2, #15
 8001bbc:	428a      	cmp	r2, r1
 8001bbe:	d329      	bcc.n	8001c14 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc0:	6821      	ldr	r1, [r4, #0]
 8001bc2:	078f      	lsls	r7, r1, #30
 8001bc4:	d42e      	bmi.n	8001c24 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	07c8      	lsls	r0, r1, #31
 8001bc8:	d441      	bmi.n	8001c4e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_ClockConfig+0x124>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f002 020f 	and.w	r2, r2, #15
 8001bd2:	4295      	cmp	r5, r2
 8001bd4:	d367      	bcc.n	8001ca6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd6:	6822      	ldr	r2, [r4, #0]
 8001bd8:	0751      	lsls	r1, r2, #29
 8001bda:	d46d      	bmi.n	8001cb8 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	0713      	lsls	r3, r2, #28
 8001bde:	d507      	bpl.n	8001bf0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be0:	4a3a      	ldr	r2, [pc, #232]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
 8001be2:	6921      	ldr	r1, [r4, #16]
 8001be4:	6893      	ldr	r3, [r2, #8]
 8001be6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001bea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf0:	f7ff ffaa 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
 8001bf6:	4a36      	ldr	r2, [pc, #216]	; (8001cd0 <HAL_RCC_ClockConfig+0x12c>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	40d8      	lsrs	r0, r3
 8001c02:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_RCC_ClockConfig+0x130>)
 8001c04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_ClockConfig+0x134>)
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	f7ff f951 	bl	8000eb0 <HAL_InitTick>
  return HAL_OK;
 8001c0e:	2000      	movs	r0, #0
 8001c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c14:	b2ca      	uxtb	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4299      	cmp	r1, r3
 8001c20:	d1c5      	bne.n	8001bae <HAL_RCC_ClockConfig+0xa>
 8001c22:	e7cd      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1c>
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c26:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c2a:	bf1e      	ittt	ne
 8001c2c:	689a      	ldrne	r2, [r3, #8]
 8001c2e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001c32:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c36:	bf42      	ittt	mi
 8001c38:	689a      	ldrmi	r2, [r3, #8]
 8001c3a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001c3e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	68a0      	ldr	r0, [r4, #8]
 8001c44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c48:	4302      	orrs	r2, r0
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	e7bb      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4e:	6862      	ldr	r2, [r4, #4]
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
 8001c52:	2a01      	cmp	r2, #1
 8001c54:	d11d      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	d0a7      	beq.n	8001bae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5e:	4e1b      	ldr	r6, [pc, #108]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
 8001c60:	68b3      	ldr	r3, [r6, #8]
 8001c62:	f023 0303 	bic.w	r3, r3, #3
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001c6a:	f7ff f96b 	bl	8000f44 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001c72:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c74:	68b3      	ldr	r3, [r6, #8]
 8001c76:	6862      	ldr	r2, [r4, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c80:	d0a3      	beq.n	8001bca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c82:	f7ff f95f 	bl	8000f44 <HAL_GetTick>
 8001c86:	1bc0      	subs	r0, r0, r7
 8001c88:	4540      	cmp	r0, r8
 8001c8a:	d9f3      	bls.n	8001c74 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
}
 8001c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c92:	1e91      	subs	r1, r2, #2
 8001c94:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c96:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c98:	d802      	bhi.n	8001ca0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c9e:	e7dd      	b.n	8001c5c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	f013 0f02 	tst.w	r3, #2
 8001ca4:	e7da      	b.n	8001c5c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	b2ea      	uxtb	r2, r5
 8001ca8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	429d      	cmp	r5, r3
 8001cb2:	f47f af7c 	bne.w	8001bae <HAL_RCC_ClockConfig+0xa>
 8001cb6:	e78e      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	4904      	ldr	r1, [pc, #16]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
 8001cba:	68e0      	ldr	r0, [r4, #12]
 8001cbc:	688b      	ldr	r3, [r1, #8]
 8001cbe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001cc2:	4303      	orrs	r3, r0
 8001cc4:	608b      	str	r3, [r1, #8]
 8001cc6:	e789      	b.n	8001bdc <HAL_RCC_ClockConfig+0x38>
 8001cc8:	40023c00 	.word	0x40023c00
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08007065 	.word	0x08007065
 8001cd4:	2000000c 	.word	0x2000000c
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001cdc:	4b01      	ldr	r3, [pc, #4]	; (8001ce4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2000000c 	.word	0x2000000c

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x14>)
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001cf6:	6810      	ldr	r0, [r2, #0]
}
 8001cf8:	40d8      	lsrs	r0, r3
 8001cfa:	4770      	bx	lr
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	08007075 	.word	0x08007075
 8001d04:	2000000c 	.word	0x2000000c

08001d08 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	4a03      	ldr	r2, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d16:	6810      	ldr	r0, [r2, #0]
}
 8001d18:	40d8      	lsrs	r0, r3
 8001d1a:	4770      	bx	lr
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08007075 	.word	0x08007075
 8001d24:	2000000c 	.word	0x2000000c

08001d28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8001d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d2c:	b089      	sub	sp, #36	; 0x24
 8001d2e:	4605      	mov	r5, r0
 8001d30:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001d32:	f7ff f907 	bl	8000f44 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001d36:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8001d38:	4681      	mov	r9, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001d42:	f000 ffe2 	bl	8002d0a <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d46:	4604      	mov	r4, r0
 8001d48:	bb40      	cbnz	r0, 8001d9c <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8001d4a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001d4c:	6828      	ldr	r0, [r5, #0]
 8001d4e:	0409      	lsls	r1, r1, #16
 8001d50:	f001 f8ec 	bl	8002f2c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d54:	4604      	mov	r4, r0
 8001d56:	bb08      	cbnz	r0, 8001d9c <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8001d5e:	2308      	movs	r3, #8
 8001d60:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8001d62:	2330      	movs	r3, #48	; 0x30
 8001d64:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001d66:	2302      	movs	r3, #2
 8001d68:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001d6a:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001d6c:	2301      	movs	r3, #1
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8001d6e:	a902      	add	r1, sp, #8
 8001d70:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001d72:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8001d74:	f000 ffb6 	bl	8002ce4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8001d78:	6828      	ldr	r0, [r5, #0]
 8001d7a:	f001 f908 	bl	8002f8e <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d7e:	4604      	mov	r4, r0
 8001d80:	b960      	cbnz	r0, 8001d9c <SD_FindSCR+0x74>
 8001d82:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001d84:	f240 482a 	movw	r8, #1066	; 0x42a
 8001d88:	6828      	ldr	r0, [r5, #0]
 8001d8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d8c:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001d90:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001d92:	d007      	beq.n	8001da4 <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001d94:	0719      	lsls	r1, r3, #28
 8001d96:	d518      	bpl.n	8001dca <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8001d98:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001d9a:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	b009      	add	sp, #36	; 0x24
 8001da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001da4:	029b      	lsls	r3, r3, #10
 8001da6:	d507      	bpl.n	8001db8 <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8001da8:	f000 ff72 	bl	8002c90 <SDIO_ReadFIFO>
 8001dac:	ab08      	add	r3, sp, #32
 8001dae:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8001db2:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8001db4:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001db8:	f7ff f8c4 	bl	8000f44 <HAL_GetTick>
 8001dbc:	eba0 0009 	sub.w	r0, r0, r9
 8001dc0:	3001      	adds	r0, #1
 8001dc2:	d1e1      	bne.n	8001d88 <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8001dc4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8001dc8:	e7e8      	b.n	8001d9c <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001dca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001dcc:	079a      	lsls	r2, r3, #30
 8001dce:	d501      	bpl.n	8001dd4 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8001dd0:	2402      	movs	r4, #2
 8001dd2:	e7e2      	b.n	8001d9a <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001dd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001dd6:	069b      	lsls	r3, r3, #26
 8001dd8:	d501      	bpl.n	8001dde <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001dda:	2420      	movs	r4, #32
 8001ddc:	e7dd      	b.n	8001d9a <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001dde:	f240 533a 	movw	r3, #1338	; 0x53a
 8001de2:	6383      	str	r3, [r0, #56]	; 0x38
 8001de4:	9b01      	ldr	r3, [sp, #4]
 8001de6:	ba1b      	rev	r3, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001de8:	6033      	str	r3, [r6, #0]
 8001dea:	9b00      	ldr	r3, [sp, #0]
 8001dec:	ba1b      	rev	r3, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001dee:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8001df0:	e7d4      	b.n	8001d9c <SD_FindSCR+0x74>
	...

08001df4 <HAL_SD_ReadBlocks>:
{
 8001df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df8:	b087      	sub	sp, #28
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	460d      	mov	r5, r1
 8001dfe:	4616      	mov	r6, r2
 8001e00:	4699      	mov	r9, r3
  uint32_t tickstart = HAL_GetTick();
 8001e02:	f7ff f89f 	bl	8000f44 <HAL_GetTick>
 8001e06:	4607      	mov	r7, r0
  if(NULL == pData)
 8001e08:	b92d      	cbnz	r5, 8001e16 <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001e10:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001e12:	2001      	movs	r0, #1
 8001e14:	e010      	b.n	8001e38 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8001e16:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001e1a:	b2c0      	uxtb	r0, r0
 8001e1c:	2801      	cmp	r0, #1
 8001e1e:	f040 80f5 	bne.w	800200c <HAL_SD_ReadBlocks+0x218>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e24:	eb06 0309 	add.w	r3, r6, r9
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e28:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e2a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e2c:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e2e:	d906      	bls.n	8001e3e <HAL_SD_ReadBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001e30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e36:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001e38:	b007      	add	sp, #28
 8001e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001e44:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001e46:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001e48:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001e4a:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8001e50:	bf18      	it	ne
 8001e52:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001e54:	f000 ff59 	bl	8002d0a <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e58:	b148      	cbz	r0, 8001e6e <HAL_SD_ReadBlocks+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	4a6d      	ldr	r2, [pc, #436]	; (8002014 <HAL_SD_ReadBlocks+0x220>)
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001e60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e62:	4318      	orrs	r0, r3
 8001e64:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e66:	2001      	movs	r0, #1
 8001e68:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001e6c:	e7e4      	b.n	8001e38 <HAL_SD_ReadBlocks+0x44>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001e74:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e78:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001e7a:	9004      	str	r0, [sp, #16]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001e7c:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001e7e:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001e82:	f04f 0b02 	mov.w	fp, #2
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001e86:	4669      	mov	r1, sp
 8001e88:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001e8a:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001e8c:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001e90:	f8cd a014 	str.w	sl, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001e94:	f000 ff26 	bl	8002ce4 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8001e98:	45d1      	cmp	r9, sl
 8001e9a:	d912      	bls.n	8001ec2 <HAL_SD_ReadBlocks+0xce>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001e9c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001ea0:	4631      	mov	r1, r6
 8001ea2:	6820      	ldr	r0, [r4, #0]
 8001ea4:	f000 ff61 	bl	8002d6a <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ea8:	b190      	cbz	r0, 8001ed0 <HAL_SD_ReadBlocks+0xdc>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	4a59      	ldr	r2, [pc, #356]	; (8002014 <HAL_SD_ReadBlocks+0x220>)
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001eb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001eb2:	4318      	orrs	r0, r3
 8001eb4:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001eb6:	2001      	movs	r0, #1
        hsd->Context = SD_CONTEXT_NONE;
 8001eb8:	2300      	movs	r3, #0
        hsd->State= HAL_SD_STATE_READY;
 8001eba:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001ebe:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8001ec0:	e7ba      	b.n	8001e38 <HAL_SD_ReadBlocks+0x44>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001ec2:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001ec6:	4631      	mov	r1, r6
 8001ec8:	6820      	ldr	r0, [r4, #0]
 8001eca:	f000 ff36 	bl	8002d3a <SDMMC_CmdReadSingleBlock>
 8001ece:	e7eb      	b.n	8001ea8 <HAL_SD_ReadBlocks+0xb4>
    dataremaining = config.DataLength;
 8001ed0:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ed4:	f240 3b2a 	movw	fp, #810	; 0x32a
 8001ed8:	6820      	ldr	r0, [r4, #0]
 8001eda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001edc:	ea13 0f0b 	tst.w	r3, fp
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001ee0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ee2:	d017      	beq.n	8001f14 <HAL_SD_ReadBlocks+0x120>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001ee4:	05de      	lsls	r6, r3, #23
 8001ee6:	d509      	bpl.n	8001efc <HAL_SD_ReadBlocks+0x108>
 8001ee8:	f1b9 0f01 	cmp.w	r9, #1
 8001eec:	d906      	bls.n	8001efc <HAL_SD_ReadBlocks+0x108>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001eee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d003      	beq.n	8001efc <HAL_SD_ReadBlocks+0x108>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ef4:	f000 ff82 	bl	8002dfc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d1d6      	bne.n	8001eaa <HAL_SD_ReadBlocks+0xb6>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f00:	f011 0108 	ands.w	r1, r1, #8
 8001f04:	d036      	beq.n	8001f74 <HAL_SD_ReadBlocks+0x180>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f06:	4a43      	ldr	r2, [pc, #268]	; (8002014 <HAL_SD_ReadBlocks+0x220>)
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001f0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001f10:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f12:	e7d0      	b.n	8001eb6 <HAL_SD_ReadBlocks+0xc2>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	d519      	bpl.n	8001f4c <HAL_SD_ReadBlocks+0x158>
 8001f18:	f1ba 0f00 	cmp.w	sl, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_SD_ReadBlocks+0x158>
 8001f1e:	1d2e      	adds	r6, r5, #4
 8001f20:	f105 0824 	add.w	r8, r5, #36	; 0x24
          data = SDIO_ReadFIFO(hsd->Instance);
 8001f24:	6820      	ldr	r0, [r4, #0]
 8001f26:	f000 feb3 	bl	8002c90 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001f2a:	0a02      	lsrs	r2, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001f2c:	f806 0c04 	strb.w	r0, [r6, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001f30:	f806 2c03 	strb.w	r2, [r6, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001f34:	0c02      	lsrs	r2, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001f36:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001f38:	f806 2c02 	strb.w	r2, [r6, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001f3c:	f806 0c01 	strb.w	r0, [r6, #-1]
 8001f40:	3604      	adds	r6, #4
        for(count = 0U; count < 8U; count++)
 8001f42:	4546      	cmp	r6, r8
 8001f44:	d1ee      	bne.n	8001f24 <HAL_SD_ReadBlocks+0x130>
 8001f46:	3520      	adds	r5, #32
 8001f48:	f1aa 0a20 	sub.w	sl, sl, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001f4c:	f7fe fffa 	bl	8000f44 <HAL_GetTick>
 8001f50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001f52:	1bc0      	subs	r0, r0, r7
 8001f54:	4298      	cmp	r0, r3
 8001f56:	d3bf      	bcc.n	8001ed8 <HAL_SD_ReadBlocks+0xe4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	4a2e      	ldr	r2, [pc, #184]	; (8002014 <HAL_SD_ReadBlocks+0x220>)
 8001f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001f5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f64:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8001f70:	2003      	movs	r0, #3
 8001f72:	e761      	b.n	8001e38 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f76:	f012 0202 	ands.w	r2, r2, #2
 8001f7a:	d00a      	beq.n	8001f92 <HAL_SD_ReadBlocks+0x19e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f7c:	4a25      	ldr	r2, [pc, #148]	; (8002014 <HAL_SD_ReadBlocks+0x220>)
 8001f7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001f80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f82:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f8a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f8e:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001f90:	e752      	b.n	8001e38 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001f92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f94:	0689      	lsls	r1, r1, #26
 8001f96:	d50a      	bpl.n	8001fae <HAL_SD_ReadBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f98:	491e      	ldr	r1, [pc, #120]	; (8002014 <HAL_SD_ReadBlocks+0x220>)
 8001f9a:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f9e:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001fa0:	f043 0320 	orr.w	r3, r3, #32
 8001fa4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fa6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001faa:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001fac:	e744      	b.n	8001e38 <HAL_SD_ReadBlocks+0x44>
 8001fae:	1d2e      	adds	r6, r5, #4
 8001fb0:	f10a 0a04 	add.w	sl, sl, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001fb4:	6820      	ldr	r0, [r4, #0]
 8001fb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001fb8:	029b      	lsls	r3, r3, #10
 8001fba:	d407      	bmi.n	8001fcc <HAL_SD_ReadBlocks+0x1d8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001fbc:	f240 533a 	movw	r3, #1338	; 0x53a
 8001fc0:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8001fc8:	2000      	movs	r0, #0
 8001fca:	e735      	b.n	8001e38 <HAL_SD_ReadBlocks+0x44>
 8001fcc:	ebaa 0306 	sub.w	r3, sl, r6
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001fd0:	42dd      	cmn	r5, r3
 8001fd2:	d0f3      	beq.n	8001fbc <HAL_SD_ReadBlocks+0x1c8>
      data = SDIO_ReadFIFO(hsd->Instance);
 8001fd4:	f000 fe5c 	bl	8002c90 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001fd8:	0a03      	lsrs	r3, r0, #8
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001fda:	f806 0c04 	strb.w	r0, [r6, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001fde:	f806 3c03 	strb.w	r3, [r6, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001fe2:	0c03      	lsrs	r3, r0, #16
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001fe4:	0e00      	lsrs	r0, r0, #24
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001fe6:	f806 3c02 	strb.w	r3, [r6, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001fea:	f806 0c01 	strb.w	r0, [r6, #-1]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001fee:	f7fe ffa9 	bl	8000f44 <HAL_GetTick>
 8001ff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001ff4:	1bc0      	subs	r0, r0, r7
 8001ff6:	4283      	cmp	r3, r0
 8001ff8:	f106 0604 	add.w	r6, r6, #4
 8001ffc:	d8da      	bhi.n	8001fb4 <HAL_SD_ReadBlocks+0x1c0>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_SD_ReadBlocks+0x220>)
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002004:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800200a:	e781      	b.n	8001f10 <HAL_SD_ReadBlocks+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800200c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800200e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002012:	e6fd      	b.n	8001e10 <HAL_SD_ReadBlocks+0x1c>
 8002014:	004005ff 	.word	0x004005ff

08002018 <HAL_SD_WriteBlocks>:
{
 8002018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800201c:	b089      	sub	sp, #36	; 0x24
 800201e:	4604      	mov	r4, r0
 8002020:	460e      	mov	r6, r1
 8002022:	4691      	mov	r9, r2
 8002024:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8002026:	f7fe ff8d 	bl	8000f44 <HAL_GetTick>
 800202a:	4680      	mov	r8, r0
  if(NULL == pData)
 800202c:	b92e      	cbnz	r6, 800203a <HAL_SD_WriteBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800202e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002030:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002034:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002036:	2001      	movs	r0, #1
 8002038:	e010      	b.n	800205c <HAL_SD_WriteBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 800203a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800203e:	b2c0      	uxtb	r0, r0
 8002040:	2801      	cmp	r0, #1
 8002042:	f040 80b9 	bne.w	80021b8 <HAL_SD_WriteBlocks+0x1a0>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002046:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002048:	eb09 0307 	add.w	r3, r9, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800204c:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800204e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002050:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002052:	d906      	bls.n	8002062 <HAL_SD_WriteBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002056:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800205a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800205c:	b009      	add	sp, #36	; 0x24
 800205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8002062:	2303      	movs	r3, #3
 8002064:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8002068:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800206a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 800206c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800206e:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002070:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8002074:	bf18      	it	ne
 8002076:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800207a:	f000 fe46 	bl	8002d0a <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800207e:	b148      	cbz	r0, 8002094 <HAL_SD_WriteBlocks+0x7c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_SD_WriteBlocks+0x1a8>)
 8002084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002086:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002088:	4318      	orrs	r0, r3
 800208a:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800208c:	2001      	movs	r0, #1
 800208e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002092:	e7e3      	b.n	800205c <HAL_SD_WriteBlocks+0x44>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
 8002098:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800209a:	027b      	lsls	r3, r7, #9
 800209c:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800209e:	2390      	movs	r3, #144	; 0x90
 80020a0:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80020a2:	9005      	str	r0, [sp, #20]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80020a4:	9006      	str	r0, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80020a6:	2301      	movs	r3, #1
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80020a8:	a902      	add	r1, sp, #8
 80020aa:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80020ac:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80020ae:	f000 fe19 	bl	8002ce4 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 80020b2:	2f01      	cmp	r7, #1
 80020b4:	d912      	bls.n	80020dc <HAL_SD_WriteBlocks+0xc4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80020b6:	2320      	movs	r3, #32
 80020b8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80020ba:	4649      	mov	r1, r9
 80020bc:	6820      	ldr	r0, [r4, #0]
 80020be:	f000 fe84 	bl	8002dca <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80020c2:	b190      	cbz	r0, 80020ea <HAL_SD_WriteBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	4a3e      	ldr	r2, [pc, #248]	; (80021c0 <HAL_SD_WriteBlocks+0x1a8>)
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80020ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020cc:	4318      	orrs	r0, r3
 80020ce:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020d0:	2001      	movs	r0, #1
      hsd->Context = SD_CONTEXT_NONE;
 80020d2:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 80020d4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80020d8:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80020da:	e7bf      	b.n	800205c <HAL_SD_WriteBlocks+0x44>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80020dc:	2310      	movs	r3, #16
 80020de:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80020e0:	4649      	mov	r1, r9
 80020e2:	6820      	ldr	r0, [r4, #0]
 80020e4:	f000 fe59 	bl	8002d9a <SDMMC_CmdWriteSingleBlock>
 80020e8:	e7eb      	b.n	80020c2 <HAL_SD_WriteBlocks+0xaa>
    dataremaining = config.DataLength;
 80020ea:	9d03      	ldr	r5, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80020ec:	f240 3a1a 	movw	sl, #794	; 0x31a
 80020f0:	6820      	ldr	r0, [r4, #0]
 80020f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80020f4:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80020f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80020fa:	d016      	beq.n	800212a <HAL_SD_WriteBlocks+0x112>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80020fc:	05db      	lsls	r3, r3, #23
 80020fe:	d508      	bpl.n	8002112 <HAL_SD_WriteBlocks+0xfa>
 8002100:	2f01      	cmp	r7, #1
 8002102:	d906      	bls.n	8002112 <HAL_SD_WriteBlocks+0xfa>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002104:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002106:	2b03      	cmp	r3, #3
 8002108:	d003      	beq.n	8002112 <HAL_SD_WriteBlocks+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800210a:	f000 fe77 	bl	8002dfc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800210e:	2800      	cmp	r0, #0
 8002110:	d1d8      	bne.n	80020c4 <HAL_SD_WriteBlocks+0xac>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002116:	f011 0108 	ands.w	r1, r1, #8
 800211a:	d028      	beq.n	800216e <HAL_SD_WriteBlocks+0x156>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800211c:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <HAL_SD_WriteBlocks+0x1a8>)
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	63a3      	str	r3, [r4, #56]	; 0x38
 8002128:	e7d2      	b.n	80020d0 <HAL_SD_WriteBlocks+0xb8>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800212a:	045a      	lsls	r2, r3, #17
 800212c:	d50c      	bpl.n	8002148 <HAL_SD_WriteBlocks+0x130>
 800212e:	b15d      	cbz	r5, 8002148 <HAL_SD_WriteBlocks+0x130>
 8002130:	f106 0b20 	add.w	fp, r6, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002134:	f856 3b04 	ldr.w	r3, [r6], #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002138:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800213a:	9301      	str	r3, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800213c:	a901      	add	r1, sp, #4
 800213e:	f000 fdaa 	bl	8002c96 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002142:	45b3      	cmp	fp, r6
 8002144:	d1f6      	bne.n	8002134 <HAL_SD_WriteBlocks+0x11c>
 8002146:	3d20      	subs	r5, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002148:	f7fe fefc 	bl	8000f44 <HAL_GetTick>
 800214c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800214e:	eba0 0008 	sub.w	r0, r0, r8
 8002152:	4298      	cmp	r0, r3
 8002154:	d3cc      	bcc.n	80020f0 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_SD_WriteBlocks+0x1a8>)
 800215a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800215c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800215e:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002160:	2301      	movs	r3, #1
 8002162:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002166:	2300      	movs	r3, #0
 8002168:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800216a:	2003      	movs	r0, #3
 800216c:	e776      	b.n	800205c <HAL_SD_WriteBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800216e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002170:	f012 0202 	ands.w	r2, r2, #2
 8002174:	d00a      	beq.n	800218c <HAL_SD_WriteBlocks+0x174>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <HAL_SD_WriteBlocks+0x1a8>)
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800217a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800217c:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002184:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002188:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800218a:	e767      	b.n	800205c <HAL_SD_WriteBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800218c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800218e:	f010 0010 	ands.w	r0, r0, #16
 8002192:	d00a      	beq.n	80021aa <HAL_SD_WriteBlocks+0x192>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002194:	490a      	ldr	r1, [pc, #40]	; (80021c0 <HAL_SD_WriteBlocks+0x1a8>)
 8002196:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002198:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800219a:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021a2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021a6:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80021a8:	e758      	b.n	800205c <HAL_SD_WriteBlocks+0x44>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80021aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80021b6:	e751      	b.n	800205c <HAL_SD_WriteBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80021b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021be:	e739      	b.n	8002034 <HAL_SD_WriteBlocks+0x1c>
 80021c0:	004005ff 	.word	0x004005ff

080021c4 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80021c4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80021c6:	0f9a      	lsrs	r2, r3, #30
 80021c8:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80021ca:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80021ce:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80021d0:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80021d4:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80021d6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80021da:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80021dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80021e0:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80021e2:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80021e4:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80021e6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80021e8:	0d1a      	lsrs	r2, r3, #20
 80021ea:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80021ec:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80021f0:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80021f2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80021f6:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80021f8:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80021fc:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80021fe:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8002202:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002204:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8002208:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800220a:	2200      	movs	r2, #0
 800220c:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800220e:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8002210:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002212:	2a00      	cmp	r2, #0
 8002214:	d16b      	bne.n	80022ee <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002216:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002218:	f640 74fc 	movw	r4, #4092	; 0xffc
 800221c:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8002220:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8002224:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002226:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800222a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800222c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8002230:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002232:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8002236:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002238:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800223c:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002240:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002242:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002244:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002246:	7e0a      	ldrb	r2, [r1, #24]
 8002248:	f002 0207 	and.w	r2, r2, #7
 800224c:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800224e:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002250:	4093      	lsls	r3, r2
 8002252:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002254:	7a0a      	ldrb	r2, [r1, #8]
 8002256:	f002 040f 	and.w	r4, r2, #15
 800225a:	2201      	movs	r2, #1
 800225c:	40a2      	lsls	r2, r4
 800225e:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002260:	0a52      	lsrs	r2, r2, #9
 8002262:	4353      	muls	r3, r2
 8002264:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002266:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800226a:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800226c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800226e:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8002272:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002274:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800227c:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800227e:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002280:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002282:	0fda      	lsrs	r2, r3, #31
 8002284:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002286:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800228a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800228c:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8002290:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002292:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8002296:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002298:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800229c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80022a0:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80022a2:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 80022a6:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80022aa:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80022ae:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80022b2:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80022b6:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80022ba:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80022be:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80022c2:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80022c6:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80022ca:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80022ce:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80022d2:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80022d6:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80022da:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80022de:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80022e2:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80022ec:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80022ee:	2a01      	cmp	r2, #1
 80022f0:	d10f      	bne.n	8002312 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80022f2:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80022fc:	4313      	orrs	r3, r2
 80022fe:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002300:	690b      	ldr	r3, [r1, #16]
 8002302:	3301      	adds	r3, #1
 8002304:	029b      	lsls	r3, r3, #10
 8002306:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002308:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800230a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800230e:	6583      	str	r3, [r0, #88]	; 0x58
 8002310:	e7ab      	b.n	800226a <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002312:	6803      	ldr	r3, [r0, #0]
 8002314:	4a05      	ldr	r2, [pc, #20]	; (800232c <HAL_SD_GetCardCSD+0x168>)
 8002316:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002318:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002320:	2301      	movs	r3, #1
 8002322:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8002326:	4618      	mov	r0, r3
 8002328:	bd10      	pop	{r4, pc}
 800232a:	bf00      	nop
 800232c:	004005ff 	.word	0x004005ff

08002330 <HAL_SD_InitCard>:
{
 8002330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002334:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002336:	2300      	movs	r3, #0
 8002338:	9307      	str	r3, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800233a:	9308      	str	r3, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800233c:	9309      	str	r3, [sp, #36]	; 0x24
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800233e:	930a      	str	r3, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002340:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002342:	2376      	movs	r3, #118	; 0x76
 8002344:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 8002346:	ab0a      	add	r3, sp, #40	; 0x28
{
 8002348:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 800234a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800234e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002352:	ab07      	add	r3, sp, #28
 8002354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002356:	6820      	ldr	r0, [r4, #0]
 8002358:	f000 fc7e 	bl	8002c58 <SDIO_Init>
  if(status != HAL_OK)
 800235c:	4605      	mov	r5, r0
 800235e:	2800      	cmp	r0, #0
 8002360:	f040 808e 	bne.w	8002480 <HAL_SD_InitCard+0x150>
  __HAL_SD_DISABLE(hsd);
 8002364:	4f6e      	ldr	r7, [pc, #440]	; (8002520 <HAL_SD_InitCard+0x1f0>)
  __HAL_SD_ENABLE(hsd);
 8002366:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 8002368:	6038      	str	r0, [r7, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 800236a:	6820      	ldr	r0, [r4, #0]
 800236c:	f000 fc98 	bl	8002ca0 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8002370:	603e      	str	r6, [r7, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002372:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8002374:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002376:	f000 fd73 	bl	8002e60 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800237a:	4605      	mov	r5, r0
 800237c:	2800      	cmp	r0, #0
 800237e:	d179      	bne.n	8002474 <HAL_SD_InitCard+0x144>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002380:	6820      	ldr	r0, [r4, #0]
 8002382:	f000 fd95 	bl	8002eb0 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002386:	b130      	cbz	r0, 8002396 <HAL_SD_InitCard+0x66>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002388:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800238a:	6820      	ldr	r0, [r4, #0]
 800238c:	f000 fd68 	bl	8002e60 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002390:	b110      	cbz	r0, 8002398 <HAL_SD_InitCard+0x68>
 8002392:	4605      	mov	r5, r0
 8002394:	e06e      	b.n	8002474 <HAL_SD_InitCard+0x144>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002396:	64a6      	str	r6, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002398:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800239a:	2b01      	cmp	r3, #1
 800239c:	d062      	beq.n	8002464 <HAL_SD_InitCard+0x134>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800239e:	f64f 76fe 	movw	r6, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80023a2:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002524 <HAL_SD_InitCard+0x1f4>
{
 80023a6:	2100      	movs	r1, #0
 80023a8:	4637      	mov	r7, r6
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80023aa:	9b06      	ldr	r3, [sp, #24]
 80023ac:	42b3      	cmp	r3, r6
 80023ae:	d969      	bls.n	8002484 <HAL_SD_InitCard+0x154>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80023b0:	9b06      	ldr	r3, [sp, #24]
 80023b2:	42bb      	cmp	r3, r7
 80023b4:	f200 80aa 	bhi.w	800250c <HAL_SD_InitCard+0x1dc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80023b8:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 80023bc:	f04f 0301 	mov.w	r3, #1
 80023c0:	bf18      	it	ne
 80023c2:	461d      	movne	r5, r3
 80023c4:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80023c6:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 80023c8:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80023cc:	f000 fc70 	bl	8002cb0 <SDIO_GetPowerState>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	f000 809e 	beq.w	8002512 <HAL_SD_InitCard+0x1e2>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80023d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d019      	beq.n	8002410 <HAL_SD_InitCard+0xe0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80023dc:	6820      	ldr	r0, [r4, #0]
 80023de:	f000 fdee 	bl	8002fbe <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d16d      	bne.n	80024c2 <HAL_SD_InitCard+0x192>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80023e6:	4601      	mov	r1, r0
 80023e8:	6820      	ldr	r0, [r4, #0]
 80023ea:	f000 fc78 	bl	8002cde <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80023ee:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80023f0:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80023f2:	6820      	ldr	r0, [r4, #0]
 80023f4:	f000 fc73 	bl	8002cde <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80023f8:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80023fa:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80023fc:	6820      	ldr	r0, [r4, #0]
 80023fe:	f000 fc6e 	bl	8002cde <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002402:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002404:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002406:	6820      	ldr	r0, [r4, #0]
 8002408:	f000 fc69 	bl	8002cde <SDIO_GetResponse>
 800240c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002410:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002412:	2b03      	cmp	r3, #3
 8002414:	d14e      	bne.n	80024b4 <HAL_SD_InitCard+0x184>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002416:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002418:	2b03      	cmp	r3, #3
 800241a:	d159      	bne.n	80024d0 <HAL_SD_InitCard+0x1a0>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800241c:	2104      	movs	r1, #4
 800241e:	6820      	ldr	r0, [r4, #0]
 8002420:	f000 fc5d 	bl	8002cde <SDIO_GetResponse>
 8002424:	0d00      	lsrs	r0, r0, #20
 8002426:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002428:	a90d      	add	r1, sp, #52	; 0x34
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff feca 	bl	80021c4 <HAL_SD_GetCardCSD>
 8002430:	4605      	mov	r5, r0
 8002432:	2800      	cmp	r0, #0
 8002434:	d170      	bne.n	8002518 <HAL_SD_InitCard+0x1e8>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002436:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002438:	4603      	mov	r3, r0
 800243a:	0412      	lsls	r2, r2, #16
 800243c:	6820      	ldr	r0, [r4, #0]
 800243e:	f000 fcf7 	bl	8002e30 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002442:	2800      	cmp	r0, #0
 8002444:	d13d      	bne.n	80024c2 <HAL_SD_InitCard+0x192>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002446:	f104 0310 	add.w	r3, r4, #16
 800244a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800244e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002452:	1d23      	adds	r3, r4, #4
 8002454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002456:	6820      	ldr	r0, [r4, #0]
 8002458:	f000 fbfe 	bl	8002c58 <SDIO_Init>
}
 800245c:	4628      	mov	r0, r5
 800245e:	b018      	add	sp, #96	; 0x60
 8002460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002464:	2100      	movs	r1, #0
 8002466:	6820      	ldr	r0, [r4, #0]
 8002468:	f000 fd60 	bl	8002f2c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800246c:	2800      	cmp	r0, #0
 800246e:	d096      	beq.n	800239e <HAL_SD_InitCard+0x6e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002470:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8002474:	2301      	movs	r3, #1
 8002476:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800247a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800247c:	4315      	orrs	r5, r2
 800247e:	63a5      	str	r5, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002480:	2501      	movs	r5, #1
 8002482:	e7eb      	b.n	800245c <HAL_SD_InitCard+0x12c>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002484:	2900      	cmp	r1, #0
 8002486:	d193      	bne.n	80023b0 <HAL_SD_InitCard+0x80>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002488:	6820      	ldr	r0, [r4, #0]
 800248a:	f000 fd4f 	bl	8002f2c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800248e:	4605      	mov	r5, r0
 8002490:	2800      	cmp	r0, #0
 8002492:	d1ef      	bne.n	8002474 <HAL_SD_InitCard+0x144>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002494:	4641      	mov	r1, r8
 8002496:	6820      	ldr	r0, [r4, #0]
 8002498:	f000 fd60 	bl	8002f5c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800249c:	2800      	cmp	r0, #0
 800249e:	d1e7      	bne.n	8002470 <HAL_SD_InitCard+0x140>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024a0:	4629      	mov	r1, r5
 80024a2:	6820      	ldr	r0, [r4, #0]
 80024a4:	f000 fc1b 	bl	8002cde <SDIO_GetResponse>
    count++;
 80024a8:	9b06      	ldr	r3, [sp, #24]
 80024aa:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024ac:	4605      	mov	r5, r0
    count++;
 80024ae:	9306      	str	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80024b0:	0fc1      	lsrs	r1, r0, #31
 80024b2:	e77a      	b.n	80023aa <HAL_SD_InitCard+0x7a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80024b4:	f10d 0116 	add.w	r1, sp, #22
 80024b8:	6820      	ldr	r0, [r4, #0]
 80024ba:	f000 fdab 	bl	8003014 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024be:	2800      	cmp	r0, #0
 80024c0:	d0a9      	beq.n	8002416 <HAL_SD_InitCard+0xe6>
    hsd->State = HAL_SD_STATE_READY;
 80024c2:	2501      	movs	r5, #1
 80024c4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80024c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024ca:	4308      	orrs	r0, r1
 80024cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80024ce:	e7c5      	b.n	800245c <HAL_SD_InitCard+0x12c>
    hsd->SdCard.RelCardAdd = sd_rca;
 80024d0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80024d4:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80024d6:	6820      	ldr	r0, [r4, #0]
 80024d8:	0409      	lsls	r1, r1, #16
 80024da:	f000 fd85 	bl	8002fe8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024de:	2800      	cmp	r0, #0
 80024e0:	d1ef      	bne.n	80024c2 <HAL_SD_InitCard+0x192>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024e2:	4601      	mov	r1, r0
 80024e4:	6820      	ldr	r0, [r4, #0]
 80024e6:	f000 fbfa 	bl	8002cde <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80024ea:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024ec:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80024ee:	6820      	ldr	r0, [r4, #0]
 80024f0:	f000 fbf5 	bl	8002cde <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80024f4:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80024f6:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80024f8:	6820      	ldr	r0, [r4, #0]
 80024fa:	f000 fbf0 	bl	8002cde <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80024fe:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002500:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002502:	6820      	ldr	r0, [r4, #0]
 8002504:	f000 fbeb 	bl	8002cde <SDIO_GetResponse>
 8002508:	6720      	str	r0, [r4, #112]	; 0x70
 800250a:	e787      	b.n	800241c <HAL_SD_InitCard+0xec>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800250c:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8002510:	e7b0      	b.n	8002474 <HAL_SD_InitCard+0x144>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002512:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002516:	e7d4      	b.n	80024c2 <HAL_SD_InitCard+0x192>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002518:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800251c:	e7d1      	b.n	80024c2 <HAL_SD_InitCard+0x192>
 800251e:	bf00      	nop
 8002520:	422580a0 	.word	0x422580a0
 8002524:	c1100000 	.word	0xc1100000

08002528 <HAL_SD_Init>:
{
 8002528:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800252a:	4604      	mov	r4, r0
 800252c:	b908      	cbnz	r0, 8002532 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 800252e:	2001      	movs	r0, #1
 8002530:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8002532:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002536:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800253a:	b913      	cbnz	r3, 8002542 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 800253c:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800253e:	f002 fae7 	bl	8004b10 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8002542:	2303      	movs	r3, #3
 8002544:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fef1 	bl	8002330 <HAL_SD_InitCard>
 800254e:	2800      	cmp	r0, #0
 8002550:	d1ed      	bne.n	800252e <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8002552:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002554:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8002556:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8002558:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800255c:	bd10      	pop	{r4, pc}

0800255e <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800255e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002560:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002562:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002564:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002566:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002568:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800256a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800256c:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800256e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002570:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002572:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002574:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002576:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002578:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800257a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800257c:	61cb      	str	r3, [r1, #28]
}
 800257e:	2000      	movs	r0, #0
 8002580:	4770      	bx	lr
	...

08002584 <HAL_SD_ConfigWideBusOperation>:
{
 8002584:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8002586:	2303      	movs	r3, #3
 8002588:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800258c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800258e:	2b03      	cmp	r3, #3
{
 8002590:	b08a      	sub	sp, #40	; 0x28
 8002592:	4604      	mov	r4, r0
 8002594:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002596:	d002      	beq.n	800259e <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002598:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800259c:	d103      	bne.n	80025a6 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800259e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a4:	e055      	b.n	8002652 <HAL_SD_ConfigWideBusOperation+0xce>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80025a6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80025aa:	d12c      	bne.n	8002606 <HAL_SD_ConfigWideBusOperation+0x82>
  uint32_t scr[2U] = {0U, 0U};
 80025ac:	2100      	movs	r1, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80025ae:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 80025b0:	9104      	str	r1, [sp, #16]
 80025b2:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80025b4:	f000 fb93 	bl	8002cde <SDIO_GetResponse>
 80025b8:	0180      	lsls	r0, r0, #6
 80025ba:	d41f      	bmi.n	80025fc <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 80025bc:	a904      	add	r1, sp, #16
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff fbb2 	bl	8001d28 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80025c4:	b960      	cbnz	r0, 80025e0 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80025c6:	9b05      	ldr	r3, [sp, #20]
 80025c8:	0359      	lsls	r1, r3, #13
 80025ca:	d519      	bpl.n	8002600 <HAL_SD_ConfigWideBusOperation+0x7c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80025cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80025ce:	6820      	ldr	r0, [r4, #0]
 80025d0:	0409      	lsls	r1, r1, #16
 80025d2:	f000 fcab 	bl	8002f2c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80025d6:	b918      	cbnz	r0, 80025e0 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80025d8:	2102      	movs	r1, #2
 80025da:	6820      	ldr	r0, [r4, #0]
 80025dc:	f000 fd9a 	bl	8003114 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80025e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025e2:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 80025e4:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80025e6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	d034      	beq.n	8002656 <HAL_SD_ConfigWideBusOperation+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	4a27      	ldr	r2, [pc, #156]	; (800268c <HAL_SD_ConfigWideBusOperation+0x108>)
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80025f2:	2001      	movs	r0, #1
 80025f4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80025f8:	b00a      	add	sp, #40	; 0x28
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80025fc:	4630      	mov	r0, r6
 80025fe:	e7ef      	b.n	80025e0 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002600:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002604:	e7ec      	b.n	80025e0 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002606:	bb09      	cbnz	r1, 800264c <HAL_SD_ConfigWideBusOperation+0xc8>
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002608:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 800260a:	9104      	str	r1, [sp, #16]
 800260c:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800260e:	f000 fb66 	bl	8002cde <SDIO_GetResponse>
 8002612:	0182      	lsls	r2, r0, #6
 8002614:	d414      	bmi.n	8002640 <HAL_SD_ConfigWideBusOperation+0xbc>
  errorstate = SD_FindSCR(hsd, scr);
 8002616:	a904      	add	r1, sp, #16
 8002618:	4620      	mov	r0, r4
 800261a:	f7ff fb85 	bl	8001d28 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800261e:	b960      	cbnz	r0, 800263a <HAL_SD_ConfigWideBusOperation+0xb6>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002620:	9b05      	ldr	r3, [sp, #20]
 8002622:	03db      	lsls	r3, r3, #15
 8002624:	d50f      	bpl.n	8002646 <HAL_SD_ConfigWideBusOperation+0xc2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002626:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002628:	6820      	ldr	r0, [r4, #0]
 800262a:	0409      	lsls	r1, r1, #16
 800262c:	f000 fc7e 	bl	8002f2c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002630:	b918      	cbnz	r0, 800263a <HAL_SD_ConfigWideBusOperation+0xb6>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002632:	4601      	mov	r1, r0
 8002634:	6820      	ldr	r0, [r4, #0]
 8002636:	f000 fd6d 	bl	8003114 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800263a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800263c:	4308      	orrs	r0, r1
 800263e:	e7d1      	b.n	80025e4 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002640:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002644:	e7f9      	b.n	800263a <HAL_SD_ConfigWideBusOperation+0xb6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002646:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800264a:	e7f6      	b.n	800263a <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800264c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800264e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002652:	63a3      	str	r3, [r4, #56]	; 0x38
 8002654:	e7c7      	b.n	80025e6 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002656:	6863      	ldr	r3, [r4, #4]
 8002658:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800265a:	68a3      	ldr	r3, [r4, #8]
 800265c:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800265e:	68e3      	ldr	r3, [r4, #12]
 8002660:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002662:	6963      	ldr	r3, [r4, #20]
 8002664:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002666:	69a3      	ldr	r3, [r4, #24]
 8002668:	9309      	str	r3, [sp, #36]	; 0x24
    Init.BusWide             = WideMode;
 800266a:	9607      	str	r6, [sp, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800266c:	ab0a      	add	r3, sp, #40	; 0x28
 800266e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002672:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002676:	ab04      	add	r3, sp, #16
 8002678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800267a:	6820      	ldr	r0, [r4, #0]
 800267c:	f000 faec 	bl	8002c58 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8002680:	2301      	movs	r3, #1
 8002682:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002686:	4628      	mov	r0, r5
 8002688:	e7b6      	b.n	80025f8 <HAL_SD_ConfigWideBusOperation+0x74>
 800268a:	bf00      	nop
 800268c:	004005ff 	.word	0x004005ff

08002690 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002690:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002692:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002694:	0409      	lsls	r1, r1, #16
{
 8002696:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002698:	6800      	ldr	r0, [r0, #0]
 800269a:	f000 fd0b 	bl	80030b4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800269e:	4601      	mov	r1, r0
 80026a0:	b928      	cbnz	r0, 80026ae <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80026a2:	6820      	ldr	r0, [r4, #0]
 80026a4:	f000 fb1b 	bl	8002cde <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80026a8:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80026ac:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80026ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026b0:	4319      	orrs	r1, r3
 80026b2:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80026b4:	2000      	movs	r0, #0
 80026b6:	e7f7      	b.n	80026a8 <HAL_SD_GetCardState+0x18>

080026b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026b8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026ba:	4604      	mov	r4, r0
 80026bc:	2800      	cmp	r0, #0
 80026be:	d036      	beq.n	800272e <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026c4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80026c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026cc:	b91b      	cbnz	r3, 80026d6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026ce:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026d2:	f002 fa77 	bl	8004bc4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026d6:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026d8:	68a0      	ldr	r0, [r4, #8]
 80026da:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80026dc:	2302      	movs	r3, #2
 80026de:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80026e2:	680b      	ldr	r3, [r1, #0]
 80026e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026e8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026ea:	6863      	ldr	r3, [r4, #4]
 80026ec:	4303      	orrs	r3, r0
 80026ee:	68e0      	ldr	r0, [r4, #12]
 80026f0:	4303      	orrs	r3, r0
 80026f2:	6920      	ldr	r0, [r4, #16]
 80026f4:	4303      	orrs	r3, r0
 80026f6:	6960      	ldr	r0, [r4, #20]
 80026f8:	4303      	orrs	r3, r0
 80026fa:	69e0      	ldr	r0, [r4, #28]
 80026fc:	4303      	orrs	r3, r0
 80026fe:	6a20      	ldr	r0, [r4, #32]
 8002700:	4303      	orrs	r3, r0
 8002702:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002704:	4303      	orrs	r3, r0
 8002706:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800270a:	4303      	orrs	r3, r0
 800270c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800270e:	0c12      	lsrs	r2, r2, #16
 8002710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002712:	f002 0204 	and.w	r2, r2, #4
 8002716:	431a      	orrs	r2, r3
 8002718:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800271a:	69cb      	ldr	r3, [r1, #28]
 800271c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002720:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002722:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002724:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002726:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002728:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 800272c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800272e:	2001      	movs	r0, #1
}
 8002730:	bd10      	pop	{r4, pc}

08002732 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002732:	6803      	ldr	r3, [r0, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800273a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002744:	2320      	movs	r3, #32
 8002746:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800274a:	4770      	bx	lr

0800274c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800274c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800274e:	6803      	ldr	r3, [r0, #0]
 8002750:	68c1      	ldr	r1, [r0, #12]
 8002752:	691a      	ldr	r2, [r3, #16]
{
 8002754:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002756:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800275a:	430a      	orrs	r2, r1
 800275c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800275e:	6925      	ldr	r5, [r4, #16]
 8002760:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002762:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002764:	69c0      	ldr	r0, [r0, #28]
 8002766:	432a      	orrs	r2, r5
 8002768:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800276a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800276e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002770:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002774:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002776:	430a      	orrs	r2, r1
 8002778:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	69a1      	ldr	r1, [r4, #24]
 800277e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002782:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002784:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002788:	615a      	str	r2, [r3, #20]
 800278a:	4a25      	ldr	r2, [pc, #148]	; (8002820 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800278c:	d129      	bne.n	80027e2 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800278e:	4293      	cmp	r3, r2
 8002790:	d003      	beq.n	800279a <UART_SetConfig+0x4e>
 8002792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002796:	4293      	cmp	r3, r2
 8002798:	d120      	bne.n	80027dc <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800279a:	f7ff fab5 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800279e:	6862      	ldr	r2, [r4, #4]
 80027a0:	6825      	ldr	r5, [r4, #0]
 80027a2:	1892      	adds	r2, r2, r2
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	f04f 0119 	mov.w	r1, #25
 80027ac:	415b      	adcs	r3, r3
 80027ae:	fba0 0101 	umull	r0, r1, r0, r1
 80027b2:	f7fe f9f5 	bl	8000ba0 <__aeabi_uldivmod>
 80027b6:	2164      	movs	r1, #100	; 0x64
 80027b8:	fbb0 f4f1 	udiv	r4, r0, r1
 80027bc:	fb01 0314 	mls	r3, r1, r4, r0
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	3332      	adds	r3, #50	; 0x32
 80027c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c8:	f003 0207 	and.w	r2, r3, #7
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80027d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027d6:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027d8:	60ab      	str	r3, [r5, #8]
 80027da:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80027dc:	f7ff fa84 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 80027e0:	e7dd      	b.n	800279e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d002      	beq.n	80027ec <UART_SetConfig+0xa0>
 80027e6:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <UART_SetConfig+0xd8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d116      	bne.n	800281a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80027ec:	f7ff fa8c 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f0:	6863      	ldr	r3, [r4, #4]
 80027f2:	6825      	ldr	r5, [r4, #0]
 80027f4:	2119      	movs	r1, #25
 80027f6:	009a      	lsls	r2, r3, #2
 80027f8:	fba0 0101 	umull	r0, r1, r0, r1
 80027fc:	0f9b      	lsrs	r3, r3, #30
 80027fe:	f7fe f9cf 	bl	8000ba0 <__aeabi_uldivmod>
 8002802:	2264      	movs	r2, #100	; 0x64
 8002804:	fbb0 f1f2 	udiv	r1, r0, r2
 8002808:	fb02 0311 	mls	r3, r2, r1, r0
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	3332      	adds	r3, #50	; 0x32
 8002810:	fbb3 f3f2 	udiv	r3, r3, r2
 8002814:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002818:	e7de      	b.n	80027d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800281a:	f7ff fa65 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 800281e:	e7e7      	b.n	80027f0 <UART_SetConfig+0xa4>
 8002820:	40011000 	.word	0x40011000
 8002824:	40011400 	.word	0x40011400

08002828 <HAL_UART_Init>:
{
 8002828:	b510      	push	{r4, lr}
  if (huart == NULL)
 800282a:	4604      	mov	r4, r0
 800282c:	b340      	cbz	r0, 8002880 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800282e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002832:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002836:	b91b      	cbnz	r3, 8002840 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002838:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800283c:	f002 fa7c 	bl	8004d38 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002840:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002842:	2324      	movs	r3, #36	; 0x24
 8002844:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002848:	68d3      	ldr	r3, [r2, #12]
 800284a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800284e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff ff7b 	bl	800274c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800285e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002866:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800286e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002872:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002874:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002876:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800287a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800287e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002880:	2001      	movs	r0, #1
}
 8002882:	bd10      	pop	{r4, pc}

08002884 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002884:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002888:	2b20      	cmp	r3, #32
 800288a:	d120      	bne.n	80028ce <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800288c:	b1e9      	cbz	r1, 80028ca <HAL_UART_Receive_IT+0x46>
 800288e:	b1e2      	cbz	r2, 80028ca <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8002890:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002894:	2b01      	cmp	r3, #1
 8002896:	d01a      	beq.n	80028ce <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8002898:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800289a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289c:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800289e:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028a2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028a6:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80028a8:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028aa:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80028ac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028b0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80028b4:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028b6:	6951      	ldr	r1, [r2, #20]
 80028b8:	f041 0101 	orr.w	r1, r1, #1
 80028bc:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028be:	68d1      	ldr	r1, [r2, #12]
 80028c0:	f041 0120 	orr.w	r1, r1, #32
 80028c4:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80028c6:	4618      	mov	r0, r3
 80028c8:	4770      	bx	lr
      return HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
 80028cc:	4770      	bx	lr
    return HAL_BUSY;
 80028ce:	2002      	movs	r0, #2
}
 80028d0:	4770      	bx	lr

080028d2 <HAL_UART_TxCpltCallback>:
 80028d2:	4770      	bx	lr

080028d4 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028d4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80028d8:	2b22      	cmp	r3, #34	; 0x22
{
 80028da:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028dc:	d136      	bne.n	800294c <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028de:	6883      	ldr	r3, [r0, #8]
 80028e0:	6901      	ldr	r1, [r0, #16]
 80028e2:	6802      	ldr	r2, [r0, #0]
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80028ea:	d123      	bne.n	8002934 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028ec:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028ee:	b9e9      	cbnz	r1, 800292c <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f4:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80028f8:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80028fa:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80028fc:	3c01      	subs	r4, #1
 80028fe:	b2a4      	uxth	r4, r4
 8002900:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002902:	b98c      	cbnz	r4, 8002928 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002904:	6803      	ldr	r3, [r0, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	f022 0220 	bic.w	r2, r2, #32
 800290c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002914:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800291e:	2320      	movs	r3, #32
 8002920:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002924:	f001 ff8e 	bl	8004844 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002928:	2000      	movs	r0, #0
}
 800292a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f823 2b01 	strh.w	r2, [r3], #1
 8002932:	e7e1      	b.n	80028f8 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002934:	b921      	cbnz	r1, 8002940 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002936:	1c59      	adds	r1, r3, #1
 8002938:	6852      	ldr	r2, [r2, #4]
 800293a:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e7dc      	b.n	80028fa <UART_Receive_IT+0x26>
 8002940:	6852      	ldr	r2, [r2, #4]
 8002942:	1c59      	adds	r1, r3, #1
 8002944:	6281      	str	r1, [r0, #40]	; 0x28
 8002946:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800294a:	e7f7      	b.n	800293c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800294c:	2002      	movs	r0, #2
 800294e:	bd10      	pop	{r4, pc}

08002950 <HAL_UART_ErrorCallback>:
 8002950:	4770      	bx	lr
	...

08002954 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002954:	6803      	ldr	r3, [r0, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002958:	68d9      	ldr	r1, [r3, #12]
{
 800295a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800295c:	0716      	lsls	r6, r2, #28
{
 800295e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002960:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002962:	d107      	bne.n	8002974 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002964:	0696      	lsls	r6, r2, #26
 8002966:	d55c      	bpl.n	8002a22 <HAL_UART_IRQHandler+0xce>
 8002968:	068d      	lsls	r5, r1, #26
 800296a:	d55a      	bpl.n	8002a22 <HAL_UART_IRQHandler+0xce>
}
 800296c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002970:	f7ff bfb0 	b.w	80028d4 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002974:	f015 0501 	ands.w	r5, r5, #1
 8002978:	d102      	bne.n	8002980 <HAL_UART_IRQHandler+0x2c>
 800297a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800297e:	d050      	beq.n	8002a22 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002980:	07d0      	lsls	r0, r2, #31
 8002982:	d505      	bpl.n	8002990 <HAL_UART_IRQHandler+0x3c>
 8002984:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002986:	bf42      	ittt	mi
 8002988:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800298a:	f043 0301 	orrmi.w	r3, r3, #1
 800298e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002990:	0756      	lsls	r6, r2, #29
 8002992:	d504      	bpl.n	800299e <HAL_UART_IRQHandler+0x4a>
 8002994:	b11d      	cbz	r5, 800299e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002996:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800299e:	0790      	lsls	r0, r2, #30
 80029a0:	d504      	bpl.n	80029ac <HAL_UART_IRQHandler+0x58>
 80029a2:	b11d      	cbz	r5, 80029ac <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80029ac:	0713      	lsls	r3, r2, #28
 80029ae:	d506      	bpl.n	80029be <HAL_UART_IRQHandler+0x6a>
 80029b0:	068e      	lsls	r6, r1, #26
 80029b2:	d400      	bmi.n	80029b6 <HAL_UART_IRQHandler+0x62>
 80029b4:	b11d      	cbz	r5, 80029be <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d066      	beq.n	8002a92 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029c4:	0695      	lsls	r5, r2, #26
 80029c6:	d504      	bpl.n	80029d2 <HAL_UART_IRQHandler+0x7e>
 80029c8:	0688      	lsls	r0, r1, #26
 80029ca:	d502      	bpl.n	80029d2 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 80029cc:	4620      	mov	r0, r4
 80029ce:	f7ff ff81 	bl	80028d4 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80029d8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80029da:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029dc:	d402      	bmi.n	80029e4 <HAL_UART_IRQHandler+0x90>
 80029de:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80029e2:	d01a      	beq.n	8002a1a <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 80029e4:	f7ff fea5 	bl	8002732 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	0652      	lsls	r2, r2, #25
 80029ee:	d510      	bpl.n	8002a12 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80029f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80029fa:	b150      	cbz	r0, 8002a12 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_UART_IRQHandler+0x140>)
 80029fe:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a00:	f7fe fd57 	bl	80014b2 <HAL_DMA_Abort_IT>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d044      	beq.n	8002a92 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a08:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a0e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002a10:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7ff ff9c 	bl	8002950 <HAL_UART_ErrorCallback>
 8002a18:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002a1a:	f7ff ff99 	bl	8002950 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a22:	0616      	lsls	r6, r2, #24
 8002a24:	d527      	bpl.n	8002a76 <HAL_UART_IRQHandler+0x122>
 8002a26:	060d      	lsls	r5, r1, #24
 8002a28:	d525      	bpl.n	8002a76 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a2a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002a2e:	2a21      	cmp	r2, #33	; 0x21
 8002a30:	d12f      	bne.n	8002a92 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a32:	68a2      	ldr	r2, [r4, #8]
 8002a34:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002a38:	6a22      	ldr	r2, [r4, #32]
 8002a3a:	d117      	bne.n	8002a6c <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a3c:	8811      	ldrh	r1, [r2, #0]
 8002a3e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002a42:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a44:	6921      	ldr	r1, [r4, #16]
 8002a46:	b979      	cbnz	r1, 8002a68 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8002a48:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002a4a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002a4c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002a4e:	3a01      	subs	r2, #1
 8002a50:	b292      	uxth	r2, r2
 8002a52:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002a54:	b9ea      	cbnz	r2, 8002a92 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a5c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002a68:	3201      	adds	r2, #1
 8002a6a:	e7ee      	b.n	8002a4a <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a6c:	1c51      	adds	r1, r2, #1
 8002a6e:	6221      	str	r1, [r4, #32]
 8002a70:	7812      	ldrb	r2, [r2, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	e7ea      	b.n	8002a4c <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a76:	0650      	lsls	r0, r2, #25
 8002a78:	d50b      	bpl.n	8002a92 <HAL_UART_IRQHandler+0x13e>
 8002a7a:	064a      	lsls	r2, r1, #25
 8002a7c:	d509      	bpl.n	8002a92 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a84:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002a86:	2320      	movs	r3, #32
 8002a88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f7ff ff20 	bl	80028d2 <HAL_UART_TxCpltCallback>
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
 8002a94:	08002a99 	.word	0x08002a99

08002a98 <UART_DMAAbortOnError>:
{
 8002a98:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002aa0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002aa2:	f7ff ff55 	bl	8002950 <HAL_UART_ErrorCallback>
 8002aa6:	bd08      	pop	{r3, pc}

08002aa8 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <SDMMC_GetCmdResp2+0x4c>)
 8002aaa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ab4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ab8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002aba:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002abe:	d315      	bcc.n	8002aec <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002ac0:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002ac2:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002ac6:	d0f8      	beq.n	8002aba <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ac8:	0512      	lsls	r2, r2, #20
 8002aca:	d4f6      	bmi.n	8002aba <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002acc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ace:	075b      	lsls	r3, r3, #29
 8002ad0:	d503      	bpl.n	8002ada <SDMMC_GetCmdResp2+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ad2:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ad4:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002ada:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002adc:	f013 0301 	ands.w	r3, r3, #1
 8002ae0:	d001      	beq.n	8002ae6 <SDMMC_GetCmdResp2+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e7f6      	b.n	8002ad4 <SDMMC_GetCmdResp2+0x2c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002ae6:	22c5      	movs	r2, #197	; 0xc5
 8002ae8:	6382      	str	r2, [r0, #56]	; 0x38
 8002aea:	e7f4      	b.n	8002ad6 <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8002aec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002af0:	e7f1      	b.n	8002ad6 <SDMMC_GetCmdResp2+0x2e>
 8002af2:	bf00      	nop
 8002af4:	2000000c 	.word	0x2000000c

08002af8 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <SDMMC_GetCmdResp3+0x40>)
 8002afa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b04:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b08:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002b0a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b0e:	d30f      	bcc.n	8002b30 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002b10:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002b12:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002b16:	d0f8      	beq.n	8002b0a <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002b18:	0512      	lsls	r2, r2, #20
 8002b1a:	d4f6      	bmi.n	8002b0a <SDMMC_GetCmdResp3+0x12>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002b1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b1e:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002b22:	bf15      	itete	ne
 8002b24:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002b26:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002b28:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002b2a:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002b30:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2000000c 	.word	0x2000000c

08002b3c <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002b3c:	4b44      	ldr	r3, [pc, #272]	; (8002c50 <SDMMC_GetCmdResp1+0x114>)
{
 8002b3e:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8002b46:	fbb3 f3f4 	udiv	r3, r3, r4
 8002b4a:	435a      	muls	r2, r3
    if (count-- == 0U)
 8002b4c:	2a00      	cmp	r2, #0
 8002b4e:	d04a      	beq.n	8002be6 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 8002b50:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002b52:	f013 0f45 	tst.w	r3, #69	; 0x45
 8002b56:	d008      	beq.n	8002b6a <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002b58:	051c      	lsls	r4, r3, #20
 8002b5a:	d406      	bmi.n	8002b6a <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002b5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b5e:	075b      	lsls	r3, r3, #29
 8002b60:	d505      	bpl.n	8002b6e <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002b62:	2304      	movs	r3, #4
 8002b64:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002b66:	4618      	mov	r0, r3
 8002b68:	bd10      	pop	{r4, pc}
 8002b6a:	3a01      	subs	r2, #1
 8002b6c:	e7ee      	b.n	8002b4c <SDMMC_GetCmdResp1+0x10>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002b6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b70:	07dc      	lsls	r4, r3, #31
 8002b72:	d503      	bpl.n	8002b7c <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002b74:	2301      	movs	r3, #1
 8002b76:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002b78:	2001      	movs	r0, #1
 8002b7a:	bd10      	pop	{r4, pc}
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002b7c:	23c5      	movs	r3, #197	; 0xc5
 8002b7e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002b80:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	4299      	cmp	r1, r3
 8002b86:	d1f7      	bne.n	8002b78 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8002b88:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002b8a:	4832      	ldr	r0, [pc, #200]	; (8002c54 <SDMMC_GetCmdResp1+0x118>)
 8002b8c:	4018      	ands	r0, r3
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d05c      	beq.n	8002c4c <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db2a      	blt.n	8002bec <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002b96:	005a      	lsls	r2, r3, #1
 8002b98:	d42b      	bmi.n	8002bf2 <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002b9a:	009c      	lsls	r4, r3, #2
 8002b9c:	d42b      	bmi.n	8002bf6 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002b9e:	00d9      	lsls	r1, r3, #3
 8002ba0:	d42b      	bmi.n	8002bfa <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002ba2:	011a      	lsls	r2, r3, #4
 8002ba4:	d42c      	bmi.n	8002c00 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002ba6:	015c      	lsls	r4, r3, #5
 8002ba8:	d42d      	bmi.n	8002c06 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002baa:	01d9      	lsls	r1, r3, #7
 8002bac:	d42e      	bmi.n	8002c0c <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002bae:	021a      	lsls	r2, r3, #8
 8002bb0:	d42f      	bmi.n	8002c12 <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002bb2:	025c      	lsls	r4, r3, #9
 8002bb4:	d430      	bmi.n	8002c18 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002bb6:	0299      	lsls	r1, r3, #10
 8002bb8:	d431      	bmi.n	8002c1e <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002bba:	02da      	lsls	r2, r3, #11
 8002bbc:	d432      	bmi.n	8002c24 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002bbe:	035c      	lsls	r4, r3, #13
 8002bc0:	d433      	bmi.n	8002c2a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002bc2:	0399      	lsls	r1, r3, #14
 8002bc4:	d434      	bmi.n	8002c30 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002bc6:	03da      	lsls	r2, r3, #15
 8002bc8:	d435      	bmi.n	8002c36 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002bca:	041c      	lsls	r4, r3, #16
 8002bcc:	d436      	bmi.n	8002c3c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002bce:	0459      	lsls	r1, r3, #17
 8002bd0:	d437      	bmi.n	8002c42 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002bd2:	049a      	lsls	r2, r3, #18
 8002bd4:	d438      	bmi.n	8002c48 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002bd6:	f013 0f08 	tst.w	r3, #8
 8002bda:	bf0c      	ite	eq
 8002bdc:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002be0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8002be4:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8002be6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002bea:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002bec:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002bf0:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002bf2:	2040      	movs	r0, #64	; 0x40
 8002bf4:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002bf6:	2080      	movs	r0, #128	; 0x80
 8002bf8:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002bfa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002bfe:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002c00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c04:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002c06:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c0a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002c0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c10:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002c12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c16:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002c18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c1c:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002c1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c22:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CC_ERR;
 8002c24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c28:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002c2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c2e:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002c30:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c34:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002c36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c3a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002c3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c40:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002c42:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002c46:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_RESET;
 8002c48:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8002c4c:	bd10      	pop	{r4, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000000c 	.word	0x2000000c
 8002c54:	fdffe008 	.word	0xfdffe008

08002c58 <SDIO_Init>:
{
 8002c58:	b084      	sub	sp, #16
 8002c5a:	b510      	push	{r4, lr}
 8002c5c:	ac03      	add	r4, sp, #12
 8002c5e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8002c62:	9904      	ldr	r1, [sp, #16]
 8002c64:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c66:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8002c68:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8002c6a:	9905      	ldr	r1, [sp, #20]
 8002c6c:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8002c6e:	9906      	ldr	r1, [sp, #24]
 8002c70:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8002c72:	9907      	ldr	r1, [sp, #28]
 8002c74:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8002c76:	9908      	ldr	r1, [sp, #32]
}
 8002c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c7c:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8002c80:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c82:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002c86:	4313      	orrs	r3, r2
 8002c88:	6043      	str	r3, [r0, #4]
}
 8002c8a:	b004      	add	sp, #16
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	4770      	bx	lr

08002c90 <SDIO_ReadFIFO>:
 8002c90:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8002c94:	4770      	bx	lr

08002c96 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8002c96:	680b      	ldr	r3, [r1, #0]
 8002c98:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	4770      	bx	lr

08002ca0 <SDIO_PowerState_ON>:
{  
 8002ca0:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	f7fe f952 	bl	8000f50 <HAL_Delay>
}
 8002cac:	2000      	movs	r0, #0
 8002cae:	bd08      	pop	{r3, pc}

08002cb0 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002cb0:	6800      	ldr	r0, [r0, #0]
}
 8002cb2:	f000 0003 	and.w	r0, r0, #3
 8002cb6:	4770      	bx	lr

08002cb8 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8002cb8:	680b      	ldr	r3, [r1, #0]
{
 8002cba:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8002cbc:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002cbe:	688c      	ldr	r4, [r1, #8]
 8002cc0:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002cc2:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002cc4:	4323      	orrs	r3, r4
                       Command->Response         |\
 8002cc6:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8002cc8:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8002cca:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002ccc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8002cd0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002cd2:	f022 020f 	bic.w	r2, r2, #15
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60c3      	str	r3, [r0, #12]
}
 8002cda:	2000      	movs	r0, #0
 8002cdc:	bd10      	pop	{r4, pc}

08002cde <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002cde:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8002ce0:	5840      	ldr	r0, [r0, r1]
}  
 8002ce2:	4770      	bx	lr

08002ce4 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8002ce4:	680b      	ldr	r3, [r1, #0]
{
 8002ce6:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8002ce8:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8002cea:	684b      	ldr	r3, [r1, #4]
 8002cec:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002cee:	68cc      	ldr	r4, [r1, #12]
 8002cf0:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002cf2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002cf4:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8002cf6:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8002cf8:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8002cfa:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8002cfc:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002cfe:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8002d02:	4313      	orrs	r3, r2
 8002d04:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002d06:	2000      	movs	r0, #0
 8002d08:	bd10      	pop	{r4, pc}

08002d0a <SDMMC_CmdBlockLength>:
{
 8002d0a:	b530      	push	{r4, r5, lr}
 8002d0c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d0e:	2340      	movs	r3, #64	; 0x40
 8002d10:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d12:	2300      	movs	r3, #0
{
 8002d14:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002d16:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002d18:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d1a:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d1c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d22:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002d24:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d26:	f7ff ffc7 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	4621      	mov	r1, r4
 8002d30:	4628      	mov	r0, r5
 8002d32:	f7ff ff03 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 8002d36:	b007      	add	sp, #28
 8002d38:	bd30      	pop	{r4, r5, pc}

08002d3a <SDMMC_CmdReadSingleBlock>:
{
 8002d3a:	b530      	push	{r4, r5, lr}
 8002d3c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d3e:	2340      	movs	r3, #64	; 0x40
 8002d40:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d42:	2300      	movs	r3, #0
{
 8002d44:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002d46:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002d48:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d4a:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d4c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d52:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002d54:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d56:	f7ff ffaf 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4621      	mov	r1, r4
 8002d60:	4628      	mov	r0, r5
 8002d62:	f7ff feeb 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 8002d66:	b007      	add	sp, #28
 8002d68:	bd30      	pop	{r4, r5, pc}

08002d6a <SDMMC_CmdReadMultiBlock>:
{
 8002d6a:	b530      	push	{r4, r5, lr}
 8002d6c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d6e:	2340      	movs	r3, #64	; 0x40
 8002d70:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d72:	2300      	movs	r3, #0
{
 8002d74:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002d76:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002d78:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d7a:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d7c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d82:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002d84:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d86:	f7ff ff97 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4621      	mov	r1, r4
 8002d90:	4628      	mov	r0, r5
 8002d92:	f7ff fed3 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 8002d96:	b007      	add	sp, #28
 8002d98:	bd30      	pop	{r4, r5, pc}

08002d9a <SDMMC_CmdWriteSingleBlock>:
{
 8002d9a:	b530      	push	{r4, r5, lr}
 8002d9c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d9e:	2340      	movs	r3, #64	; 0x40
 8002da0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002da2:	2300      	movs	r3, #0
{
 8002da4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002da6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002da8:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002daa:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002dac:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002db4:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002db6:	f7ff ff7f 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f7ff febb 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 8002dc6:	b007      	add	sp, #28
 8002dc8:	bd30      	pop	{r4, r5, pc}

08002dca <SDMMC_CmdWriteMultiBlock>:
{
 8002dca:	b530      	push	{r4, r5, lr}
 8002dcc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002dce:	2340      	movs	r3, #64	; 0x40
 8002dd0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002dd2:	2300      	movs	r3, #0
{
 8002dd4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002dd6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002dd8:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002dda:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ddc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002de2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002de4:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002de6:	f7ff ff67 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dee:	4621      	mov	r1, r4
 8002df0:	4628      	mov	r0, r5
 8002df2:	f7ff fea3 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 8002df6:	b007      	add	sp, #28
 8002df8:	bd30      	pop	{r4, r5, pc}
	...

08002dfc <SDMMC_CmdStopTransfer>:
{
 8002dfc:	b530      	push	{r4, r5, lr}
 8002dfe:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002e00:	2300      	movs	r3, #0
{
 8002e02:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002e04:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002e06:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e08:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e0a:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e0c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e12:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e14:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002e16:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e18:	f7ff ff4e 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002e1c:	4a03      	ldr	r2, [pc, #12]	; (8002e2c <SDMMC_CmdStopTransfer+0x30>)
 8002e1e:	4621      	mov	r1, r4
 8002e20:	4628      	mov	r0, r5
 8002e22:	f7ff fe8b 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 8002e26:	b007      	add	sp, #28
 8002e28:	bd30      	pop	{r4, r5, pc}
 8002e2a:	bf00      	nop
 8002e2c:	05f5e100 	.word	0x05f5e100

08002e30 <SDMMC_CmdSelDesel>:
{
 8002e30:	b530      	push	{r4, r5, lr}
 8002e32:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e34:	2340      	movs	r3, #64	; 0x40
 8002e36:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e38:	2300      	movs	r3, #0
{
 8002e3a:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002e3c:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e3e:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e40:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002e46:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e48:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002e4a:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e4c:	f7ff ff34 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4621      	mov	r1, r4
 8002e56:	4628      	mov	r0, r5
 8002e58:	f7ff fe70 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 8002e5c:	b007      	add	sp, #28
 8002e5e:	bd30      	pop	{r4, r5, pc}

08002e60 <SDMMC_CmdGoIdleState>:
{
 8002e60:	b510      	push	{r4, lr}
 8002e62:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002e68:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002e6a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e6c:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e6e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e74:	9305      	str	r3, [sp, #20]
{
 8002e76:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e78:	f7ff ff1e 	bl	8002cb8 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <SDMMC_CmdGoIdleState+0x4c>)
 8002e7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e88:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e8c:	4353      	muls	r3, r2
    if (count-- == 0U)
 8002e8e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002e92:	d307      	bcc.n	8002ea4 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002e94:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002e96:	0612      	lsls	r2, r2, #24
 8002e98:	d5f9      	bpl.n	8002e8e <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e9a:	23c5      	movs	r3, #197	; 0xc5
 8002e9c:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8002e9e:	2000      	movs	r0, #0
}
 8002ea0:	b006      	add	sp, #24
 8002ea2:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8002ea4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8002ea8:	e7fa      	b.n	8002ea0 <SDMMC_CmdGoIdleState+0x40>
 8002eaa:	bf00      	nop
 8002eac:	2000000c 	.word	0x2000000c

08002eb0 <SDMMC_CmdOperCond>:
{
 8002eb0:	b510      	push	{r4, lr}
 8002eb2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002eb4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002eb8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002eba:	2308      	movs	r3, #8
 8002ebc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ebe:	2340      	movs	r3, #64	; 0x40
 8002ec0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ec6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ecc:	9305      	str	r3, [sp, #20]
{
 8002ece:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ed0:	f7ff fef2 	bl	8002cb8 <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <SDMMC_CmdOperCond+0x78>)
 8002ed6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ee0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ee4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002ee6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002eea:	d31a      	bcc.n	8002f22 <SDMMC_CmdOperCond+0x72>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002eec:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002eee:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002ef2:	d0f8      	beq.n	8002ee6 <SDMMC_CmdOperCond+0x36>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ef4:	0512      	lsls	r2, r2, #20
 8002ef6:	d4f6      	bmi.n	8002ee6 <SDMMC_CmdOperCond+0x36>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002ef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002efa:	075b      	lsls	r3, r3, #29
 8002efc:	d503      	bpl.n	8002f06 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002efe:	2004      	movs	r0, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f00:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002f02:	b006      	add	sp, #24
 8002f04:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002f06:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002f08:	f012 0201 	ands.w	r2, r2, #1
 8002f0c:	d001      	beq.n	8002f12 <SDMMC_CmdOperCond+0x62>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	e7f6      	b.n	8002f00 <SDMMC_CmdOperCond+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002f12:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f14:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002f18:	d0f3      	beq.n	8002f02 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002f1a:	2340      	movs	r3, #64	; 0x40
 8002f1c:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002f1e:	4610      	mov	r0, r2
 8002f20:	e7ef      	b.n	8002f02 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8002f22:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002f26:	e7ec      	b.n	8002f02 <SDMMC_CmdOperCond+0x52>
 8002f28:	2000000c 	.word	0x2000000c

08002f2c <SDMMC_CmdAppCommand>:
{
 8002f2c:	b530      	push	{r4, r5, lr}
 8002f2e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f30:	2340      	movs	r3, #64	; 0x40
 8002f32:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f34:	2300      	movs	r3, #0
{
 8002f36:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002f38:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002f3a:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f3c:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f3e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f44:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002f46:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f48:	f7ff feb6 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4621      	mov	r1, r4
 8002f52:	4628      	mov	r0, r5
 8002f54:	f7ff fdf2 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 8002f58:	b007      	add	sp, #28
 8002f5a:	bd30      	pop	{r4, r5, pc}

08002f5c <SDMMC_CmdAppOperCommand>:
{
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002f60:	2329      	movs	r3, #41	; 0x29
 8002f62:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002f64:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f68:	2340      	movs	r3, #64	; 0x40
 8002f6a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002f6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f70:	2300      	movs	r3, #0
{
 8002f72:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002f74:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f76:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f78:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f7e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f80:	f7ff fe9a 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7ff fdb7 	bl	8002af8 <SDMMC_GetCmdResp3>
}
 8002f8a:	b006      	add	sp, #24
 8002f8c:	bd10      	pop	{r4, pc}

08002f8e <SDMMC_CmdSendSCR>:
{
 8002f8e:	b530      	push	{r4, r5, lr}
 8002f90:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002f92:	2300      	movs	r3, #0
{
 8002f94:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002f96:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002f98:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f9a:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f9c:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f9e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002fa4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fa6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002fa8:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002faa:	f7ff fe85 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f7ff fdc1 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 8002fba:	b007      	add	sp, #28
 8002fbc:	bd30      	pop	{r4, r5, pc}

08002fbe <SDMMC_CmdSendCID>:
{
 8002fbe:	b510      	push	{r4, lr}
 8002fc0:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8002fc2:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002fc4:	2202      	movs	r2, #2
{
 8002fc6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002fc8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002fca:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fcc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002fce:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fd4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002fd6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fd8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fda:	f7ff fe6d 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f7ff fd62 	bl	8002aa8 <SDMMC_GetCmdResp2>
}
 8002fe4:	b006      	add	sp, #24
 8002fe6:	bd10      	pop	{r4, pc}

08002fe8 <SDMMC_CmdSendCSD>:
{
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002fec:	2309      	movs	r3, #9
 8002fee:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002ff0:	23c0      	movs	r3, #192	; 0xc0
 8002ff2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ff4:	2300      	movs	r3, #0
{
 8002ff6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8002ff8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ffa:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ffc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003002:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003004:	f7ff fe58 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003008:	4620      	mov	r0, r4
 800300a:	f7ff fd4d 	bl	8002aa8 <SDMMC_GetCmdResp2>
}
 800300e:	b006      	add	sp, #24
 8003010:	bd10      	pop	{r4, pc}
	...

08003014 <SDMMC_CmdSetRelAdd>:
{
 8003014:	b530      	push	{r4, r5, lr}
 8003016:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003018:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800301a:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 800301c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800301e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003020:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003022:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003024:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8003028:	460d      	mov	r5, r1
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800302a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800302c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800302e:	9305      	str	r3, [sp, #20]
{
 8003030:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003032:	f7ff fe41 	bl	8002cb8 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <SDMMC_CmdSetRelAdd+0x9c>)
 8003038:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003042:	f241 3388 	movw	r3, #5000	; 0x1388
 8003046:	4353      	muls	r3, r2
    if (count-- == 0U)
 8003048:	f113 33ff 	adds.w	r3, r3, #4294967295
 800304c:	d328      	bcc.n	80030a0 <SDMMC_CmdSetRelAdd+0x8c>
    sta_reg = SDIOx->STA;
 800304e:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003050:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003054:	d0f8      	beq.n	8003048 <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003056:	0512      	lsls	r2, r2, #20
 8003058:	d4f6      	bmi.n	8003048 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800305a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800305c:	0758      	lsls	r0, r3, #29
 800305e:	d503      	bpl.n	8003068 <SDMMC_CmdSetRelAdd+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003060:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003062:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8003064:	b007      	add	sp, #28
 8003066:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003068:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800306a:	07d9      	lsls	r1, r3, #31
 800306c:	d501      	bpl.n	8003072 <SDMMC_CmdSetRelAdd+0x5e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800306e:	2001      	movs	r0, #1
 8003070:	e7f7      	b.n	8003062 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDIOx->RESPCMD);
 8003072:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b03      	cmp	r3, #3
 8003078:	d115      	bne.n	80030a6 <SDMMC_CmdSetRelAdd+0x92>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800307a:	23c5      	movs	r3, #197	; 0xc5
 800307c:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800307e:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003080:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8003084:	d102      	bne.n	800308c <SDMMC_CmdSetRelAdd+0x78>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	802b      	strh	r3, [r5, #0]
 800308a:	e7eb      	b.n	8003064 <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800308c:	045a      	lsls	r2, r3, #17
 800308e:	d40c      	bmi.n	80030aa <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003090:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003094:	bf0c      	ite	eq
 8003096:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800309a:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800309e:	e7e1      	b.n	8003064 <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 80030a0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80030a4:	e7de      	b.n	8003064 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80030a6:	2001      	movs	r0, #1
 80030a8:	e7dc      	b.n	8003064 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80030aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030ae:	e7d9      	b.n	8003064 <SDMMC_CmdSetRelAdd+0x50>
 80030b0:	2000000c 	.word	0x2000000c

080030b4 <SDMMC_CmdSendStatus>:
{
 80030b4:	b530      	push	{r4, r5, lr}
 80030b6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80030b8:	2340      	movs	r3, #64	; 0x40
 80030ba:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030bc:	2300      	movs	r3, #0
{
 80030be:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80030c0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80030c2:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030c4:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030c6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80030c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030cc:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80030ce:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030d0:	f7ff fdf2 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4621      	mov	r1, r4
 80030da:	4628      	mov	r0, r5
 80030dc:	f7ff fd2e 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 80030e0:	b007      	add	sp, #28
 80030e2:	bd30      	pop	{r4, r5, pc}

080030e4 <SDMMC_CmdSwitch>:
{
 80030e4:	b530      	push	{r4, r5, lr}
 80030e6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80030e8:	2340      	movs	r3, #64	; 0x40
 80030ea:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030ec:	2300      	movs	r3, #0
{
 80030ee:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN */
 80030f0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80030f2:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030f4:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030f6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80030f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fc:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80030fe:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003100:	f7ff fdda 	bl	8002cb8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4621      	mov	r1, r4
 800310a:	4628      	mov	r0, r5
 800310c:	f7ff fd16 	bl	8002b3c <SDMMC_GetCmdResp1>
}
 8003110:	b007      	add	sp, #28
 8003112:	bd30      	pop	{r4, r5, pc}

08003114 <SDMMC_CmdBusWidth>:
 8003114:	f7ff bfe6 	b.w	80030e4 <SDMMC_CmdSwitch>

08003118 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <disk_status+0x10>)
 800311a:	181a      	adds	r2, r3, r0
 800311c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003120:	7a10      	ldrb	r0, [r2, #8]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4718      	bx	r3
 8003128:	20000224 	.word	0x20000224

0800312c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <disk_initialize+0x1c>)
 800312e:	5c1a      	ldrb	r2, [r3, r0]
 8003130:	b942      	cbnz	r2, 8003144 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8003132:	2201      	movs	r2, #1
 8003134:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003136:	181a      	adds	r2, r3, r0
 8003138:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800313c:	7a10      	ldrb	r0, [r2, #8]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4718      	bx	r3
  }
  return stat;
}
 8003144:	2000      	movs	r0, #0
 8003146:	4770      	bx	lr
 8003148:	20000224 	.word	0x20000224

0800314c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800314c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800314e:	4c05      	ldr	r4, [pc, #20]	; (8003164 <disk_read+0x18>)
 8003150:	1825      	adds	r5, r4, r0
 8003152:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003156:	6860      	ldr	r0, [r4, #4]
 8003158:	6884      	ldr	r4, [r0, #8]
 800315a:	7a28      	ldrb	r0, [r5, #8]
 800315c:	46a4      	mov	ip, r4
  return res;
}
 800315e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003160:	4760      	bx	ip
 8003162:	bf00      	nop
 8003164:	20000224 	.word	0x20000224

08003168 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003168:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800316a:	4c05      	ldr	r4, [pc, #20]	; (8003180 <disk_write+0x18>)
 800316c:	1825      	adds	r5, r4, r0
 800316e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003172:	6860      	ldr	r0, [r4, #4]
 8003174:	68c4      	ldr	r4, [r0, #12]
 8003176:	7a28      	ldrb	r0, [r5, #8]
 8003178:	46a4      	mov	ip, r4
  return res;
}
 800317a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800317c:	4760      	bx	ip
 800317e:	bf00      	nop
 8003180:	20000224 	.word	0x20000224

08003184 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <disk_ioctl+0x18>)
{
 8003186:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003188:	181c      	adds	r4, r3, r0
 800318a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800318e:	7a20      	ldrb	r0, [r4, #8]
 8003190:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8003192:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	4718      	bx	r3
 800319a:	bf00      	nop
 800319c:	20000224 	.word	0x20000224

080031a0 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80031a0:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80031a2:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80031a4:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80031a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80031aa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80031ae:	4770      	bx	lr

080031b0 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80031b0:	0a0b      	lsrs	r3, r1, #8
 80031b2:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80031b4:	7043      	strb	r3, [r0, #1]
 80031b6:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80031b8:	0e09      	lsrs	r1, r1, #24
 80031ba:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80031bc:	70c1      	strb	r1, [r0, #3]
 80031be:	4770      	bx	lr

080031c0 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80031c0:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80031c2:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80031c6:	4290      	cmp	r0, r2
 80031c8:	d1fb      	bne.n	80031c2 <mem_set+0x2>
}
 80031ca:	4770      	bx	lr

080031cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80031cc:	4b15      	ldr	r3, [pc, #84]	; (8003224 <chk_lock+0x58>)
 80031ce:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80031d0:	2500      	movs	r5, #0
 80031d2:	462a      	mov	r2, r5
 80031d4:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 80031d6:	681e      	ldr	r6, [r3, #0]
 80031d8:	b1a6      	cbz	r6, 8003204 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80031da:	6807      	ldr	r7, [r0, #0]
 80031dc:	42be      	cmp	r6, r7
 80031de:	d112      	bne.n	8003206 <chk_lock+0x3a>
 80031e0:	685f      	ldr	r7, [r3, #4]
 80031e2:	6886      	ldr	r6, [r0, #8]
 80031e4:	42b7      	cmp	r7, r6
 80031e6:	d10e      	bne.n	8003206 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80031e8:	689f      	ldr	r7, [r3, #8]
 80031ea:	6946      	ldr	r6, [r0, #20]
 80031ec:	42b7      	cmp	r7, r6
 80031ee:	d10a      	bne.n	8003206 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80031f0:	b9b1      	cbnz	r1, 8003220 <chk_lock+0x54>
 80031f2:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80031f6:	8993      	ldrh	r3, [r2, #12]
 80031f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fc:	bf14      	ite	ne
 80031fe:	2000      	movne	r0, #0
 8003200:	2010      	moveq	r0, #16
 8003202:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8003204:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003206:	3201      	adds	r2, #1
 8003208:	2a02      	cmp	r2, #2
 800320a:	f103 0310 	add.w	r3, r3, #16
 800320e:	d1e2      	bne.n	80031d6 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003210:	b10d      	cbz	r5, 8003216 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003212:	2000      	movs	r0, #0
 8003214:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003216:	2902      	cmp	r1, #2
 8003218:	bf0c      	ite	eq
 800321a:	2000      	moveq	r0, #0
 800321c:	2012      	movne	r0, #18
 800321e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003220:	2010      	movs	r0, #16
 8003222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003224:	20000200 	.word	0x20000200

08003228 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003228:	4a1c      	ldr	r2, [pc, #112]	; (800329c <inc_lock+0x74>)
 800322a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800322c:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800322e:	2300      	movs	r3, #0
 8003230:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8003232:	6814      	ldr	r4, [r2, #0]
 8003234:	42ac      	cmp	r4, r5
 8003236:	d107      	bne.n	8003248 <inc_lock+0x20>
 8003238:	6857      	ldr	r7, [r2, #4]
 800323a:	6884      	ldr	r4, [r0, #8]
 800323c:	42a7      	cmp	r7, r4
 800323e:	d103      	bne.n	8003248 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8003240:	6897      	ldr	r7, [r2, #8]
 8003242:	6944      	ldr	r4, [r0, #20]
 8003244:	42a7      	cmp	r7, r4
 8003246:	d01d      	beq.n	8003284 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003248:	3301      	adds	r3, #1
 800324a:	2b02      	cmp	r3, #2
 800324c:	f102 0210 	add.w	r2, r2, #16
 8003250:	d1ef      	bne.n	8003232 <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003252:	6833      	ldr	r3, [r6, #0]
 8003254:	b113      	cbz	r3, 800325c <inc_lock+0x34>
 8003256:	6933      	ldr	r3, [r6, #16]
 8003258:	b9eb      	cbnz	r3, 8003296 <inc_lock+0x6e>
 800325a:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 800325c:	011c      	lsls	r4, r3, #4
 800325e:	1932      	adds	r2, r6, r4
 8003260:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8003262:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8003264:	6940      	ldr	r0, [r0, #20]
 8003266:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8003268:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 800326a:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 800326c:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800326e:	b979      	cbnz	r1, 8003290 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003270:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8003274:	8992      	ldrh	r2, [r2, #12]
 8003276:	3201      	adds	r2, #1
 8003278:	b292      	uxth	r2, r2
 800327a:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 800327e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003280:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8003282:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003284:	2900      	cmp	r1, #0
 8003286:	d0f3      	beq.n	8003270 <inc_lock+0x48>
 8003288:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 800328c:	8992      	ldrh	r2, [r2, #12]
 800328e:	b912      	cbnz	r2, 8003296 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003294:	e7f1      	b.n	800327a <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003296:	2000      	movs	r0, #0
 8003298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329a:	bf00      	nop
 800329c:	20000200 	.word	0x20000200

080032a0 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80032a0:	3801      	subs	r0, #1
 80032a2:	2801      	cmp	r0, #1
 80032a4:	d80e      	bhi.n	80032c4 <dec_lock+0x24>
		n = Files[i].ctr;
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <dec_lock+0x2c>)
 80032a8:	0103      	lsls	r3, r0, #4
 80032aa:	18d1      	adds	r1, r2, r3
 80032ac:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 80032ae:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80032b2:	b280      	uxth	r0, r0
 80032b4:	b108      	cbz	r0, 80032ba <dec_lock+0x1a>
 80032b6:	1e48      	subs	r0, r1, #1
 80032b8:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 80032ba:	18d1      	adds	r1, r2, r3
 80032bc:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80032be:	b918      	cbnz	r0, 80032c8 <dec_lock+0x28>
 80032c0:	50d0      	str	r0, [r2, r3]
 80032c2:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80032c4:	2002      	movs	r0, #2
 80032c6:	4770      	bx	lr
		res = FR_OK;
 80032c8:	2000      	movs	r0, #0
	}
	return res;
}
 80032ca:	4770      	bx	lr
 80032cc:	20000200 	.word	0x20000200

080032d0 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80032d0:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 80032d2:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80032d4:	3b02      	subs	r3, #2
 80032d6:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80032d8:	bf3d      	ittte	cc
 80032da:	8943      	ldrhcc	r3, [r0, #10]
 80032dc:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 80032de:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80032e2:	2000      	movcs	r0, #0
}
 80032e4:	4770      	bx	lr

080032e6 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80032e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80032e8:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80032ea:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80032ec:	0a49      	lsrs	r1, r1, #9
 80032ee:	8952      	ldrh	r2, [r2, #10]
 80032f0:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80032f4:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80032f6:	b130      	cbz	r0, 8003306 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 80032f8:	4281      	cmp	r1, r0
 80032fa:	d302      	bcc.n	8003302 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 80032fc:	1a09      	subs	r1, r1, r0
 80032fe:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003300:	e7f8      	b.n	80032f4 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8003302:	6858      	ldr	r0, [r3, #4]
 8003304:	4408      	add	r0, r1
}
 8003306:	4770      	bx	lr

08003308 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003308:	6802      	ldr	r2, [r0, #0]
{
 800330a:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800330c:	b152      	cbz	r2, 8003324 <get_ldnumber+0x1c>
 800330e:	4611      	mov	r1, r2
 8003310:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003316:	2c20      	cmp	r4, #32
 8003318:	d90c      	bls.n	8003334 <get_ldnumber+0x2c>
 800331a:	2c3a      	cmp	r4, #58	; 0x3a
 800331c:	d1f8      	bne.n	8003310 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800331e:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003320:	428b      	cmp	r3, r1
 8003322:	d002      	beq.n	800332a <get_ldnumber+0x22>
	int vol = -1;
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8003328:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	2a30      	cmp	r2, #48	; 0x30
 800332e:	d1f9      	bne.n	8003324 <get_ldnumber+0x1c>
					*path = ++tt;
 8003330:	3301      	adds	r3, #1
 8003332:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8003334:	2000      	movs	r0, #0
 8003336:	bd10      	pop	{r4, pc}

08003338 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800333c:	4604      	mov	r4, r0
 800333e:	b918      	cbnz	r0, 8003348 <validate+0x10>
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
 8003340:	2009      	movs	r0, #9
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003342:	2300      	movs	r3, #0
 8003344:	602b      	str	r3, [r5, #0]
	return res;
}
 8003346:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003348:	6803      	ldr	r3, [r0, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f8      	beq.n	8003340 <validate+0x8>
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	2a00      	cmp	r2, #0
 8003352:	d0f5      	beq.n	8003340 <validate+0x8>
 8003354:	8881      	ldrh	r1, [r0, #4]
 8003356:	88da      	ldrh	r2, [r3, #6]
 8003358:	4291      	cmp	r1, r2
 800335a:	d1f1      	bne.n	8003340 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800335c:	7858      	ldrb	r0, [r3, #1]
 800335e:	f7ff fedb 	bl	8003118 <disk_status>
 8003362:	f010 0001 	ands.w	r0, r0, #1
 8003366:	d1eb      	bne.n	8003340 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	e7eb      	b.n	8003344 <validate+0xc>

0800336c <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800336c:	3801      	subs	r0, #1
 800336e:	440a      	add	r2, r1
			*d++ = *s++;
 8003370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003374:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8003378:	4291      	cmp	r1, r2
 800337a:	d1f9      	bne.n	8003370 <mem_cpy.part.0+0x4>
}
 800337c:	4770      	bx	lr

0800337e <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 800337e:	7eca      	ldrb	r2, [r1, #27]
 8003380:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8003382:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8003384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8003388:	bf01      	itttt	eq
 800338a:	7d48      	ldrbeq	r0, [r1, #21]
 800338c:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800338e:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8003392:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8003396:	4618      	mov	r0, r3
 8003398:	4770      	bx	lr

0800339a <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800339a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800339e:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 80033a0:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 80033a2:	7803      	ldrb	r3, [r0, #0]
 80033a4:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80033a6:	bf01      	itttt	eq
 80033a8:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80033aa:	750a      	strbeq	r2, [r1, #20]
 80033ac:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 80033ae:	754a      	strbeq	r2, [r1, #21]
 80033b0:	4770      	bx	lr

080033b2 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80033b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 80033b4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80033b6:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80033ba:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80033bc:	2301      	movs	r3, #1
 80033be:	462a      	mov	r2, r5
 80033c0:	4639      	mov	r1, r7
 80033c2:	7840      	ldrb	r0, [r0, #1]
 80033c4:	f7ff fed0 	bl	8003168 <disk_write>
 80033c8:	b9a0      	cbnz	r0, 80033f4 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80033ca:	6a23      	ldr	r3, [r4, #32]
 80033cc:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 80033ce:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80033d0:	1aeb      	subs	r3, r5, r3
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d301      	bcc.n	80033da <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 80033d6:	2000      	movs	r0, #0
 80033d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80033da:	78a6      	ldrb	r6, [r4, #2]
 80033dc:	2e01      	cmp	r6, #1
 80033de:	d9fa      	bls.n	80033d6 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 80033e0:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 80033e2:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80033e4:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80033e6:	462a      	mov	r2, r5
 80033e8:	2301      	movs	r3, #1
 80033ea:	4639      	mov	r1, r7
 80033ec:	f7ff febc 	bl	8003168 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80033f0:	3e01      	subs	r6, #1
 80033f2:	e7f3      	b.n	80033dc <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 80033f4:	2001      	movs	r0, #1
}
 80033f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033f8 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80033f8:	78c3      	ldrb	r3, [r0, #3]
 80033fa:	b10b      	cbz	r3, 8003400 <sync_window+0x8>
 80033fc:	f7ff bfd9 	b.w	80033b2 <sync_window.part.4>
}
 8003400:	4618      	mov	r0, r3
 8003402:	4770      	bx	lr

08003404 <sync_fs>:
{
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	4604      	mov	r4, r0
	res = sync_window(fs);
 8003408:	f7ff fff6 	bl	80033f8 <sync_window>
 800340c:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800340e:	2800      	cmp	r0, #0
 8003410:	d142      	bne.n	8003498 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003412:	7823      	ldrb	r3, [r4, #0]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d137      	bne.n	8003488 <sync_fs+0x84>
 8003418:	7927      	ldrb	r7, [r4, #4]
 800341a:	2f01      	cmp	r7, #1
 800341c:	d134      	bne.n	8003488 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 800341e:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003422:	4601      	mov	r1, r0
 8003424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003428:	4630      	mov	r0, r6
 800342a:	f7ff fec9 	bl	80031c0 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800342e:	2355      	movs	r3, #85	; 0x55
 8003430:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 8003434:	23aa      	movs	r3, #170	; 0xaa
 8003436:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 800343a:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 800343c:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800343e:	2172      	movs	r1, #114	; 0x72
 8003440:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8003444:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8003448:	2361      	movs	r3, #97	; 0x61
 800344a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 800344e:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8003452:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
 8003456:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 800345a:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 800345e:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003462:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8003466:	6921      	ldr	r1, [r4, #16]
 8003468:	f7ff fea2 	bl	80031b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800346c:	68e1      	ldr	r1, [r4, #12]
 800346e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003472:	f7ff fe9d 	bl	80031b0 <st_dword>
			fs->winsect = fs->volbase + 1;
 8003476:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003478:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800347a:	3201      	adds	r2, #1
 800347c:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800347e:	463b      	mov	r3, r7
 8003480:	4631      	mov	r1, r6
 8003482:	f7ff fe71 	bl	8003168 <disk_write>
			fs->fsi_flag = 0;
 8003486:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003488:	2200      	movs	r2, #0
 800348a:	4611      	mov	r1, r2
 800348c:	7860      	ldrb	r0, [r4, #1]
 800348e:	f7ff fe79 	bl	8003184 <disk_ioctl>
 8003492:	3000      	adds	r0, #0
 8003494:	bf18      	it	ne
 8003496:	2001      	movne	r0, #1
}
 8003498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800349a <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800349a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800349c:	428b      	cmp	r3, r1
{
 800349e:	b570      	push	{r4, r5, r6, lr}
 80034a0:	4606      	mov	r6, r0
 80034a2:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80034a4:	d012      	beq.n	80034cc <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 80034a6:	f7ff ffa7 	bl	80033f8 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80034aa:	4604      	mov	r4, r0
 80034ac:	b960      	cbnz	r0, 80034c8 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80034ae:	462a      	mov	r2, r5
 80034b0:	2301      	movs	r3, #1
 80034b2:	f106 0130 	add.w	r1, r6, #48	; 0x30
 80034b6:	7870      	ldrb	r0, [r6, #1]
 80034b8:	f7ff fe48 	bl	800314c <disk_read>
 80034bc:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80034be:	bf1c      	itt	ne
 80034c0:	f04f 35ff 	movne.w	r5, #4294967295
 80034c4:	2401      	movne	r4, #1
			fs->winsect = sector;
 80034c6:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 80034c8:	4620      	mov	r0, r4
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80034cc:	2400      	movs	r4, #0
 80034ce:	e7fb      	b.n	80034c8 <move_window+0x2e>

080034d0 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80034d0:	2300      	movs	r3, #0
{
 80034d2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80034d4:	70c3      	strb	r3, [r0, #3]
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 80034dc:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80034de:	f7ff ffdc 	bl	800349a <move_window>
 80034e2:	bb30      	cbnz	r0, 8003532 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 80034e4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80034e8:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80034ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80034f0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d11e      	bne.n	8003536 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80034f8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80034fc:	2be9      	cmp	r3, #233	; 0xe9
 80034fe:	d005      	beq.n	800350c <check_fs+0x3c>
 8003500:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003502:	4a10      	ldr	r2, [pc, #64]	; (8003544 <check_fs+0x74>)
 8003504:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8003508:	4293      	cmp	r3, r2
 800350a:	d116      	bne.n	800353a <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800350c:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8003510:	f7ff fe46 	bl	80031a0 <ld_dword>
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <check_fs+0x78>)
 8003516:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800351a:	4298      	cmp	r0, r3
 800351c:	d00f      	beq.n	800353e <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800351e:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8003522:	f7ff fe3d 	bl	80031a0 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <check_fs+0x7c>)
 8003528:	4298      	cmp	r0, r3
 800352a:	bf14      	ite	ne
 800352c:	2002      	movne	r0, #2
 800352e:	2000      	moveq	r0, #0
 8003530:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003532:	2004      	movs	r0, #4
 8003534:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003536:	2003      	movs	r0, #3
 8003538:	bd10      	pop	{r4, pc}
	return 2;
 800353a:	2002      	movs	r0, #2
 800353c:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800353e:	2000      	movs	r0, #0
}
 8003540:	bd10      	pop	{r4, pc}
 8003542:	bf00      	nop
 8003544:	009000eb 	.word	0x009000eb
 8003548:	00544146 	.word	0x00544146
 800354c:	33544146 	.word	0x33544146

08003550 <find_volume>:
{
 8003550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 8003554:	2300      	movs	r3, #0
{
 8003556:	b085      	sub	sp, #20
	*rfs = 0;
 8003558:	600b      	str	r3, [r1, #0]
{
 800355a:	460f      	mov	r7, r1
 800355c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800355e:	f7ff fed3 	bl	8003308 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003562:	1e06      	subs	r6, r0, #0
 8003564:	f2c0 8140 	blt.w	80037e8 <find_volume+0x298>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003568:	4ba3      	ldr	r3, [pc, #652]	; (80037f8 <find_volume+0x2a8>)
 800356a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800356e:	2c00      	cmp	r4, #0
 8003570:	f000 813c 	beq.w	80037ec <find_volume+0x29c>
	*rfs = fs;							/* Return pointer to the file system object */
 8003574:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003576:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003578:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800357c:	b173      	cbz	r3, 800359c <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800357e:	7860      	ldrb	r0, [r4, #1]
 8003580:	f7ff fdca 	bl	8003118 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003584:	07c1      	lsls	r1, r0, #31
 8003586:	d409      	bmi.n	800359c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003588:	2d00      	cmp	r5, #0
 800358a:	f000 8131 	beq.w	80037f0 <find_volume+0x2a0>
 800358e:	f010 0004 	ands.w	r0, r0, #4
 8003592:	d000      	beq.n	8003596 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8003594:	200a      	movs	r0, #10
}
 8003596:	b005      	add	sp, #20
 8003598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800359c:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800359e:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80035a0:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80035a2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80035a4:	f7ff fdc2 	bl	800312c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80035a8:	07c2      	lsls	r2, r0, #31
 80035aa:	f100 8123 	bmi.w	80037f4 <find_volume+0x2a4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80035ae:	b10d      	cbz	r5, 80035b4 <find_volume+0x64>
 80035b0:	0743      	lsls	r3, r0, #29
 80035b2:	d4ef      	bmi.n	8003594 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80035b4:	2100      	movs	r1, #0
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7ff ff8a 	bl	80034d0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80035bc:	2802      	cmp	r0, #2
 80035be:	f040 80f7 	bne.w	80037b0 <find_volume+0x260>
 80035c2:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 80035c6:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80035c8:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80035cc:	b110      	cbz	r0, 80035d4 <find_volume+0x84>
 80035ce:	4628      	mov	r0, r5
 80035d0:	f7ff fde6 	bl	80031a0 <ld_dword>
 80035d4:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80035d8:	3101      	adds	r1, #1
 80035da:	2904      	cmp	r1, #4
 80035dc:	f105 0510 	add.w	r5, r5, #16
 80035e0:	d1f2      	bne.n	80035c8 <find_volume+0x78>
 80035e2:	2500      	movs	r5, #0
			bsect = br[i];
 80035e4:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80035e8:	2e00      	cmp	r6, #0
 80035ea:	f000 80d8 	beq.w	800379e <find_volume+0x24e>
 80035ee:	4631      	mov	r1, r6
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7ff ff6d 	bl	80034d0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80035f6:	2801      	cmp	r0, #1
 80035f8:	f200 80d2 	bhi.w	80037a0 <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 80035fc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8003600:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8003604:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360c:	f040 80d4 	bne.w	80037b8 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8003610:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8003614:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003618:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 800361c:	d104      	bne.n	8003628 <find_volume+0xd8>
 800361e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8003622:	f7ff fdbd 	bl	80031a0 <ld_dword>
 8003626:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003628:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
		fs->fsize = fasize;
 800362c:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800362e:	f109 33ff 	add.w	r3, r9, #4294967295
 8003632:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003634:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003638:	f200 80be 	bhi.w	80037b8 <find_volume+0x268>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800363c:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 8003640:	b2bb      	uxth	r3, r7
 8003642:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80b7 	beq.w	80037b8 <find_volume+0x268>
 800364a:	1e7b      	subs	r3, r7, #1
 800364c:	423b      	tst	r3, r7
 800364e:	f040 80b3 	bne.w	80037b8 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8003652:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003656:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 800365a:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800365e:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003662:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003666:	f040 80a7 	bne.w	80037b8 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 800366a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 800366e:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003672:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8003676:	d103      	bne.n	8003680 <find_volume+0x130>
 8003678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800367c:	f7ff fd90 	bl	80031a0 <ld_dword>
	rv = rv << 8 | ptr[0];
 8003680:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8003684:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003688:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 800368c:	f000 8094 	beq.w	80037b8 <find_volume+0x268>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003690:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003694:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 8003698:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800369a:	4570      	cmp	r0, lr
 800369c:	f0c0 808c 	bcc.w	80037b8 <find_volume+0x268>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80036a0:	eba0 010e 	sub.w	r1, r0, lr
 80036a4:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80036a8:	2900      	cmp	r1, #0
 80036aa:	f000 8085 	beq.w	80037b8 <find_volume+0x268>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80036ae:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80036b2:	4281      	cmp	r1, r0
 80036b4:	f200 8084 	bhi.w	80037c0 <find_volume+0x270>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80036b8:	f640 77f5 	movw	r7, #4085	; 0xff5
 80036bc:	42b9      	cmp	r1, r7
 80036be:	bf8c      	ite	hi
 80036c0:	2702      	movhi	r7, #2
 80036c2:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80036c4:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80036c6:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 80036c8:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 80036cc:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80036ce:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80036d0:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80036d2:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80036d4:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80036d6:	d175      	bne.n	80037c4 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 80036d8:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 80036dc:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80036e0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80036e4:	d168      	bne.n	80037b8 <find_volume+0x268>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80036e6:	f1b8 0f00 	cmp.w	r8, #0
 80036ea:	d165      	bne.n	80037b8 <find_volume+0x268>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80036ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036f0:	f7ff fd56 	bl	80031a0 <ld_dword>
 80036f4:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80036f6:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80036f8:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 80036fc:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8003700:	d35a      	bcc.n	80037b8 <find_volume+0x268>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	6123      	str	r3, [r4, #16]
 8003708:	60e3      	str	r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800370a:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 800370c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003710:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003712:	d12f      	bne.n	8003774 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 8003714:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8003718:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800371c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d127      	bne.n	8003774 <find_volume+0x224>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003724:	1c71      	adds	r1, r6, #1
 8003726:	4620      	mov	r0, r4
 8003728:	f7ff feb7 	bl	800349a <move_window>
 800372c:	bb10      	cbnz	r0, 8003774 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 800372e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8003732:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 8003736:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8003738:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800373c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003740:	4293      	cmp	r3, r2
 8003742:	d117      	bne.n	8003774 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003744:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003748:	f7ff fd2a 	bl	80031a0 <ld_dword>
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <find_volume+0x2ac>)
 800374e:	4298      	cmp	r0, r3
 8003750:	d110      	bne.n	8003774 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003752:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8003756:	f7ff fd23 	bl	80031a0 <ld_dword>
 800375a:	4b29      	ldr	r3, [pc, #164]	; (8003800 <find_volume+0x2b0>)
 800375c:	4298      	cmp	r0, r3
 800375e:	d109      	bne.n	8003774 <find_volume+0x224>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003760:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8003764:	f7ff fd1c 	bl	80031a0 <ld_dword>
 8003768:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800376a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800376e:	f7ff fd17 	bl	80031a0 <ld_dword>
 8003772:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 8003774:	4a23      	ldr	r2, [pc, #140]	; (8003804 <find_volume+0x2b4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8003776:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8003778:	8813      	ldrh	r3, [r2, #0]
 800377a:	3301      	adds	r3, #1
 800377c:	b29b      	uxth	r3, r3
 800377e:	8013      	strh	r3, [r2, #0]
 8003780:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003782:	4b21      	ldr	r3, [pc, #132]	; (8003808 <find_volume+0x2b8>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	4294      	cmp	r4, r2
 8003788:	bf04      	itt	eq
 800378a:	2200      	moveq	r2, #0
 800378c:	601a      	streq	r2, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	4294      	cmp	r4, r2
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f47f aefe 	bne.w	8003596 <find_volume+0x46>
 800379a:	6118      	str	r0, [r3, #16]
 800379c:	e6fb      	b.n	8003596 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800379e:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80037a0:	3501      	adds	r5, #1
 80037a2:	2d04      	cmp	r5, #4
 80037a4:	f47f af1e 	bne.w	80035e4 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80037a8:	2804      	cmp	r0, #4
 80037aa:	d105      	bne.n	80037b8 <find_volume+0x268>
 80037ac:	2001      	movs	r0, #1
 80037ae:	e6f2      	b.n	8003596 <find_volume+0x46>
 80037b0:	2804      	cmp	r0, #4
 80037b2:	d0fb      	beq.n	80037ac <find_volume+0x25c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80037b4:	2801      	cmp	r0, #1
 80037b6:	d901      	bls.n	80037bc <find_volume+0x26c>
 80037b8:	200d      	movs	r0, #13
 80037ba:	e6ec      	b.n	8003596 <find_volume+0x46>
	bsect = 0;
 80037bc:	2600      	movs	r6, #0
 80037be:	e71d      	b.n	80035fc <find_volume+0xac>
		fmt = FS_FAT32;
 80037c0:	2703      	movs	r7, #3
 80037c2:	e77f      	b.n	80036c4 <find_volume+0x174>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80037c4:	f1b8 0f00 	cmp.w	r8, #0
 80037c8:	d0f6      	beq.n	80037b8 <find_volume+0x268>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80037ca:	2f02      	cmp	r7, #2
 80037cc:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80037d0:	bf18      	it	ne
 80037d2:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80037d4:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80037d6:	bf18      	it	ne
 80037d8:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80037dc:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80037de:	bf0c      	ite	eq
 80037e0:	4601      	moveq	r1, r0
 80037e2:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 80037e6:	e787      	b.n	80036f8 <find_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
 80037e8:	200b      	movs	r0, #11
 80037ea:	e6d4      	b.n	8003596 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80037ec:	200c      	movs	r0, #12
 80037ee:	e6d2      	b.n	8003596 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 80037f0:	4628      	mov	r0, r5
 80037f2:	e6d0      	b.n	8003596 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80037f4:	2003      	movs	r0, #3
 80037f6:	e6ce      	b.n	8003596 <find_volume+0x46>
 80037f8:	200001fc 	.word	0x200001fc
 80037fc:	41615252 	.word	0x41615252
 8003800:	61417272 	.word	0x61417272
 8003804:	20000220 	.word	0x20000220
 8003808:	20000200 	.word	0x20000200

0800380c <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800380c:	2901      	cmp	r1, #1
{
 800380e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003812:	4605      	mov	r5, r0
 8003814:	460c      	mov	r4, r1
 8003816:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003818:	d972      	bls.n	8003900 <put_fat+0xf4>
 800381a:	6943      	ldr	r3, [r0, #20]
 800381c:	4299      	cmp	r1, r3
 800381e:	d26f      	bcs.n	8003900 <put_fat+0xf4>
		switch (fs->fs_type) {
 8003820:	7803      	ldrb	r3, [r0, #0]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d03f      	beq.n	80038a6 <put_fat+0x9a>
 8003826:	2b03      	cmp	r3, #3
 8003828:	d050      	beq.n	80038cc <put_fat+0xc0>
 800382a:	2b01      	cmp	r3, #1
 800382c:	d168      	bne.n	8003900 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 800382e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003832:	6a01      	ldr	r1, [r0, #32]
 8003834:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8003838:	f7ff fe2f 	bl	800349a <move_window>
 800383c:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 800383e:	bb38      	cbnz	r0, 8003890 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8003840:	f105 0930 	add.w	r9, r5, #48	; 0x30
 8003844:	f108 0a01 	add.w	sl, r8, #1
 8003848:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800384c:	f014 0401 	ands.w	r4, r4, #1
 8003850:	bf1f      	itttt	ne
 8003852:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8003856:	f003 020f 	andne.w	r2, r3, #15
 800385a:	013b      	lslne	r3, r7, #4
 800385c:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8003860:	bf14      	ite	ne
 8003862:	4313      	orrne	r3, r2
 8003864:	b2fb      	uxtbeq	r3, r7
 8003866:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800386a:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 800386c:	2301      	movs	r3, #1
 800386e:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003870:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8003874:	4628      	mov	r0, r5
 8003876:	f7ff fe10 	bl	800349a <move_window>
			if (res != FR_OK) break;
 800387a:	4606      	mov	r6, r0
 800387c:	b940      	cbnz	r0, 8003890 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 800387e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003882:	b144      	cbz	r4, 8003896 <put_fat+0x8a>
 8003884:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8003888:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800388c:	2301      	movs	r3, #1
 800388e:	70eb      	strb	r3, [r5, #3]
}
 8003890:	4630      	mov	r0, r6
 8003892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003896:	f819 300a 	ldrb.w	r3, [r9, sl]
 800389a:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800389e:	f023 030f 	bic.w	r3, r3, #15
 80038a2:	431f      	orrs	r7, r3
 80038a4:	e7f0      	b.n	8003888 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80038a6:	6a01      	ldr	r1, [r0, #32]
 80038a8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80038ac:	f7ff fdf5 	bl	800349a <move_window>
			if (res != FR_OK) break;
 80038b0:	4606      	mov	r6, r0
 80038b2:	2800      	cmp	r0, #0
 80038b4:	d1ec      	bne.n	8003890 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80038b6:	0064      	lsls	r4, r4, #1
 80038b8:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80038bc:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80038c0:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80038c2:	551f      	strb	r7, [r3, r4]
 80038c4:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 80038c8:	7057      	strb	r7, [r2, #1]
 80038ca:	e7df      	b.n	800388c <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80038cc:	6a01      	ldr	r1, [r0, #32]
 80038ce:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80038d2:	f7ff fde2 	bl	800349a <move_window>
			if (res != FR_OK) break;
 80038d6:	4606      	mov	r6, r0
 80038d8:	2800      	cmp	r0, #0
 80038da:	d1d9      	bne.n	8003890 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80038dc:	00a4      	lsls	r4, r4, #2
 80038de:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80038e2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80038e6:	441c      	add	r4, r3
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff fc59 	bl	80031a0 <ld_dword>
 80038ee:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80038f2:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80038f6:	4339      	orrs	r1, r7
 80038f8:	4620      	mov	r0, r4
 80038fa:	f7ff fc59 	bl	80031b0 <st_dword>
 80038fe:	e7c5      	b.n	800388c <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 8003900:	2602      	movs	r6, #2
 8003902:	e7c5      	b.n	8003890 <put_fat+0x84>

08003904 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003904:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8003906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003908:	4605      	mov	r5, r0
 800390a:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800390c:	d952      	bls.n	80039b4 <get_fat.isra.8+0xb0>
 800390e:	6943      	ldr	r3, [r0, #20]
 8003910:	4299      	cmp	r1, r3
 8003912:	d24f      	bcs.n	80039b4 <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 8003914:	7803      	ldrb	r3, [r0, #0]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d029      	beq.n	800396e <get_fat.isra.8+0x6a>
 800391a:	2b03      	cmp	r3, #3
 800391c:	d038      	beq.n	8003990 <get_fat.isra.8+0x8c>
 800391e:	2b01      	cmp	r3, #1
 8003920:	d148      	bne.n	80039b4 <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8003922:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003926:	6a01      	ldr	r1, [r0, #32]
 8003928:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800392c:	f7ff fdb5 	bl	800349a <move_window>
 8003930:	b110      	cbz	r0, 8003938 <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003932:	f04f 30ff 	mov.w	r0, #4294967295
 8003936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8003938:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800393a:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800393c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8003940:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003942:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8003946:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8003948:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800394c:	f7ff fda5 	bl	800349a <move_window>
 8003950:	2800      	cmp	r0, #0
 8003952:	d1ee      	bne.n	8003932 <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003954:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8003958:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800395a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800395c:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8003960:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003964:	bf4c      	ite	mi
 8003966:	0900      	lsrmi	r0, r0, #4
 8003968:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800396e:	6a01      	ldr	r1, [r0, #32]
 8003970:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003974:	f7ff fd91 	bl	800349a <move_window>
 8003978:	2800      	cmp	r0, #0
 800397a:	d1da      	bne.n	8003932 <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800397c:	0064      	lsls	r4, r4, #1
 800397e:	3530      	adds	r5, #48	; 0x30
 8003980:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8003984:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8003986:	5d28      	ldrb	r0, [r5, r4]
 8003988:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800398a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800398e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003990:	6a01      	ldr	r1, [r0, #32]
 8003992:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003996:	f7ff fd80 	bl	800349a <move_window>
 800399a:	2800      	cmp	r0, #0
 800399c:	d1c9      	bne.n	8003932 <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800399e:	00a4      	lsls	r4, r4, #2
 80039a0:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80039a4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80039a8:	4420      	add	r0, r4
 80039aa:	f7ff fbf9 	bl	80031a0 <ld_dword>
 80039ae:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80039b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 80039b4:	2001      	movs	r0, #1
}
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039b8 <create_chain>:
{
 80039b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039bc:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 80039be:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80039c0:	460f      	mov	r7, r1
 80039c2:	b971      	cbnz	r1, 80039e2 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80039c4:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80039c6:	b1f6      	cbz	r6, 8003a06 <create_chain+0x4e>
 80039c8:	696b      	ldr	r3, [r5, #20]
 80039ca:	429e      	cmp	r6, r3
 80039cc:	bf28      	it	cs
 80039ce:	2601      	movcs	r6, #1
 80039d0:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80039d2:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 80039d4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80039d6:	429c      	cmp	r4, r3
 80039d8:	d318      	bcc.n	8003a0c <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 80039da:	2e01      	cmp	r6, #1
 80039dc:	d815      	bhi.n	8003a0a <create_chain+0x52>
 80039de:	2400      	movs	r4, #0
 80039e0:	e009      	b.n	80039f6 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80039e2:	4628      	mov	r0, r5
 80039e4:	f7ff ff8e 	bl	8003904 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80039e8:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80039ea:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80039ec:	d937      	bls.n	8003a5e <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	d104      	bne.n	80039fc <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80039f2:	f04f 34ff 	mov.w	r4, #4294967295
}
 80039f6:	4620      	mov	r0, r4
 80039f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80039fc:	696b      	ldr	r3, [r5, #20]
 80039fe:	4298      	cmp	r0, r3
 8003a00:	d3f9      	bcc.n	80039f6 <create_chain+0x3e>
 8003a02:	463e      	mov	r6, r7
 8003a04:	e7e4      	b.n	80039d0 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003a06:	2601      	movs	r6, #1
 8003a08:	e7e2      	b.n	80039d0 <create_chain+0x18>
				ncl = 2;
 8003a0a:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	f8d8 0000 	ldr.w	r0, [r8]
 8003a12:	f7ff ff77 	bl	8003904 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8003a16:	b130      	cbz	r0, 8003a26 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003a18:	2801      	cmp	r0, #1
 8003a1a:	d020      	beq.n	8003a5e <create_chain+0xa6>
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d0e8      	beq.n	80039f2 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8003a20:	42b4      	cmp	r4, r6
 8003a22:	d1d6      	bne.n	80039d2 <create_chain+0x1a>
 8003a24:	e7db      	b.n	80039de <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003a26:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f7ff feed 	bl	800380c <put_fat>
		if (res == FR_OK && clst != 0) {
 8003a32:	b990      	cbnz	r0, 8003a5a <create_chain+0xa2>
 8003a34:	b957      	cbnz	r7, 8003a4c <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003a36:	696a      	ldr	r2, [r5, #20]
 8003a38:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 8003a3a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003a3c:	3a02      	subs	r2, #2
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d90f      	bls.n	8003a62 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8003a42:	792b      	ldrb	r3, [r5, #4]
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	712b      	strb	r3, [r5, #4]
 8003a4a:	e7d4      	b.n	80039f6 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	4639      	mov	r1, r7
 8003a50:	4628      	mov	r0, r5
 8003a52:	f7ff fedb 	bl	800380c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d0ed      	beq.n	8003a36 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003a5a:	2801      	cmp	r0, #1
 8003a5c:	d0c9      	beq.n	80039f2 <create_chain+0x3a>
 8003a5e:	2401      	movs	r4, #1
 8003a60:	e7c9      	b.n	80039f6 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003a62:	3b01      	subs	r3, #1
 8003a64:	612b      	str	r3, [r5, #16]
 8003a66:	e7ec      	b.n	8003a42 <create_chain+0x8a>

08003a68 <remove_chain>:
{
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003a6c:	2d01      	cmp	r5, #1
{
 8003a6e:	4607      	mov	r7, r0
 8003a70:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003a72:	d801      	bhi.n	8003a78 <remove_chain+0x10>
 8003a74:	2002      	movs	r0, #2
 8003a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8003a78:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003a7a:	6963      	ldr	r3, [r4, #20]
 8003a7c:	429d      	cmp	r5, r3
 8003a7e:	d2f9      	bcs.n	8003a74 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003a80:	b12a      	cbz	r2, 8003a8e <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003a82:	f04f 32ff 	mov.w	r2, #4294967295
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff fec0 	bl	800380c <put_fat>
		if (res != FR_OK) return res;
 8003a8c:	bb08      	cbnz	r0, 8003ad2 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003a8e:	4629      	mov	r1, r5
 8003a90:	6838      	ldr	r0, [r7, #0]
 8003a92:	f7ff ff37 	bl	8003904 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8003a96:	4606      	mov	r6, r0
 8003a98:	b908      	cbnz	r0, 8003a9e <remove_chain+0x36>
	return FR_OK;
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003a9e:	2801      	cmp	r0, #1
 8003aa0:	d0e8      	beq.n	8003a74 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003aa2:	1c43      	adds	r3, r0, #1
 8003aa4:	d014      	beq.n	8003ad0 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7ff feae 	bl	800380c <put_fat>
			if (res != FR_OK) return res;
 8003ab0:	b978      	cbnz	r0, 8003ad2 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003ab2:	6962      	ldr	r2, [r4, #20]
 8003ab4:	6923      	ldr	r3, [r4, #16]
 8003ab6:	1e91      	subs	r1, r2, #2
 8003ab8:	428b      	cmp	r3, r1
 8003aba:	d205      	bcs.n	8003ac8 <remove_chain+0x60>
			fs->free_clst++;
 8003abc:	3301      	adds	r3, #1
 8003abe:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8003ac0:	7923      	ldrb	r3, [r4, #4]
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003ac8:	4296      	cmp	r6, r2
 8003aca:	4635      	mov	r5, r6
 8003acc:	d3df      	bcc.n	8003a8e <remove_chain+0x26>
 8003ace:	e7e4      	b.n	8003a9a <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003ad0:	2001      	movs	r0, #1
}
 8003ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ad4 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003ad4:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003ad6:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8003ad8:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003ada:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003adc:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8003ade:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003ae0:	b992      	cbnz	r2, 8003b08 <dir_sdi.constprop.11+0x34>
 8003ae2:	7823      	ldrb	r3, [r4, #0]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8003ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003aea:	b973      	cbnz	r3, 8003b0a <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003aec:	8923      	ldrh	r3, [r4, #8]
 8003aee:	b90b      	cbnz	r3, 8003af4 <dir_sdi.constprop.11+0x20>
 8003af0:	2002      	movs	r0, #2
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8003af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003af6:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8003af8:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8003afa:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f7      	beq.n	8003af0 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003b00:	3430      	adds	r4, #48	; 0x30
 8003b02:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003b04:	2000      	movs	r0, #0
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003b08:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003b0a:	8961      	ldrh	r1, [r4, #10]
 8003b0c:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8003b0e:	b961      	cbnz	r1, 8003b2a <dir_sdi.constprop.11+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003b10:	4611      	mov	r1, r2
 8003b12:	6828      	ldr	r0, [r5, #0]
 8003b14:	f7ff fef6 	bl	8003904 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003b18:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003b1a:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003b1c:	d00b      	beq.n	8003b36 <dir_sdi.constprop.11+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003b1e:	2801      	cmp	r0, #1
 8003b20:	d9e6      	bls.n	8003af0 <dir_sdi.constprop.11+0x1c>
 8003b22:	6963      	ldr	r3, [r4, #20]
 8003b24:	4298      	cmp	r0, r3
 8003b26:	d3f3      	bcc.n	8003b10 <dir_sdi.constprop.11+0x3c>
 8003b28:	e7e2      	b.n	8003af0 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff fbcf 	bl	80032d0 <clust2sect>
 8003b32:	61e8      	str	r0, [r5, #28]
 8003b34:	e7e0      	b.n	8003af8 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003b36:	2001      	movs	r0, #1
}
 8003b38:	bd38      	pop	{r3, r4, r5, pc}

08003b3a <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003b3a:	69c3      	ldr	r3, [r0, #28]
{
 8003b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b40:	4605      	mov	r5, r0
 8003b42:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003b44:	b1ab      	cbz	r3, 8003b72 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003b46:	6942      	ldr	r2, [r0, #20]
 8003b48:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003b4c:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8003b50:	d20f      	bcs.n	8003b72 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003b52:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8003b56:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003b58:	f1b9 0f00 	cmp.w	r9, #0
 8003b5c:	d14f      	bne.n	8003bfe <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 8003b5e:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8003b60:	3301      	adds	r3, #1
 8003b62:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8003b64:	b941      	cbnz	r1, 8003b78 <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003b66:	8923      	ldrh	r3, [r4, #8]
 8003b68:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8003b6c:	d847      	bhi.n	8003bfe <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003b72:	2004      	movs	r0, #4
 8003b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003b78:	8963      	ldrh	r3, [r4, #10]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8003b80:	d13d      	bne.n	8003bfe <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003b82:	4620      	mov	r0, r4
 8003b84:	f7ff febe 	bl	8003904 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003b88:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003b8a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003b8c:	d802      	bhi.n	8003b94 <dir_next+0x5a>
 8003b8e:	2002      	movs	r0, #2
 8003b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003b94:	1c42      	adds	r2, r0, #1
 8003b96:	d102      	bne.n	8003b9e <dir_next+0x64>
 8003b98:	2001      	movs	r0, #1
 8003b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003b9e:	6963      	ldr	r3, [r4, #20]
 8003ba0:	4298      	cmp	r0, r3
 8003ba2:	d326      	bcc.n	8003bf2 <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 8003ba4:	2f00      	cmp	r7, #0
 8003ba6:	d0e2      	beq.n	8003b6e <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003ba8:	69a9      	ldr	r1, [r5, #24]
 8003baa:	4628      	mov	r0, r5
 8003bac:	f7ff ff04 	bl	80039b8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d037      	beq.n	8003c26 <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003bb6:	2801      	cmp	r0, #1
 8003bb8:	d0e9      	beq.n	8003b8e <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	d0ec      	beq.n	8003b98 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f7ff fc1a 	bl	80033f8 <sync_window>
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d1e6      	bne.n	8003b98 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003bca:	4601      	mov	r1, r0
 8003bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003bd4:	f7ff faf4 	bl	80031c0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003bd8:	4631      	mov	r1, r6
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7ff fb78 	bl	80032d0 <clust2sect>
						fs->wflag = 1;
 8003be0:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003be4:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003be6:	8963      	ldrh	r3, [r4, #10]
 8003be8:	429f      	cmp	r7, r3
 8003bea:	d310      	bcc.n	8003c0e <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8003bec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003bee:	1bdf      	subs	r7, r3, r7
 8003bf0:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8003bf2:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8003bf4:	4631      	mov	r1, r6
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f7ff fb6a 	bl	80032d0 <clust2sect>
 8003bfc:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003bfe:	3430      	adds	r4, #48	; 0x30
 8003c00:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8003c02:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003c06:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003c08:	2000      	movs	r0, #0
 8003c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8003c0e:	f884 a003 	strb.w	sl, [r4, #3]
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7ff fbcd 	bl	80033b2 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d1bd      	bne.n	8003b98 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003c1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c1e:	3301      	adds	r3, #1
 8003c20:	3701      	adds	r7, #1
 8003c22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c24:	e7df      	b.n	8003be6 <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003c26:	2007      	movs	r0, #7
}
 8003c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003c2c <follow_path>:
{
 8003c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8003c30:	6807      	ldr	r7, [r0, #0]
{
 8003c32:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003c34:	780b      	ldrb	r3, [r1, #0]
 8003c36:	2b2f      	cmp	r3, #47	; 0x2f
 8003c38:	460d      	mov	r5, r1
 8003c3a:	f101 0101 	add.w	r1, r1, #1
 8003c3e:	d0f9      	beq.n	8003c34 <follow_path+0x8>
 8003c40:	2b5c      	cmp	r3, #92	; 0x5c
 8003c42:	d0f7      	beq.n	8003c34 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8003c44:	2300      	movs	r3, #0
 8003c46:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003c48:	782b      	ldrb	r3, [r5, #0]
 8003c4a:	2b1f      	cmp	r3, #31
 8003c4c:	d959      	bls.n	8003d02 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003c4e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8003dac <follow_path+0x180>
	p = *path; sfn = dp->fn;
 8003c52:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8003c56:	220b      	movs	r2, #11
 8003c58:	2120      	movs	r1, #32
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f7ff fab0 	bl	80031c0 <mem_set>
	si = i = 0; ni = 8;
 8003c60:	2200      	movs	r2, #0
 8003c62:	f105 3eff 	add.w	lr, r5, #4294967295
 8003c66:	4611      	mov	r1, r2
 8003c68:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8003c6a:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003c6e:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8003c70:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003c74:	d90b      	bls.n	8003c8e <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003c76:	2b2f      	cmp	r3, #47	; 0x2f
 8003c78:	d14b      	bne.n	8003d12 <follow_path+0xe6>
 8003c7a:	1868      	adds	r0, r5, r1
 8003c7c:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003c7e:	f810 eb01 	ldrb.w	lr, [r0], #1
 8003c82:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8003c86:	d0f9      	beq.n	8003c7c <follow_path+0x50>
 8003c88:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8003c8c:	d0f6      	beq.n	8003c7c <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8003c8e:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	d054      	beq.n	8003d3e <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003c94:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8003c98:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003c9c:	2ae5      	cmp	r2, #229	; 0xe5
 8003c9e:	bf04      	itt	eq
 8003ca0:	2205      	moveq	r2, #5
 8003ca2:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003ca6:	2b21      	cmp	r3, #33	; 0x21
 8003ca8:	bf34      	ite	cc
 8003caa:	2304      	movcc	r3, #4
 8003cac:	2300      	movcs	r3, #0
 8003cae:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f7ff ff0e 	bl	8003ad4 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d145      	bne.n	8003d48 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 8003cbc:	69e1      	ldr	r1, [r4, #28]
 8003cbe:	4648      	mov	r0, r9
 8003cc0:	f7ff fbeb 	bl	800349a <move_window>
		if (res != FR_OK) break;
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d13f      	bne.n	8003d48 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8003cc8:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003cca:	781a      	ldrb	r2, [r3, #0]
 8003ccc:	2a00      	cmp	r2, #0
 8003cce:	d046      	beq.n	8003d5e <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003cd0:	7ada      	ldrb	r2, [r3, #11]
 8003cd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003cd6:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003cd8:	7ada      	ldrb	r2, [r3, #11]
 8003cda:	0711      	lsls	r1, r2, #28
 8003cdc:	d40c      	bmi.n	8003cf8 <follow_path+0xcc>
 8003cde:	f103 0e0b 	add.w	lr, r3, #11
 8003ce2:	4631      	mov	r1, r6
		r = *d++ - *s++;
 8003ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ce8:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8003cec:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8003cee:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 8003cf2:	d027      	beq.n	8003d44 <follow_path+0x118>
 8003cf4:	2a00      	cmp	r2, #0
 8003cf6:	d0f5      	beq.n	8003ce4 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f7ff ff1d 	bl	8003b3a <dir_next>
 8003d00:	e7da      	b.n	8003cb8 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003d08:	4620      	mov	r0, r4
}
 8003d0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8003d0e:	f7ff bee1 	b.w	8003ad4 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003d12:	2b5c      	cmp	r3, #92	; 0x5c
 8003d14:	d0b1      	beq.n	8003c7a <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003d16:	2b2e      	cmp	r3, #46	; 0x2e
 8003d18:	d036      	beq.n	8003d88 <follow_path+0x15c>
 8003d1a:	4290      	cmp	r0, r2
 8003d1c:	d90f      	bls.n	8003d3e <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8003d1e:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003d22:	bf18      	it	ne
 8003d24:	3b80      	subne	r3, #128	; 0x80
 8003d26:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003db0 <follow_path+0x184>
 8003d2a:	bf18      	it	ne
 8003d2c:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8003d30:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8003d34:	f1bc 0f00 	cmp.w	ip, #0
 8003d38:	d02b      	beq.n	8003d92 <follow_path+0x166>
 8003d3a:	4563      	cmp	r3, ip
 8003d3c:	d1f8      	bne.n	8003d30 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003d3e:	2006      	movs	r0, #6
	return res;
 8003d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003d44:	2a00      	cmp	r2, #0
 8003d46:	d1d7      	bne.n	8003cf8 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8003d48:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8003d4c:	b148      	cbz	r0, 8003d62 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003d4e:	2804      	cmp	r0, #4
 8003d50:	d129      	bne.n	8003da6 <follow_path+0x17a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003d52:	f013 0f04 	tst.w	r3, #4
 8003d56:	bf08      	it	eq
 8003d58:	2005      	moveq	r0, #5
 8003d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003d5e:	2004      	movs	r0, #4
 8003d60:	e7f2      	b.n	8003d48 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003d62:	075a      	lsls	r2, r3, #29
 8003d64:	d41f      	bmi.n	8003da6 <follow_path+0x17a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003d66:	79a3      	ldrb	r3, [r4, #6]
 8003d68:	06db      	lsls	r3, r3, #27
 8003d6a:	d50a      	bpl.n	8003d82 <follow_path+0x156>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003d6c:	6963      	ldr	r3, [r4, #20]
 8003d6e:	7838      	ldrb	r0, [r7, #0]
 8003d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d74:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003d78:	4419      	add	r1, r3
 8003d7a:	f7ff fb00 	bl	800337e <ld_clust.isra.1>
 8003d7e:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003d80:	e767      	b.n	8003c52 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003d82:	2005      	movs	r0, #5
 8003d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003d88:	280b      	cmp	r0, #11
 8003d8a:	d0d8      	beq.n	8003d3e <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	200b      	movs	r0, #11
 8003d90:	e76b      	b.n	8003c6a <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003d92:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8003d96:	f1bc 0f19 	cmp.w	ip, #25
 8003d9a:	d801      	bhi.n	8003da0 <follow_path+0x174>
 8003d9c:	3b20      	subs	r3, #32
 8003d9e:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8003da0:	54b3      	strb	r3, [r6, r2]
 8003da2:	3201      	adds	r2, #1
 8003da4:	e761      	b.n	8003c6a <follow_path+0x3e>
}
 8003da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003daa:	bf00      	nop
 8003dac:	08006f80 	.word	0x08006f80
 8003db0:	08006fff 	.word	0x08006fff

08003db4 <dir_register>:
{
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003db8:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8003dba:	f7ff fe8b 	bl	8003ad4 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	bb28      	cbnz	r0, 8003e0e <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8003dc2:	69e9      	ldr	r1, [r5, #28]
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	f7ff fb68 	bl	800349a <move_window>
			if (res != FR_OK) break;
 8003dca:	4604      	mov	r4, r0
 8003dcc:	b9f8      	cbnz	r0, 8003e0e <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003dce:	6a2b      	ldr	r3, [r5, #32]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2be5      	cmp	r3, #229	; 0xe5
 8003dd4:	d114      	bne.n	8003e00 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8003dd6:	69e9      	ldr	r1, [r5, #28]
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f7ff fb5e 	bl	800349a <move_window>
		if (res == FR_OK) {
 8003dde:	4604      	mov	r4, r0
 8003de0:	b960      	cbnz	r0, 8003dfc <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003de2:	4601      	mov	r1, r0
 8003de4:	2220      	movs	r2, #32
 8003de6:	6a28      	ldr	r0, [r5, #32]
 8003de8:	f7ff f9ea 	bl	80031c0 <mem_set>
 8003dec:	220b      	movs	r2, #11
 8003dee:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8003df2:	6a28      	ldr	r0, [r5, #32]
 8003df4:	f7ff faba 	bl	800336c <mem_cpy.part.0>
			fs->wflag = 1;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	70f3      	strb	r3, [r6, #3]
}
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0e8      	beq.n	8003dd6 <dir_register+0x22>
			res = dir_next(dp, 1);
 8003e04:	2101      	movs	r1, #1
 8003e06:	4628      	mov	r0, r5
 8003e08:	f7ff fe97 	bl	8003b3a <dir_next>
 8003e0c:	e7d7      	b.n	8003dbe <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003e0e:	2c04      	cmp	r4, #4
 8003e10:	bf08      	it	eq
 8003e12:	2407      	moveq	r4, #7
 8003e14:	e7f2      	b.n	8003dfc <dir_register+0x48>
	...

08003e18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003e18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003e1a:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003e1c:	a804      	add	r0, sp, #16
{
 8003e1e:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8003e20:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8003e24:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003e26:	f7ff fa6f 	bl	8003308 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003e2a:	1e05      	subs	r5, r0, #0
 8003e2c:	db1f      	blt.n	8003e6e <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003e2e:	4912      	ldr	r1, [pc, #72]	; (8003e78 <f_mount+0x60>)
 8003e30:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8003e34:	b15c      	cbz	r4, 8003e4e <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <f_mount+0x64>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4294      	cmp	r4, r2
 8003e3c:	bf04      	itt	eq
 8003e3e:	2200      	moveq	r2, #0
 8003e40:	601a      	streq	r2, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	2000      	movs	r0, #0
 8003e46:	4294      	cmp	r4, r2
 8003e48:	bf08      	it	eq
 8003e4a:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003e4c:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8003e4e:	9801      	ldr	r0, [sp, #4]
 8003e50:	b108      	cbz	r0, 8003e56 <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8003e52:	2300      	movs	r3, #0
 8003e54:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003e56:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003e5a:	b130      	cbz	r0, 8003e6a <f_mount+0x52>
 8003e5c:	2e01      	cmp	r6, #1
 8003e5e:	d108      	bne.n	8003e72 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003e60:	2200      	movs	r2, #0
 8003e62:	a901      	add	r1, sp, #4
 8003e64:	4668      	mov	r0, sp
 8003e66:	f7ff fb73 	bl	8003550 <find_volume>
	LEAVE_FF(fs, res);
}
 8003e6a:	b004      	add	sp, #16
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8003e6e:	200b      	movs	r0, #11
 8003e70:	e7fb      	b.n	8003e6a <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003e72:	2000      	movs	r0, #0
 8003e74:	e7f9      	b.n	8003e6a <f_mount+0x52>
 8003e76:	bf00      	nop
 8003e78:	200001fc 	.word	0x200001fc
 8003e7c:	20000200 	.word	0x20000200

08003e80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e84:	b090      	sub	sp, #64	; 0x40
 8003e86:	4690      	mov	r8, r2
 8003e88:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	f000 80ce 	beq.w	800402e <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003e92:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8003e96:	462a      	mov	r2, r5
 8003e98:	a903      	add	r1, sp, #12
 8003e9a:	a801      	add	r0, sp, #4
 8003e9c:	f7ff fb58 	bl	8003550 <find_volume>
	if (res == FR_OK) {
 8003ea0:	4607      	mov	r7, r0
 8003ea2:	bb38      	cbnz	r0, 8003ef4 <f_open+0x74>
		dj.obj.fs = fs;
 8003ea4:	ae10      	add	r6, sp, #64	; 0x40
 8003ea6:	9b03      	ldr	r3, [sp, #12]
 8003ea8:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003eac:	9901      	ldr	r1, [sp, #4]
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f7ff febc 	bl	8003c2c <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003eb4:	b958      	cbnz	r0, 8003ece <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003eb6:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	db1e      	blt.n	8003efc <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003ebe:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8003ec2:	bf14      	ite	ne
 8003ec4:	2101      	movne	r1, #1
 8003ec6:	2100      	moveq	r1, #0
 8003ec8:	4630      	mov	r0, r6
 8003eca:	f7ff f97f 	bl	80031cc <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003ece:	f018 0f1c 	tst.w	r8, #28
 8003ed2:	d073      	beq.n	8003fbc <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8003ed4:	b1a0      	cbz	r0, 8003f00 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003ed6:	2804      	cmp	r0, #4
 8003ed8:	d109      	bne.n	8003eee <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003eda:	4b71      	ldr	r3, [pc, #452]	; (80040a0 <f_open+0x220>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	2a00      	cmp	r2, #0
 8003ee0:	f000 80da 	beq.w	8004098 <f_open+0x218>
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80d6 	beq.w	8004098 <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003eec:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003eee:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003ef2:	b170      	cbz	r0, 8003f12 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	6023      	str	r3, [r4, #0]
 8003ef8:	4607      	mov	r7, r0
 8003efa:	e092      	b.n	8004022 <f_open+0x1a2>
				res = FR_INVALID_NAME;
 8003efc:	2006      	movs	r0, #6
 8003efe:	e7e6      	b.n	8003ece <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003f00:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003f04:	f013 0f11 	tst.w	r3, #17
 8003f08:	d163      	bne.n	8003fd2 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003f0a:	f018 0f04 	tst.w	r8, #4
 8003f0e:	f040 80bd 	bne.w	800408c <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003f12:	0728      	lsls	r0, r5, #28
 8003f14:	d53c      	bpl.n	8003f90 <f_open+0x110>
				dw = GET_FATTIME();
 8003f16:	f000 fbd7 	bl	80046c8 <get_fattime>
 8003f1a:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003f1c:	4601      	mov	r1, r0
 8003f1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f20:	300e      	adds	r0, #14
 8003f22:	f7ff f945 	bl	80031b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003f26:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f28:	4611      	mov	r1, r2
 8003f2a:	3016      	adds	r0, #22
 8003f2c:	f7ff f940 	bl	80031b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003f32:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003f36:	2220      	movs	r2, #32
 8003f38:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003f3a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f3e:	f899 0000 	ldrb.w	r0, [r9]
 8003f42:	4651      	mov	r1, sl
 8003f44:	f7ff fa1b 	bl	800337e <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003f4c:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003f4e:	4648      	mov	r0, r9
 8003f50:	f7ff fa23 	bl	800339a <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8003f56:	2200      	movs	r2, #0
 8003f58:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f5a:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8003f5c:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8003f5e:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8003f60:	9b03      	ldr	r3, [sp, #12]
 8003f62:	2101      	movs	r1, #1
 8003f64:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8003f66:	f1b8 0f00 	cmp.w	r8, #0
 8003f6a:	d011      	beq.n	8003f90 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8003f6c:	4641      	mov	r1, r8
 8003f6e:	4630      	mov	r0, r6
						dw = fs->winsect;
 8003f70:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8003f74:	f7ff fd78 	bl	8003a68 <remove_chain>
						if (res == FR_OK) {
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d1bb      	bne.n	8003ef4 <f_open+0x74>
							res = move_window(fs, dw);
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	9803      	ldr	r0, [sp, #12]
 8003f80:	f7ff fa8b 	bl	800349a <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003f84:	9a03      	ldr	r2, [sp, #12]
 8003f86:	f108 33ff 	add.w	r3, r8, #4294967295
 8003f8a:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	d1b1      	bne.n	8003ef4 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003f90:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003f92:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8003f98:	bf48      	it	mi
 8003f9a:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003f9e:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8003fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fa4:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003fa6:	bf14      	ite	ne
 8003fa8:	2101      	movne	r1, #1
 8003faa:	2100      	moveq	r1, #0
 8003fac:	4630      	mov	r0, r6
 8003fae:	f7ff f93b 	bl	8003228 <inc_lock>
 8003fb2:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d13c      	bne.n	8004032 <f_open+0x1b2>
 8003fb8:	2002      	movs	r0, #2
 8003fba:	e79b      	b.n	8003ef4 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d199      	bne.n	8003ef4 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003fc0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003fc4:	06da      	lsls	r2, r3, #27
 8003fc6:	d463      	bmi.n	8004090 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003fc8:	f018 0f02 	tst.w	r8, #2
 8003fcc:	d0e0      	beq.n	8003f90 <f_open+0x110>
 8003fce:	07db      	lsls	r3, r3, #31
 8003fd0:	d5de      	bpl.n	8003f90 <f_open+0x110>
					res = FR_DENIED;
 8003fd2:	2007      	movs	r0, #7
 8003fd4:	e78e      	b.n	8003ef4 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8003fd6:	6820      	ldr	r0, [r4, #0]
 8003fd8:	f7ff fc94 	bl	8003904 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8003fdc:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8003fde:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8003fe0:	d923      	bls.n	800402a <f_open+0x1aa>
 8003fe2:	1c42      	adds	r2, r0, #1
 8003fe4:	4250      	negs	r0, r2
 8003fe6:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003fe8:	eba5 0508 	sub.w	r5, r5, r8
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d049      	beq.n	8004084 <f_open+0x204>
				fp->clust = clst;
 8003ff0:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	f47f af7e 	bne.w	8003ef4 <f_open+0x74>
 8003ff8:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8003ffc:	b18b      	cbz	r3, 8004022 <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003ffe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004002:	4640      	mov	r0, r8
 8004004:	f7ff f964 	bl	80032d0 <clust2sect>
 8004008:	2800      	cmp	r0, #0
 800400a:	d0d5      	beq.n	8003fb8 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800400c:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8004010:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004012:	2301      	movs	r3, #1
 8004014:	4631      	mov	r1, r6
 8004016:	f898 0001 	ldrb.w	r0, [r8, #1]
 800401a:	f7ff f897 	bl	800314c <disk_read>
 800401e:	2800      	cmp	r0, #0
 8004020:	d138      	bne.n	8004094 <f_open+0x214>

	LEAVE_FF(fs, res);
}
 8004022:	4638      	mov	r0, r7
 8004024:	b010      	add	sp, #64	; 0x40
 8004026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 800402a:	2002      	movs	r0, #2
 800402c:	e7dc      	b.n	8003fe8 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 800402e:	2709      	movs	r7, #9
 8004030:	e7f7      	b.n	8004022 <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004032:	9e03      	ldr	r6, [sp, #12]
 8004034:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004038:	7830      	ldrb	r0, [r6, #0]
 800403a:	4641      	mov	r1, r8
 800403c:	f7ff f99f 	bl	800337e <ld_clust.isra.1>
 8004040:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004042:	f108 001c 	add.w	r0, r8, #28
 8004046:	f7ff f8ab 	bl	80031a0 <ld_dword>
			fp->obj.id = fs->id;
 800404a:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800404c:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800404e:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004050:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004054:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8004056:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004058:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 800405a:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800405c:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800405e:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004060:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004066:	4630      	mov	r0, r6
 8004068:	f7ff f8aa 	bl	80031c0 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800406c:	06ab      	lsls	r3, r5, #26
 800406e:	d5d8      	bpl.n	8004022 <f_open+0x1a2>
 8004070:	68e5      	ldr	r5, [r4, #12]
 8004072:	2d00      	cmp	r5, #0
 8004074:	d0d5      	beq.n	8004022 <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004076:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004078:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800407a:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800407e:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004080:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004084:	45a8      	cmp	r8, r5
 8004086:	d3a6      	bcc.n	8003fd6 <f_open+0x156>
 8004088:	2000      	movs	r0, #0
 800408a:	e7b1      	b.n	8003ff0 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800408c:	2008      	movs	r0, #8
 800408e:	e731      	b.n	8003ef4 <f_open+0x74>
					res = FR_NO_FILE;
 8004090:	2004      	movs	r0, #4
 8004092:	e72f      	b.n	8003ef4 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004094:	2001      	movs	r0, #1
 8004096:	e72d      	b.n	8003ef4 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004098:	4630      	mov	r0, r6
 800409a:	f7ff fe8b 	bl	8003db4 <dir_register>
 800409e:	e726      	b.n	8003eee <f_open+0x6e>
 80040a0:	20000200 	.word	0x20000200

080040a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80040a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a8:	469b      	mov	fp, r3
 80040aa:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80040ac:	2300      	movs	r3, #0
{
 80040ae:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 80040b0:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80040b4:	a903      	add	r1, sp, #12
{
 80040b6:	4604      	mov	r4, r0
 80040b8:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80040ba:	f7ff f93d 	bl	8003338 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80040be:	4606      	mov	r6, r0
 80040c0:	bb58      	cbnz	r0, 800411a <f_write+0x76>
 80040c2:	7d66      	ldrb	r6, [r4, #21]
 80040c4:	bb4e      	cbnz	r6, 800411a <f_write+0x76>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80040c6:	7d23      	ldrb	r3, [r4, #20]
 80040c8:	079a      	lsls	r2, r3, #30
 80040ca:	f140 80ae 	bpl.w	800422a <f_write+0x186>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80040ce:	69a3      	ldr	r3, [r4, #24]
 80040d0:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80040d2:	bf28      	it	cs
 80040d4:	43df      	mvncs	r7, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80040d6:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 80040da:	b1d7      	cbz	r7, 8004112 <f_write+0x6e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80040dc:	69a1      	ldr	r1, [r4, #24]
 80040de:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f040 808f 	bne.w	8004206 <f_write+0x162>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	895b      	ldrh	r3, [r3, #10]
 80040ec:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 80040ee:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	d124      	bne.n	8004140 <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80040f6:	b931      	cbnz	r1, 8004106 <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80040f8:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80040fa:	b9a0      	cbnz	r0, 8004126 <f_write+0x82>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80040fc:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80040fe:	4620      	mov	r0, r4
 8004100:	f7ff fc5a 	bl	80039b8 <create_chain>
 8004104:	e004      	b.n	8004110 <f_write+0x6c>
					if (fp->cltbl) {
 8004106:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004108:	b15b      	cbz	r3, 8004122 <f_write+0x7e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800410a:	4620      	mov	r0, r4
 800410c:	f7ff f8eb 	bl	80032e6 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004110:	b948      	cbnz	r0, 8004126 <f_write+0x82>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004112:	7d23      	ldrb	r3, [r4, #20]
 8004114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004118:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 800411a:	4630      	mov	r0, r6
 800411c:	b005      	add	sp, #20
 800411e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004122:	69e1      	ldr	r1, [r4, #28]
 8004124:	e7eb      	b.n	80040fe <f_write+0x5a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004126:	2801      	cmp	r0, #1
 8004128:	d102      	bne.n	8004130 <f_write+0x8c>
 800412a:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800412c:	7566      	strb	r6, [r4, #21]
 800412e:	e7f4      	b.n	800411a <f_write+0x76>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d101      	bne.n	8004138 <f_write+0x94>
 8004134:	2601      	movs	r6, #1
 8004136:	e7f9      	b.n	800412c <f_write+0x88>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004138:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800413a:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800413c:	b903      	cbnz	r3, 8004140 <f_write+0x9c>
 800413e:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004140:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	da0c      	bge.n	8004162 <f_write+0xbe>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004148:	9803      	ldr	r0, [sp, #12]
 800414a:	6a22      	ldr	r2, [r4, #32]
 800414c:	7840      	ldrb	r0, [r0, #1]
 800414e:	2301      	movs	r3, #1
 8004150:	4651      	mov	r1, sl
 8004152:	f7ff f809 	bl	8003168 <disk_write>
 8004156:	2800      	cmp	r0, #0
 8004158:	d1ec      	bne.n	8004134 <f_write+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 800415a:	7d23      	ldrb	r3, [r4, #20]
 800415c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004160:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004162:	9b03      	ldr	r3, [sp, #12]
 8004164:	69e1      	ldr	r1, [r4, #28]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff f8b1 	bl	80032d0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800416e:	2800      	cmp	r0, #0
 8004170:	d0db      	beq.n	800412a <f_write+0x86>
			sect += csect;
 8004172:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004174:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8004176:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800417a:	d032      	beq.n	80041e2 <f_write+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800417c:	9b00      	ldr	r3, [sp, #0]
 800417e:	9a01      	ldr	r2, [sp, #4]
 8004180:	895b      	ldrh	r3, [r3, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004182:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004184:	442a      	add	r2, r5
 8004186:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8004188:	bf88      	it	hi
 800418a:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800418c:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 800418e:	bf88      	it	hi
 8004190:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004192:	462b      	mov	r3, r5
 8004194:	4642      	mov	r2, r8
 8004196:	4649      	mov	r1, r9
 8004198:	f7fe ffe6 	bl	8003168 <disk_write>
 800419c:	2800      	cmp	r0, #0
 800419e:	d1c9      	bne.n	8004134 <f_write+0x90>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80041a0:	6a21      	ldr	r1, [r4, #32]
 80041a2:	eba1 0108 	sub.w	r1, r1, r8
 80041a6:	428d      	cmp	r5, r1
 80041a8:	d90a      	bls.n	80041c0 <f_write+0x11c>
 80041aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ae:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80041b2:	4650      	mov	r0, sl
 80041b4:	f7ff f8da 	bl	800336c <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80041b8:	7d23      	ldrb	r3, [r4, #20]
 80041ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041be:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80041c0:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80041c2:	69a3      	ldr	r3, [r4, #24]
 80041c4:	68e2      	ldr	r2, [r4, #12]
 80041c6:	442b      	add	r3, r5
 80041c8:	61a3      	str	r3, [r4, #24]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	bf2c      	ite	cs
 80041ce:	60e2      	strcs	r2, [r4, #12]
 80041d0:	60e3      	strcc	r3, [r4, #12]
 80041d2:	f8db 3000 	ldr.w	r3, [fp]
 80041d6:	442b      	add	r3, r5
 80041d8:	44a9      	add	r9, r5
 80041da:	f8cb 3000 	str.w	r3, [fp]
 80041de:	1b7f      	subs	r7, r7, r5
 80041e0:	e77b      	b.n	80040da <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80041e2:	6a23      	ldr	r3, [r4, #32]
 80041e4:	4598      	cmp	r8, r3
 80041e6:	d00c      	beq.n	8004202 <f_write+0x15e>
 80041e8:	69a2      	ldr	r2, [r4, #24]
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d208      	bcs.n	8004202 <f_write+0x15e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80041f0:	9800      	ldr	r0, [sp, #0]
 80041f2:	2301      	movs	r3, #1
 80041f4:	4642      	mov	r2, r8
 80041f6:	4651      	mov	r1, sl
 80041f8:	7840      	ldrb	r0, [r0, #1]
 80041fa:	f7fe ffa7 	bl	800314c <disk_read>
				fp->fptr < fp->obj.objsize &&
 80041fe:	2800      	cmp	r0, #0
 8004200:	d198      	bne.n	8004134 <f_write+0x90>
			fp->sect = sect;
 8004202:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004206:	69a0      	ldr	r0, [r4, #24]
 8004208:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800420c:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8004210:	42bd      	cmp	r5, r7
 8004212:	bf28      	it	cs
 8004214:	463d      	movcs	r5, r7
 8004216:	462a      	mov	r2, r5
 8004218:	4649      	mov	r1, r9
 800421a:	4450      	add	r0, sl
 800421c:	f7ff f8a6 	bl	800336c <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8004220:	7d23      	ldrb	r3, [r4, #20]
 8004222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004226:	7523      	strb	r3, [r4, #20]
 8004228:	e7cb      	b.n	80041c2 <f_write+0x11e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800422a:	2607      	movs	r6, #7
 800422c:	e775      	b.n	800411a <f_write+0x76>

0800422e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800422e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004230:	a901      	add	r1, sp, #4
{
 8004232:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004234:	f7ff f880 	bl	8003338 <validate>
	if (res == FR_OK) {
 8004238:	4605      	mov	r5, r0
 800423a:	2800      	cmp	r0, #0
 800423c:	d13a      	bne.n	80042b4 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800423e:	7d23      	ldrb	r3, [r4, #20]
 8004240:	065a      	lsls	r2, r3, #25
 8004242:	d537      	bpl.n	80042b4 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004244:	061b      	lsls	r3, r3, #24
 8004246:	d50c      	bpl.n	8004262 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004248:	9801      	ldr	r0, [sp, #4]
 800424a:	6a22      	ldr	r2, [r4, #32]
 800424c:	7840      	ldrb	r0, [r0, #1]
 800424e:	2301      	movs	r3, #1
 8004250:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004254:	f7fe ff88 	bl	8003168 <disk_write>
 8004258:	bb78      	cbnz	r0, 80042ba <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800425a:	7d23      	ldrb	r3, [r4, #20]
 800425c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004260:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004262:	f000 fa31 	bl	80046c8 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004266:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8004268:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800426a:	9801      	ldr	r0, [sp, #4]
 800426c:	f7ff f915 	bl	800349a <move_window>
				if (res == FR_OK) {
 8004270:	4605      	mov	r5, r0
 8004272:	b9f8      	cbnz	r0, 80042b4 <f_sync+0x86>
					dir = fp->dir_ptr;
 8004274:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004276:	7af3      	ldrb	r3, [r6, #11]
 8004278:	f043 0320 	orr.w	r3, r3, #32
 800427c:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800427e:	68a2      	ldr	r2, [r4, #8]
 8004280:	6820      	ldr	r0, [r4, #0]
 8004282:	4631      	mov	r1, r6
 8004284:	f7ff f889 	bl	800339a <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004288:	68e1      	ldr	r1, [r4, #12]
 800428a:	f106 001c 	add.w	r0, r6, #28
 800428e:	f7fe ff8f 	bl	80031b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004292:	4639      	mov	r1, r7
 8004294:	f106 0016 	add.w	r0, r6, #22
 8004298:	f7fe ff8a 	bl	80031b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 800429c:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800429e:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 80042a0:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80042a2:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 80042a4:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80042a6:	f7ff f8ad 	bl	8003404 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80042aa:	7d23      	ldrb	r3, [r4, #20]
 80042ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80042b0:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80042b2:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80042b4:	4628      	mov	r0, r5
 80042b6:	b003      	add	sp, #12
 80042b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80042ba:	2501      	movs	r5, #1
 80042bc:	e7fa      	b.n	80042b4 <f_sync+0x86>

080042be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80042be:	b513      	push	{r0, r1, r4, lr}
 80042c0:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80042c2:	f7ff ffb4 	bl	800422e <f_sync>
	if (res == FR_OK)
 80042c6:	b948      	cbnz	r0, 80042dc <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80042c8:	a901      	add	r1, sp, #4
 80042ca:	4620      	mov	r0, r4
 80042cc:	f7ff f834 	bl	8003338 <validate>
		if (res == FR_OK) {
 80042d0:	b920      	cbnz	r0, 80042dc <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80042d2:	6920      	ldr	r0, [r4, #16]
 80042d4:	f7fe ffe4 	bl	80032a0 <dec_lock>
			if (res == FR_OK)
 80042d8:	b900      	cbnz	r0, 80042dc <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80042da:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80042dc:	b002      	add	sp, #8
 80042de:	bd10      	pop	{r4, pc}

080042e0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80042e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e4:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80042e6:	a901      	add	r1, sp, #4
{
 80042e8:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80042ea:	f7ff f825 	bl	8003338 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80042ee:	4606      	mov	r6, r0
 80042f0:	b9e0      	cbnz	r0, 800432c <f_lseek+0x4c>
 80042f2:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80042f4:	b9d6      	cbnz	r6, 800432c <f_lseek+0x4c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80042f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d078      	beq.n	80043ee <f_lseek+0x10e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80042fc:	1c6a      	adds	r2, r5, #1
 80042fe:	d139      	bne.n	8004374 <f_lseek+0x94>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->obj.sclust;		/* Origin of the chain */
 8004300:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8004304:	f8d3 b000 	ldr.w	fp, [r3]
 8004308:	1d1f      	adds	r7, r3, #4
 800430a:	2502      	movs	r5, #2
			if (cl) {
 800430c:	f1b8 0f00 	cmp.w	r8, #0
 8004310:	d028      	beq.n	8004364 <f_lseek+0x84>
 8004312:	46c1      	mov	r9, r8
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004314:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 8004318:	4649      	mov	r1, r9
 800431a:	6820      	ldr	r0, [r4, #0]
 800431c:	f7ff faf2 	bl	8003904 <get_fat.isra.8>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8004320:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8004322:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8004326:	d807      	bhi.n	8004338 <f_lseek+0x58>
 8004328:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800432a:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800432c:	4630      	mov	r0, r6
 800432e:	b003      	add	sp, #12
 8004330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004334:	4680      	mov	r8, r0
 8004336:	e7ec      	b.n	8004312 <f_lseek+0x32>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	d101      	bne.n	8004340 <f_lseek+0x60>
 800433c:	2601      	movs	r6, #1
 800433e:	e7f4      	b.n	800432a <f_lseek+0x4a>
					} while (cl == pcl + 1);
 8004340:	f109 0301 	add.w	r3, r9, #1
 8004344:	4298      	cmp	r0, r3
 8004346:	4681      	mov	r9, r0
 8004348:	d0e6      	beq.n	8004318 <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800434a:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800434c:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 800434e:	bf21      	itttt	cs
 8004350:	463b      	movcs	r3, r7
 8004352:	f843 ab08 	strcs.w	sl, [r3], #8
 8004356:	f8c7 8004 	strcs.w	r8, [r7, #4]
 800435a:	461f      	movcs	r7, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800435c:	9b01      	ldr	r3, [sp, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	4298      	cmp	r0, r3
 8004362:	d3e7      	bcc.n	8004334 <f_lseek+0x54>
			*fp->cltbl = ulen;	/* Number of items used */
 8004364:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
 8004366:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8004368:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen) {
 800436a:	f200 80d4 	bhi.w	8004516 <f_lseek+0x236>
				*tbl = 0;		/* Terminate table */
 800436e:	2300      	movs	r3, #0
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	e7db      	b.n	800432c <f_lseek+0x4c>
 8004374:	68e0      	ldr	r0, [r4, #12]
 8004376:	4285      	cmp	r5, r0
 8004378:	bf28      	it	cs
 800437a:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 800437c:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 800437e:	2d00      	cmp	r5, #0
 8004380:	d0d4      	beq.n	800432c <f_lseek+0x4c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8004382:	f105 38ff 	add.w	r8, r5, #4294967295
 8004386:	4641      	mov	r1, r8
 8004388:	4620      	mov	r0, r4
 800438a:	f7fe ffac 	bl	80032e6 <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 800438e:	9f01      	ldr	r7, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 8004390:	61e0      	str	r0, [r4, #28]
 8004392:	4601      	mov	r1, r0
				dsc = clust2sect(fs, fp->clust);
 8004394:	4638      	mov	r0, r7
 8004396:	f7fe ff9b 	bl	80032d0 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800439a:	2800      	cmp	r0, #0
 800439c:	d0c4      	beq.n	8004328 <f_lseek+0x48>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800439e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80043a2:	2d00      	cmp	r5, #0
 80043a4:	d0c2      	beq.n	800432c <f_lseek+0x4c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80043a6:	897d      	ldrh	r5, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80043a8:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80043aa:	3d01      	subs	r5, #1
 80043ac:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 80043b0:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80043b2:	4295      	cmp	r5, r2
 80043b4:	d0ba      	beq.n	800432c <f_lseek+0x4c>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80043b6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f104 0830 	add.w	r8, r4, #48	; 0x30
 80043c0:	da0a      	bge.n	80043d8 <f_lseek+0xf8>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80043c2:	2301      	movs	r3, #1
 80043c4:	4641      	mov	r1, r8
 80043c6:	7878      	ldrb	r0, [r7, #1]
 80043c8:	f7fe fece 	bl	8003168 <disk_write>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d1b5      	bne.n	800433c <f_lseek+0x5c>
						fp->flag &= (BYTE)~FA_DIRTY;
 80043d0:	7d23      	ldrb	r3, [r4, #20]
 80043d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d6:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80043d8:	9801      	ldr	r0, [sp, #4]
 80043da:	2301      	movs	r3, #1
 80043dc:	462a      	mov	r2, r5
 80043de:	4641      	mov	r1, r8
 80043e0:	7840      	ldrb	r0, [r0, #1]
 80043e2:	f7fe feb3 	bl	800314c <disk_read>
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d1a8      	bne.n	800433c <f_lseek+0x5c>
					fp->sect = dsc;
 80043ea:	6225      	str	r5, [r4, #32]
 80043ec:	e79e      	b.n	800432c <f_lseek+0x4c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80043ee:	68e3      	ldr	r3, [r4, #12]
 80043f0:	429d      	cmp	r5, r3
 80043f2:	d904      	bls.n	80043fe <f_lseek+0x11e>
 80043f4:	7d22      	ldrb	r2, [r4, #20]
 80043f6:	f012 0f02 	tst.w	r2, #2
 80043fa:	bf08      	it	eq
 80043fc:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 80043fe:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8004400:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 8004402:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 8004404:	2d00      	cmp	r5, #0
 8004406:	d132      	bne.n	800446e <f_lseek+0x18e>
		fp->fptr = nsect = 0;
 8004408:	462f      	mov	r7, r5
 800440a:	e009      	b.n	8004420 <f_lseek+0x140>
 800440c:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800440e:	68e3      	ldr	r3, [r4, #12]
 8004410:	69a5      	ldr	r5, [r4, #24]
 8004412:	429d      	cmp	r5, r3
			fp->flag |= FA_MODIFIED;
 8004414:	bf81      	itttt	hi
 8004416:	7d23      	ldrbhi	r3, [r4, #20]
			fp->obj.objsize = fp->fptr;
 8004418:	60e5      	strhi	r5, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800441a:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 800441e:	7523      	strbhi	r3, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8004420:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8004424:	2d00      	cmp	r5, #0
 8004426:	d081      	beq.n	800432c <f_lseek+0x4c>
 8004428:	6a22      	ldr	r2, [r4, #32]
 800442a:	42ba      	cmp	r2, r7
 800442c:	f43f af7e 	beq.w	800432c <f_lseek+0x4c>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8004430:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f104 0530 	add.w	r5, r4, #48	; 0x30
 800443a:	da0c      	bge.n	8004456 <f_lseek+0x176>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800443c:	9801      	ldr	r0, [sp, #4]
 800443e:	2301      	movs	r3, #1
 8004440:	4629      	mov	r1, r5
 8004442:	7840      	ldrb	r0, [r0, #1]
 8004444:	f7fe fe90 	bl	8003168 <disk_write>
 8004448:	2800      	cmp	r0, #0
 800444a:	f47f af77 	bne.w	800433c <f_lseek+0x5c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800444e:	7d23      	ldrb	r3, [r4, #20]
 8004450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004454:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004456:	9801      	ldr	r0, [sp, #4]
 8004458:	2301      	movs	r3, #1
 800445a:	463a      	mov	r2, r7
 800445c:	4629      	mov	r1, r5
 800445e:	7840      	ldrb	r0, [r0, #1]
 8004460:	f7fe fe74 	bl	800314c <disk_read>
 8004464:	2800      	cmp	r0, #0
 8004466:	f47f af69 	bne.w	800433c <f_lseek+0x5c>
			fp->sect = nsect;
 800446a:	6227      	str	r7, [r4, #32]
 800446c:	e75e      	b.n	800432c <f_lseek+0x4c>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800446e:	9a01      	ldr	r2, [sp, #4]
 8004470:	8957      	ldrh	r7, [r2, #10]
 8004472:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8004474:	b303      	cbz	r3, 80044b8 <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8004476:	3b01      	subs	r3, #1
 8004478:	1e6a      	subs	r2, r5, #1
 800447a:	fbb3 f1f7 	udiv	r1, r3, r7
 800447e:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8004482:	428a      	cmp	r2, r1
 8004484:	d318      	bcc.n	80044b8 <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8004486:	427a      	negs	r2, r7
 8004488:	4013      	ands	r3, r2
				clst = fp->clust;
 800448a:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800448c:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 800448e:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8004490:	2900      	cmp	r1, #0
 8004492:	d0bb      	beq.n	800440c <f_lseek+0x12c>
				while (ofs > bcs) {						/* Cluster following loop */
 8004494:	42bd      	cmp	r5, r7
 8004496:	d81e      	bhi.n	80044d6 <f_lseek+0x1f6>
				fp->fptr += ofs;
 8004498:	69a3      	ldr	r3, [r4, #24]
 800449a:	442b      	add	r3, r5
 800449c:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800449e:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0b2      	beq.n	800440c <f_lseek+0x12c>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80044a6:	9801      	ldr	r0, [sp, #4]
 80044a8:	f7fe ff12 	bl	80032d0 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80044ac:	2800      	cmp	r0, #0
 80044ae:	f43f af3b 	beq.w	8004328 <f_lseek+0x48>
					nsect += (DWORD)(ofs / SS(fs));
 80044b2:	eb00 2755 	add.w	r7, r0, r5, lsr #9
 80044b6:	e7aa      	b.n	800440e <f_lseek+0x12e>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80044b8:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80044ba:	b951      	cbnz	r1, 80044d2 <f_lseek+0x1f2>
					clst = create_chain(&fp->obj, 0);
 80044bc:	4620      	mov	r0, r4
 80044be:	f7ff fa7b 	bl	80039b8 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80044c2:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 80044c4:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80044c6:	f43f af2f 	beq.w	8004328 <f_lseek+0x48>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80044ca:	3001      	adds	r0, #1
 80044cc:	f43f af36 	beq.w	800433c <f_lseek+0x5c>
					fp->obj.sclust = clst;
 80044d0:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 80044d2:	61e1      	str	r1, [r4, #28]
 80044d4:	e7dc      	b.n	8004490 <f_lseek+0x1b0>
					ofs -= bcs; fp->fptr += bcs;
 80044d6:	69a3      	ldr	r3, [r4, #24]
 80044d8:	443b      	add	r3, r7
 80044da:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80044dc:	7d23      	ldrb	r3, [r4, #20]
 80044de:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 80044e0:	eba5 0507 	sub.w	r5, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80044e4:	d506      	bpl.n	80044f4 <f_lseek+0x214>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80044e6:	4620      	mov	r0, r4
 80044e8:	f7ff fa66 	bl	80039b8 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80044ec:	4601      	mov	r1, r0
 80044ee:	b928      	cbnz	r0, 80044fc <f_lseek+0x21c>
							ofs = 0; break;
 80044f0:	4605      	mov	r5, r0
 80044f2:	e7d1      	b.n	8004498 <f_lseek+0x1b8>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80044f4:	6820      	ldr	r0, [r4, #0]
 80044f6:	f7ff fa05 	bl	8003904 <get_fat.isra.8>
 80044fa:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80044fc:	1c4b      	adds	r3, r1, #1
 80044fe:	f43f af1d 	beq.w	800433c <f_lseek+0x5c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8004502:	2901      	cmp	r1, #1
 8004504:	f67f af10 	bls.w	8004328 <f_lseek+0x48>
 8004508:	9b01      	ldr	r3, [sp, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	4299      	cmp	r1, r3
 800450e:	f4bf af0b 	bcs.w	8004328 <f_lseek+0x48>
					fp->clust = clst;
 8004512:	61e1      	str	r1, [r4, #28]
 8004514:	e7be      	b.n	8004494 <f_lseek+0x1b4>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8004516:	2611      	movs	r6, #17
 8004518:	e708      	b.n	800432c <f_lseek+0x4c>
	...

0800451c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800451c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800451e:	4b0f      	ldr	r3, [pc, #60]	; (800455c <FATFS_LinkDriverEx+0x40>)
 8004520:	7a5d      	ldrb	r5, [r3, #9]
 8004522:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8004526:	b9b5      	cbnz	r5, 8004556 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004528:	7a5d      	ldrb	r5, [r3, #9]
 800452a:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800452c:	7a5d      	ldrb	r5, [r3, #9]
 800452e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004532:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8004534:	7a58      	ldrb	r0, [r3, #9]
 8004536:	4418      	add	r0, r3
 8004538:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800453a:	7a5a      	ldrb	r2, [r3, #9]
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	1c50      	adds	r0, r2, #1
 8004540:	b2c0      	uxtb	r0, r0
 8004542:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8004544:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8004546:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8004548:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800454a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800454c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800454e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004550:	70cc      	strb	r4, [r1, #3]
 8004552:	4620      	mov	r0, r4
 8004554:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8004556:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8004558:	bd30      	pop	{r4, r5, pc}
 800455a:	bf00      	nop
 800455c:	20000224 	.word	0x20000224

08004560 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8004560:	2200      	movs	r2, #0
 8004562:	f7ff bfdb 	b.w	800451c <FATFS_LinkDriverEx>
	...

08004568 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 800456a:	4815      	ldr	r0, [pc, #84]	; (80045c0 <MX_ADC2_Init+0x58>)
 800456c:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <MX_ADC2_Init+0x5c>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800456e:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <MX_ADC2_Init+0x60>)
  hadc2.Instance = ADC2;
 8004570:	6003      	str	r3, [r0, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004572:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004574:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 8004576:	2201      	movs	r2, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004578:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800457a:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800457c:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800457e:	7603      	strb	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004580:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004584:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004586:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004588:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800458a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800458e:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004590:	f7fc fcf2 	bl	8000f78 <HAL_ADC_Init>
 8004594:	b118      	cbz	r0, 800459e <MX_ADC2_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004596:	2152      	movs	r1, #82	; 0x52
 8004598:	480c      	ldr	r0, [pc, #48]	; (80045cc <MX_ADC2_Init+0x64>)
 800459a:	f000 fa3f 	bl	8004a1c <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800459e:	2102      	movs	r1, #2
 80045a0:	2201      	movs	r2, #1
 80045a2:	2300      	movs	r3, #0
 80045a4:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80045a8:	4805      	ldr	r0, [pc, #20]	; (80045c0 <MX_ADC2_Init+0x58>)
 80045aa:	4669      	mov	r1, sp
 80045ac:	f7fc fd8a 	bl	80010c4 <HAL_ADC_ConfigChannel>
 80045b0:	b118      	cbz	r0, 80045ba <MX_ADC2_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 80045b2:	215c      	movs	r1, #92	; 0x5c
 80045b4:	4805      	ldr	r0, [pc, #20]	; (80045cc <MX_ADC2_Init+0x64>)
 80045b6:	f000 fa31 	bl	8004a1c <_Error_Handler>
  }

}
 80045ba:	b005      	add	sp, #20
 80045bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80045c0:	20000244 	.word	0x20000244
 80045c4:	40012100 	.word	0x40012100
 80045c8:	0f000001 	.word	0x0f000001
 80045cc:	0800700f 	.word	0x0800700f

080045d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80045d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC2)
 80045d2:	6802      	ldr	r2, [r0, #0]
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <HAL_ADC_MspInit+0x3c>)
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d114      	bne.n	8004604 <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80045da:	2100      	movs	r1, #0
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <HAL_ADC_MspInit+0x40>)
 80045de:	9100      	str	r1, [sp, #0]
 80045e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA2     ------> ADC2_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e2:	480c      	ldr	r0, [pc, #48]	; (8004614 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80045e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC2_CLK_ENABLE();
 80045ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045f6:	2304      	movs	r3, #4
 80045f8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045fc:	2303      	movs	r3, #3
 80045fe:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004600:	f7fc ff6a 	bl	80014d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8004604:	b007      	add	sp, #28
 8004606:	f85d fb04 	ldr.w	pc, [sp], #4
 800460a:	bf00      	nop
 800460c:	40012100 	.word	0x40012100
 8004610:	40023800 	.word	0x40023800
 8004614:	40020000 	.word	0x40020000

08004618 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8004618:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 800461a:	2001      	movs	r0, #1
 800461c:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8004620:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004624:	4283      	cmp	r3, r0
 8004626:	d10b      	bne.n	8004640 <BSP_SD_Init+0x28>
  sd_state = HAL_SD_Init(&hsd);
 8004628:	4807      	ldr	r0, [pc, #28]	; (8004648 <BSP_SD_Init+0x30>)
 800462a:	f7fd ff7d 	bl	8002528 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800462e:	b938      	cbnz	r0, 8004640 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004634:	4804      	ldr	r0, [pc, #16]	; (8004648 <BSP_SD_Init+0x30>)
 8004636:	f7fd ffa5 	bl	8002584 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 800463a:	3000      	adds	r0, #0
 800463c:	bf18      	it	ne
 800463e:	2001      	movne	r0, #1
}
 8004640:	b003      	add	sp, #12
 8004642:	f85d fb04 	ldr.w	pc, [sp], #4
 8004646:	bf00      	nop
 8004648:	20001410 	.word	0x20001410

0800464c <BSP_SD_ReadBlocks>:
{
 800464c:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	460a      	mov	r2, r1
 8004654:	4601      	mov	r1, r0
 8004656:	4804      	ldr	r0, [pc, #16]	; (8004668 <BSP_SD_ReadBlocks+0x1c>)
 8004658:	f7fd fbcc 	bl	8001df4 <HAL_SD_ReadBlocks>
}
 800465c:	3000      	adds	r0, #0
 800465e:	bf18      	it	ne
 8004660:	2001      	movne	r0, #1
 8004662:	b003      	add	sp, #12
 8004664:	f85d fb04 	ldr.w	pc, [sp], #4
 8004668:	20001410 	.word	0x20001410

0800466c <BSP_SD_WriteBlocks>:
{
 800466c:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	460a      	mov	r2, r1
 8004674:	4601      	mov	r1, r0
 8004676:	4804      	ldr	r0, [pc, #16]	; (8004688 <BSP_SD_WriteBlocks+0x1c>)
 8004678:	f7fd fcce 	bl	8002018 <HAL_SD_WriteBlocks>
}
 800467c:	3000      	adds	r0, #0
 800467e:	bf18      	it	ne
 8004680:	2001      	movne	r0, #1
 8004682:	b003      	add	sp, #12
 8004684:	f85d fb04 	ldr.w	pc, [sp], #4
 8004688:	20001410 	.word	0x20001410

0800468c <BSP_SD_GetCardState>:
{
 800468c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800468e:	4803      	ldr	r0, [pc, #12]	; (800469c <BSP_SD_GetCardState+0x10>)
 8004690:	f7fd fffe 	bl	8002690 <HAL_SD_GetCardState>
}
 8004694:	3804      	subs	r0, #4
 8004696:	bf18      	it	ne
 8004698:	2001      	movne	r0, #1
 800469a:	bd08      	pop	{r3, pc}
 800469c:	20001410 	.word	0x20001410

080046a0 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80046a0:	4601      	mov	r1, r0
 80046a2:	4801      	ldr	r0, [pc, #4]	; (80046a8 <BSP_SD_GetCardInfo+0x8>)
 80046a4:	f7fd bf5b 	b.w	800255e <HAL_SD_GetCardInfo>
 80046a8:	20001410 	.word	0x20001410

080046ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80046ac:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80046ae:	4903      	ldr	r1, [pc, #12]	; (80046bc <MX_FATFS_Init+0x10>)
 80046b0:	4803      	ldr	r0, [pc, #12]	; (80046c0 <MX_FATFS_Init+0x14>)
 80046b2:	f7ff ff55 	bl	8004560 <FATFS_LinkDriver>
 80046b6:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <MX_FATFS_Init+0x18>)
 80046b8:	7018      	strb	r0, [r3, #0]
 80046ba:	bd08      	pop	{r3, pc}
 80046bc:	2000028d 	.word	0x2000028d
 80046c0:	08007044 	.word	0x08007044
 80046c4:	2000028c 	.word	0x2000028c

080046c8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 80046c8:	2000      	movs	r0, #0
 80046ca:	4770      	bx	lr

080046cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046d0:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d2:	4b30      	ldr	r3, [pc, #192]	; (8004794 <MX_GPIO_Init+0xc8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80046d4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800479c <MX_GPIO_Init+0xd0>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80046d8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80047a0 <MX_GPIO_Init+0xd4>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80046dc:	4e2e      	ldr	r6, [pc, #184]	; (8004798 <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046de:	2400      	movs	r4, #0
 80046e0:	9401      	str	r4, [sp, #4]
 80046e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
 80046ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ec:	f002 0201 	and.w	r2, r2, #1
 80046f0:	9201      	str	r2, [sp, #4]
 80046f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046f4:	9402      	str	r4, [sp, #8]
 80046f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f8:	f042 0204 	orr.w	r2, r2, #4
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
 80046fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004700:	f002 0204 	and.w	r2, r2, #4
 8004704:	9202      	str	r2, [sp, #8]
 8004706:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004708:	9403      	str	r4, [sp, #12]
 800470a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470c:	f042 0208 	orr.w	r2, r2, #8
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
 8004712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004714:	f002 0208 	and.w	r2, r2, #8
 8004718:	9203      	str	r2, [sp, #12]
 800471a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800471c:	9404      	str	r4, [sp, #16]
 800471e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004720:	f042 0202 	orr.w	r2, r2, #2
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800472e:	4648      	mov	r0, r9
 8004730:	2201      	movs	r2, #1
 8004732:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004734:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004736:	f7fc ffaf 	bl	8001698 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800473a:	4622      	mov	r2, r4
 800473c:	4640      	mov	r0, r8
 800473e:	2140      	movs	r1, #64	; 0x40
 8004740:	f7fc ffaa 	bl	8001698 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8004744:	2201      	movs	r2, #1
 8004746:	4630      	mov	r0, r6
 8004748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800474c:	f7fc ffa4 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004750:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004752:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004754:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004756:	a905      	add	r1, sp, #20
 8004758:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800475a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800475c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004760:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004762:	f7fc feb9 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004766:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004768:	a905      	add	r1, sp, #20
 800476a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800476c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800476e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004770:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004772:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004774:	f7fc feb0 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004778:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477c:	a905      	add	r1, sp, #20
 800477e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004780:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004782:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004784:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004786:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004788:	f7fc fea6 	bl	80014d8 <HAL_GPIO_Init>

}
 800478c:	b00b      	add	sp, #44	; 0x2c
 800478e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	40020400 	.word	0x40020400
 800479c:	40020000 	.word	0x40020000
 80047a0:	40020800 	.word	0x40020800

080047a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80047a4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80047a6:	480e      	ldr	r0, [pc, #56]	; (80047e0 <MX_I2C1_Init+0x3c>)
  hi2c1.Init.ClockSpeed = 100000;
 80047a8:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <MX_I2C1_Init+0x40>)
 80047aa:	f8df e040 	ldr.w	lr, [pc, #64]	; 80047ec <MX_I2C1_Init+0x48>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 80047b2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047b6:	2300      	movs	r3, #0
 80047b8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80047ba:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047bc:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
  hi2c1.Init.OwnAddress2 = 0;
 80047be:	6183      	str	r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80047c0:	2201      	movs	r2, #1
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047c2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80047c4:	2380      	movs	r3, #128	; 0x80
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80047c6:	6142      	str	r2, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80047c8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047ca:	f7fc ff6b 	bl	80016a4 <HAL_I2C_Init>
 80047ce:	b128      	cbz	r0, 80047dc <MX_I2C1_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 80047d0:	214c      	movs	r1, #76	; 0x4c
 80047d2:	4805      	ldr	r0, [pc, #20]	; (80047e8 <MX_I2C1_Init+0x44>)
  }

}
 80047d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80047d8:	f000 b920 	b.w	8004a1c <_Error_Handler>
 80047dc:	bd08      	pop	{r3, pc}
 80047de:	bf00      	nop
 80047e0:	200006f4 	.word	0x200006f4
 80047e4:	40005400 	.word	0x40005400
 80047e8:	0800701c 	.word	0x0800701c
 80047ec:	000186a0 	.word	0x000186a0

080047f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80047f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80047f2:	6802      	ldr	r2, [r0, #0]
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_I2C_MspInit+0x48>)
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d11a      	bne.n	8004830 <HAL_I2C_MspInit+0x40>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047fa:	23c0      	movs	r3, #192	; 0xc0
 80047fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047fe:	2312      	movs	r3, #18
 8004800:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004802:	2301      	movs	r3, #1
 8004804:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004806:	2303      	movs	r3, #3
 8004808:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800480a:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480c:	eb0d 0103 	add.w	r1, sp, r3
 8004810:	480a      	ldr	r0, [pc, #40]	; (800483c <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004812:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004814:	f7fc fe60 	bl	80014d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004818:	2300      	movs	r3, #0
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	4b08      	ldr	r3, [pc, #32]	; (8004840 <HAL_I2C_MspInit+0x50>)
 800481e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004820:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004830:	b007      	add	sp, #28
 8004832:	f85d fb04 	ldr.w	pc, [sp], #4
 8004836:	bf00      	nop
 8004838:	40005400 	.word	0x40005400
 800483c:	40020400 	.word	0x40020400
 8004840:	40023800 	.word	0x40023800

08004844 <HAL_UART_RxCpltCallback>:

// LORA
//uint16_t message,message_length;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  if(huart == &huart4) {
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_UART_RxCpltCallback+0x28>)
 8004846:	4283      	cmp	r3, r0
 8004848:	d10f      	bne.n	800486a <HAL_UART_RxCpltCallback+0x26>
	if(rxIndex < 512) {
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_UART_RxCpltCallback+0x2c>)
 800484c:	8813      	ldrh	r3, [r2, #0]
 800484e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004852:	d205      	bcs.n	8004860 <HAL_UART_RxCpltCallback+0x1c>
	  rxBuffer[rxIndex] = rxTmp;
 8004854:	4907      	ldr	r1, [pc, #28]	; (8004874 <HAL_UART_RxCpltCallback+0x30>)
 8004856:	7808      	ldrb	r0, [r1, #0]
 8004858:	4907      	ldr	r1, [pc, #28]	; (8004878 <HAL_UART_RxCpltCallback+0x34>)
 800485a:	54c8      	strb	r0, [r1, r3]
	  rxIndex++;
 800485c:	3301      	adds	r3, #1
 800485e:	8013      	strh	r3, [r2, #0]
	}
    HAL_UART_Receive_IT(&huart4, &rxTmp, 1);
 8004860:	2201      	movs	r2, #1
 8004862:	4904      	ldr	r1, [pc, #16]	; (8004874 <HAL_UART_RxCpltCallback+0x30>)
 8004864:	4801      	ldr	r0, [pc, #4]	; (800486c <HAL_UART_RxCpltCallback+0x28>)
 8004866:	f7fe b80d 	b.w	8002884 <HAL_UART_Receive_IT>
 800486a:	4770      	bx	lr
 800486c:	2000152c 	.word	0x2000152c
 8004870:	2000140a 	.word	0x2000140a
 8004874:	20001340 	.word	0x20001340
 8004878:	20001140 	.word	0x20001140

0800487c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800487c:	b510      	push	{r4, lr}
 800487e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004880:	2300      	movs	r3, #0
 8004882:	4a25      	ldr	r2, [pc, #148]	; (8004918 <SystemClock_Config+0x9c>)
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004888:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800488c:	6411      	str	r1, [r2, #64]	; 0x40
 800488e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004890:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004894:	9201      	str	r2, [sp, #4]
 8004896:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004898:	4a20      	ldr	r2, [pc, #128]	; (800491c <SystemClock_Config+0xa0>)
 800489a:	9302      	str	r3, [sp, #8]
 800489c:	6811      	ldr	r1, [r2, #0]
 800489e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80048a2:	6011      	str	r1, [r2, #0]
 80048a4:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80048a6:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048a8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80048ac:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 192;
 80048ae:	23c0      	movs	r3, #192	; 0xc0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048b0:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 192;
 80048b2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048b4:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048b6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048b8:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80048ba:	2307      	movs	r3, #7
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80048bc:	2210      	movs	r2, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048be:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048c0:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80048c2:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048c4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80048c6:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048c8:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80048ca:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048cc:	f7fc ff96 	bl	80017fc <HAL_RCC_OscConfig>
 80048d0:	b100      	cbz	r0, 80048d4 <SystemClock_Config+0x58>
 80048d2:	e7fe      	b.n	80048d2 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048d4:	230f      	movs	r3, #15
 80048d6:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048d8:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80048da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80048de:	2103      	movs	r1, #3
 80048e0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048e2:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80048e4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80048e6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80048e8:	f7fd f95c 	bl	8001ba4 <HAL_RCC_ClockConfig>
 80048ec:	4604      	mov	r4, r0
 80048ee:	b100      	cbz	r0, 80048f2 <SystemClock_Config+0x76>
 80048f0:	e7fe      	b.n	80048f0 <SystemClock_Config+0x74>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80048f2:	f7fd f9f3 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 80048f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80048fe:	f7fc fdb1 	bl	8001464 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004902:	2004      	movs	r0, #4
 8004904:	f7fc fdc4 	bl	8001490 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004908:	4622      	mov	r2, r4
 800490a:	4621      	mov	r1, r4
 800490c:	f04f 30ff 	mov.w	r0, #4294967295
 8004910:	f7fc fd66 	bl	80013e0 <HAL_NVIC_SetPriority>
}
 8004914:	b014      	add	sp, #80	; 0x50
 8004916:	bd10      	pop	{r4, pc}
 8004918:	40023800 	.word	0x40023800
 800491c:	40007000 	.word	0x40007000

08004920 <main>:
{
 8004920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Init();
 8004924:	f7fc fae8 	bl	8000ef8 <HAL_Init>
  SystemClock_Config();
 8004928:	f7ff ffa8 	bl	800487c <SystemClock_Config>
  MX_GPIO_Init();
 800492c:	f7ff fece 	bl	80046cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8004930:	f7ff ff38 	bl	80047a4 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8004934:	f000 f8dc 	bl	8004af0 <MX_SDIO_SD_Init>
  MX_UART4_Init();
 8004938:	f000 f9be 	bl	8004cb8 <MX_UART4_Init>
  MX_FATFS_Init();
 800493c:	f7ff feb6 	bl	80046ac <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8004940:	f000 f9da 	bl	8004cf8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8004944:	f000 f918 	bl	8004b78 <MX_SPI1_Init>
  MX_ADC2_Init();
 8004948:	f7ff fe0e 	bl	8004568 <MX_ADC2_Init>
	HAL_ADCEx_InjectedStart(&hadc2);
 800494c:	4d29      	ldr	r5, [pc, #164]	; (80049f4 <main+0xd4>)
	uint16_t size = sprintf(rxCharBuf, "PHOTORESIST: %d\r\n", photoresistor);
 800494e:	4f2a      	ldr	r7, [pc, #168]	; (80049f8 <main+0xd8>)
	f_mount(&fs, "", 0);
 8004950:	4e2a      	ldr	r6, [pc, #168]	; (80049fc <main+0xdc>)
	HAL_ADCEx_InjectedStart(&hadc2);
 8004952:	4628      	mov	r0, r5
 8004954:	f7fc fc4c 	bl	80011f0 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedPollForConversion(&hadc2, 1000);
 8004958:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800495c:	4628      	mov	r0, r5
 800495e:	f7fc fccf 	bl	8001300 <HAL_ADCEx_InjectedPollForConversion>
	uint32_t photoresistor = HAL_ADCEx_InjectedGetValue(&hadc2, 1);
 8004962:	2101      	movs	r1, #1
 8004964:	4628      	mov	r0, r5
 8004966:	f7fc fd10 	bl	800138a <HAL_ADCEx_InjectedGetValue>
 800496a:	4604      	mov	r4, r0
	HAL_ADCEx_InjectedStop(&hadc2);
 800496c:	4628      	mov	r0, r5
 800496e:	f7fc fc99 	bl	80012a4 <HAL_ADCEx_InjectedStop>
	if(photoresistor >= 2000 && usePhotoresist == 0) {
 8004972:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8004976:	d314      	bcc.n	80049a2 <main+0x82>
 8004978:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <main+0xe0>)
 800497a:	f8d3 8000 	ldr.w	r8, [r3]
 800497e:	f1b8 0f00 	cmp.w	r8, #0
 8004982:	d10e      	bne.n	80049a2 <main+0x82>
		usePhotoresist = 1;
 8004984:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8004986:	2140      	movs	r1, #64	; 0x40
 8004988:	481e      	ldr	r0, [pc, #120]	; (8004a04 <main+0xe4>)
		usePhotoresist = 1;
 800498a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800498c:	f7fc fe84 	bl	8001698 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8004990:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004994:	f7fc fadc 	bl	8000f50 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004998:	4642      	mov	r2, r8
 800499a:	2140      	movs	r1, #64	; 0x40
 800499c:	4819      	ldr	r0, [pc, #100]	; (8004a04 <main+0xe4>)
 800499e:	f7fc fe7b 	bl	8001698 <HAL_GPIO_WritePin>
	uint16_t size = sprintf(rxCharBuf, "PHOTORESIST: %d\r\n", photoresistor);
 80049a2:	4622      	mov	r2, r4
 80049a4:	4918      	ldr	r1, [pc, #96]	; (8004a08 <main+0xe8>)
	f_open(&file, "file.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80049a6:	4c19      	ldr	r4, [pc, #100]	; (8004a0c <main+0xec>)
	uint16_t size = sprintf(rxCharBuf, "PHOTORESIST: %d\r\n", photoresistor);
 80049a8:	4638      	mov	r0, r7
 80049aa:	f000 fee3 	bl	8005774 <siprintf>
	f_mount(&fs, "", 0);
 80049ae:	4631      	mov	r1, r6
	uint16_t size = sprintf(rxCharBuf, "PHOTORESIST: %d\r\n", photoresistor);
 80049b0:	4680      	mov	r8, r0
	f_mount(&fs, "", 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	4816      	ldr	r0, [pc, #88]	; (8004a10 <main+0xf0>)
 80049b6:	f7ff fa2f 	bl	8003e18 <f_mount>
	f_open(&file, "file.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80049ba:	2212      	movs	r2, #18
 80049bc:	4915      	ldr	r1, [pc, #84]	; (8004a14 <main+0xf4>)
 80049be:	4620      	mov	r0, r4
 80049c0:	f7ff fa5e 	bl	8003e80 <f_open>
	f_lseek(&file, f_size(&file));
 80049c4:	68e1      	ldr	r1, [r4, #12]
 80049c6:	4620      	mov	r0, r4
 80049c8:	f7ff fc8a 	bl	80042e0 <f_lseek>
	f_write(&file, rxCharBuf, size, &byteswritten);
 80049cc:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <main+0xf8>)
 80049ce:	fa1f f288 	uxth.w	r2, r8
 80049d2:	4639      	mov	r1, r7
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7ff fb65 	bl	80040a4 <f_write>
	f_close(&file);
 80049da:	4620      	mov	r0, r4
 80049dc:	f7ff fc6f 	bl	80042be <f_close>
	f_mount(NULL, "", 0);
 80049e0:	2200      	movs	r2, #0
 80049e2:	4631      	mov	r1, r6
 80049e4:	4610      	mov	r0, r2
 80049e6:	f7ff fa17 	bl	8003e18 <f_mount>
	HAL_Delay(100);
 80049ea:	2064      	movs	r0, #100	; 0x64
 80049ec:	f7fc fab0 	bl	8000f50 <HAL_Delay>
  {
 80049f0:	e7af      	b.n	8004952 <main+0x32>
 80049f2:	bf00      	nop
 80049f4:	20000244 	.word	0x20000244
 80049f8:	20000e58 	.word	0x20000e58
 80049fc:	0800703a 	.word	0x0800703a
 8004a00:	20000230 	.word	0x20000230
 8004a04:	40020800 	.word	0x40020800
 8004a08:	08007029 	.word	0x08007029
 8004a0c:	20000c28 	.word	0x20000c28
 8004a10:	200009dc 	.word	0x200009dc
 8004a14:	0800703b 	.word	0x0800703b
 8004a18:	20000c0c 	.word	0x20000c0c

08004a1c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004a1c:	e7fe      	b.n	8004a1c <_Error_Handler>
	...

08004a20 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8004a20:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8004a22:	4c06      	ldr	r4, [pc, #24]	; (8004a3c <SD_CheckStatus.isra.0+0x1c>)
 8004a24:	2301      	movs	r3, #1
 8004a26:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004a28:	f7ff fe30 	bl	800468c <BSP_SD_GetCardState>
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	b918      	cbnz	r0, 8004a38 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8004a30:	7822      	ldrb	r2, [r4, #0]
 8004a32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a36:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8004a38:	7818      	ldrb	r0, [r3, #0]
}
 8004a3a:	bd10      	pop	{r4, pc}
 8004a3c:	20000008 	.word	0x20000008

08004a40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004a40:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8004a42:	4c05      	ldr	r4, [pc, #20]	; (8004a58 <SD_initialize+0x18>)
 8004a44:	2301      	movs	r3, #1
 8004a46:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004a48:	f7ff fde6 	bl	8004618 <BSP_SD_Init>
 8004a4c:	b910      	cbnz	r0, 8004a54 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8004a4e:	f7ff ffe7 	bl	8004a20 <SD_CheckStatus.isra.0>
 8004a52:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8004a54:	7820      	ldrb	r0, [r4, #0]
}
 8004a56:	bd10      	pop	{r4, pc}
 8004a58:	20000008 	.word	0x20000008

08004a5c <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8004a5c:	f7ff bfe0 	b.w	8004a20 <SD_CheckStatus.isra.0>

08004a60 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004a60:	b508      	push	{r3, lr}
 8004a62:	4608      	mov	r0, r1
 8004a64:	4611      	mov	r1, r2
 8004a66:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004a68:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6c:	f7ff fdee 	bl	800464c <BSP_SD_ReadBlocks>
 8004a70:	b920      	cbnz	r0, 8004a7c <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004a72:	f7ff fe0b 	bl	800468c <BSP_SD_GetCardState>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d1fb      	bne.n	8004a72 <SD_read+0x12>
 8004a7a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8004a7c:	2001      	movs	r0, #1
}
 8004a7e:	bd08      	pop	{r3, pc}

08004a80 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004a80:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a82:	4b12      	ldr	r3, [pc, #72]	; (8004acc <SD_ioctl+0x4c>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	07db      	lsls	r3, r3, #31
{
 8004a88:	b088      	sub	sp, #32
 8004a8a:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a8c:	d41b      	bmi.n	8004ac6 <SD_ioctl+0x46>

  switch (cmd)
 8004a8e:	2903      	cmp	r1, #3
 8004a90:	d803      	bhi.n	8004a9a <SD_ioctl+0x1a>
 8004a92:	e8df f001 	tbb	[pc, r1]
 8004a96:	0510      	.short	0x0510
 8004a98:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8004a9a:	2004      	movs	r0, #4
  }

  return res;
}
 8004a9c:	b008      	add	sp, #32
 8004a9e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8004aa0:	4668      	mov	r0, sp
 8004aa2:	f7ff fdfd 	bl	80046a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004aa6:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	e004      	b.n	8004ab6 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8004aac:	4668      	mov	r0, sp
 8004aae:	f7ff fdf7 	bl	80046a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004ab2:	9b07      	ldr	r3, [sp, #28]
 8004ab4:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	e7f0      	b.n	8004a9c <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8004aba:	4668      	mov	r0, sp
 8004abc:	f7ff fdf0 	bl	80046a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004ac0:	9b07      	ldr	r3, [sp, #28]
 8004ac2:	0a5b      	lsrs	r3, r3, #9
 8004ac4:	e7f0      	b.n	8004aa8 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004ac6:	2003      	movs	r0, #3
 8004ac8:	e7e8      	b.n	8004a9c <SD_ioctl+0x1c>
 8004aca:	bf00      	nop
 8004acc:	20000008 	.word	0x20000008

08004ad0 <SD_write>:
{
 8004ad0:	b508      	push	{r3, lr}
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	f7ff fdc6 	bl	800466c <BSP_SD_WriteBlocks>
 8004ae0:	b920      	cbnz	r0, 8004aec <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 8004ae2:	f7ff fdd3 	bl	800468c <BSP_SD_GetCardState>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d1fb      	bne.n	8004ae2 <SD_write+0x12>
 8004aea:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8004aec:	2001      	movs	r0, #1
}
 8004aee:	bd08      	pop	{r3, pc}

08004af0 <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <MX_SDIO_SD_Init+0x18>)
 8004af2:	4a06      	ldr	r2, [pc, #24]	; (8004b0c <MX_SDIO_SD_Init+0x1c>)
 8004af4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004af6:	2200      	movs	r2, #0
 8004af8:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004afa:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004afc:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004afe:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b00:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004b02:	619a      	str	r2, [r3, #24]
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20001410 	.word	0x20001410
 8004b0c:	40012c00 	.word	0x40012c00

08004b10 <HAL_SD_MspInit>:

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004b10:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(sdHandle->Instance==SDIO)
 8004b12:	6802      	ldr	r2, [r0, #0]
 8004b14:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <HAL_SD_MspInit+0x5c>)
 8004b16:	429a      	cmp	r2, r3
{
 8004b18:	b087      	sub	sp, #28
  if(sdHandle->Instance==SDIO)
 8004b1a:	d125      	bne.n	8004b68 <HAL_SD_MspInit+0x58>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004b1c:	2400      	movs	r4, #0
 8004b1e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8004b22:	9400      	str	r4, [sp, #0]
 8004b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b26:	4812      	ldr	r0, [pc, #72]	; (8004b70 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b2c:	645a      	str	r2, [r3, #68]	; 0x44
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b30:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b3a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004b3c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b40:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004b42:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b44:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004b46:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b48:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b4a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004b4c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b4e:	f7fc fcc3 	bl	80014d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b52:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b54:	eb0d 0103 	add.w	r1, sp, r3
 8004b58:	4806      	ldr	r0, [pc, #24]	; (8004b74 <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b5a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b5c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b60:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004b62:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b64:	f7fc fcb8 	bl	80014d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8004b68:	b007      	add	sp, #28
 8004b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40020800 	.word	0x40020800
 8004b74:	40020c00 	.word	0x40020c00

08004b78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004b78:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8004b7a:	480f      	ldr	r0, [pc, #60]	; (8004bb8 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <MX_SPI1_Init+0x44>)
 8004b7e:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b82:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b86:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b8e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b90:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b92:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b94:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b96:	6203      	str	r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004b98:	2208      	movs	r2, #8
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b9a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b9c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004b9e:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004ba0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8004ba2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ba4:	f7fd fd88 	bl	80026b8 <HAL_SPI_Init>
 8004ba8:	b128      	cbz	r0, 8004bb6 <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004baa:	214f      	movs	r1, #79	; 0x4f
 8004bac:	4804      	ldr	r0, [pc, #16]	; (8004bc0 <MX_SPI1_Init+0x48>)
  }

}
 8004bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004bb2:	f7ff bf33 	b.w	8004a1c <_Error_Handler>
 8004bb6:	bd08      	pop	{r3, pc}
 8004bb8:	20001494 	.word	0x20001494
 8004bbc:	40013000 	.word	0x40013000
 8004bc0:	08007058 	.word	0x08007058

08004bc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004bc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8004bc6:	6802      	ldr	r2, [r0, #0]
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <HAL_SPI_MspInit+0x44>)
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d119      	bne.n	8004c02 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bce:	2100      	movs	r1, #0
 8004bd0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8004bd4:	9100      	str	r1, [sp, #0]
 8004bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd8:	480c      	ldr	r0, [pc, #48]	; (8004c0c <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bde:	645a      	str	r2, [r3, #68]	; 0x44
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be2:	9103      	str	r1, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004bec:	23e0      	movs	r3, #224	; 0xe0
 8004bee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bfa:	2305      	movs	r3, #5
 8004bfc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfe:	f7fc fc6b 	bl	80014d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004c02:	b007      	add	sp, #28
 8004c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c08:	40013000 	.word	0x40013000
 8004c0c:	40020000 	.word	0x40020000

08004c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c12:	2003      	movs	r0, #3
 8004c14:	f7fc fbd2 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	f06f 000b 	mvn.w	r0, #11
 8004c20:	f7fc fbde 	bl	80013e0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004c24:	2200      	movs	r2, #0
 8004c26:	4611      	mov	r1, r2
 8004c28:	f06f 000a 	mvn.w	r0, #10
 8004c2c:	f7fc fbd8 	bl	80013e0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004c30:	2200      	movs	r2, #0
 8004c32:	4611      	mov	r1, r2
 8004c34:	f06f 0009 	mvn.w	r0, #9
 8004c38:	f7fc fbd2 	bl	80013e0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4611      	mov	r1, r2
 8004c40:	f06f 0004 	mvn.w	r0, #4
 8004c44:	f7fc fbcc 	bl	80013e0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004c48:	2200      	movs	r2, #0
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	f06f 0003 	mvn.w	r0, #3
 8004c50:	f7fc fbc6 	bl	80013e0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004c54:	2200      	movs	r2, #0
 8004c56:	4611      	mov	r1, r2
 8004c58:	f06f 0001 	mvn.w	r0, #1
 8004c5c:	f7fc fbc0 	bl	80013e0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	4611      	mov	r1, r2
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004c6c:	f7fc bbb8 	b.w	80013e0 <HAL_NVIC_SetPriority>

08004c70 <NMI_Handler>:
 8004c70:	4770      	bx	lr

08004c72 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004c72:	e7fe      	b.n	8004c72 <HardFault_Handler>

08004c74 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004c74:	e7fe      	b.n	8004c74 <MemManage_Handler>

08004c76 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004c76:	e7fe      	b.n	8004c76 <BusFault_Handler>

08004c78 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004c78:	e7fe      	b.n	8004c78 <UsageFault_Handler>

08004c7a <SVC_Handler>:
 8004c7a:	4770      	bx	lr

08004c7c <DebugMon_Handler>:
 8004c7c:	4770      	bx	lr

08004c7e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004c7e:	4770      	bx	lr

08004c80 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004c80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c82:	f7fc f953 	bl	8000f2c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8004c8a:	f7fc bc0e 	b.w	80014aa <HAL_SYSTICK_IRQHandler>
	...

08004c90 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004c90:	4801      	ldr	r0, [pc, #4]	; (8004c98 <UART4_IRQHandler+0x8>)
 8004c92:	f7fd be5f 	b.w	8002954 <HAL_UART_IRQHandler>
 8004c96:	bf00      	nop
 8004c98:	2000152c 	.word	0x2000152c

08004c9c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <SystemInit+0x18>)
 8004c9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ca2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	e000ed00 	.word	0xe000ed00

08004cb8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004cb8:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8004cba:	480c      	ldr	r0, [pc, #48]	; (8004cec <MX_UART4_Init+0x34>)
  huart4.Init.BaudRate = 115200;
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <MX_UART4_Init+0x38>)
 8004cbe:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004cc2:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004cc6:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004ccc:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004cce:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004cd0:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cd2:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cd4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004cd6:	f7fd fda7 	bl	8002828 <HAL_UART_Init>
 8004cda:	b128      	cbz	r0, 8004ce8 <MX_UART4_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004cdc:	214c      	movs	r1, #76	; 0x4c
 8004cde:	4805      	ldr	r0, [pc, #20]	; (8004cf4 <MX_UART4_Init+0x3c>)
  }

}
 8004ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004ce4:	f7ff be9a 	b.w	8004a1c <_Error_Handler>
 8004ce8:	bd08      	pop	{r3, pc}
 8004cea:	bf00      	nop
 8004cec:	2000152c 	.word	0x2000152c
 8004cf0:	40004c00 	.word	0x40004c00
 8004cf4:	0800707d 	.word	0x0800707d

08004cf8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004cf8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8004cfa:	480c      	ldr	r0, [pc, #48]	; (8004d2c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <MX_USART1_UART_Init+0x38>)
 8004cfe:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004d02:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d06:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d0c:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d0e:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d10:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d12:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d14:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d16:	f7fd fd87 	bl	8002828 <HAL_UART_Init>
 8004d1a:	b128      	cbz	r0, 8004d28 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004d1c:	215f      	movs	r1, #95	; 0x5f
 8004d1e:	4805      	ldr	r0, [pc, #20]	; (8004d34 <MX_USART1_UART_Init+0x3c>)
  }

}
 8004d20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004d24:	f7ff be7a 	b.w	8004a1c <_Error_Handler>
 8004d28:	bd08      	pop	{r3, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200014ec 	.word	0x200014ec
 8004d30:	40011000 	.word	0x40011000
 8004d34:	0800707d 	.word	0x0800707d

08004d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d38:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8004d3a:	6803      	ldr	r3, [r0, #0]
 8004d3c:	4a22      	ldr	r2, [pc, #136]	; (8004dc8 <HAL_UART_MspInit+0x90>)
 8004d3e:	4293      	cmp	r3, r2
{
 8004d40:	b088      	sub	sp, #32
  if(uartHandle->Instance==UART4)
 8004d42:	d122      	bne.n	8004d8a <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004d44:	2400      	movs	r4, #0
 8004d46:	4b21      	ldr	r3, [pc, #132]	; (8004dcc <HAL_UART_MspInit+0x94>)
 8004d48:	9401      	str	r4, [sp, #4]
 8004d4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4c:	4820      	ldr	r0, [pc, #128]	; (8004dd0 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8004d4e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8004d52:	6419      	str	r1, [r3, #64]	; 0x40
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5e:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d60:	2303      	movs	r3, #3
 8004d62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d64:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d66:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d68:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004d6a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d6e:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004d70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d72:	f7fc fbb1 	bl	80014d8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004d76:	2034      	movs	r0, #52	; 0x34
 8004d78:	4622      	mov	r2, r4
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	f7fc fb30 	bl	80013e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004d80:	2034      	movs	r0, #52	; 0x34
 8004d82:	f7fc fb61 	bl	8001448 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004d86:	b008      	add	sp, #32
 8004d88:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART1)
 8004d8a:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <HAL_UART_MspInit+0x9c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d1fa      	bne.n	8004d86 <HAL_UART_MspInit+0x4e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d90:	2300      	movs	r3, #0
 8004d92:	9302      	str	r3, [sp, #8]
 8004d94:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d96:	480e      	ldr	r0, [pc, #56]	; (8004dd0 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9a:	f042 0210 	orr.w	r2, r2, #16
 8004d9e:	645a      	str	r2, [r3, #68]	; 0x44
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	9302      	str	r3, [sp, #8]
 8004da8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004daa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004dae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db0:	2302      	movs	r3, #2
 8004db2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004db4:	2301      	movs	r3, #1
 8004db6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db8:	2303      	movs	r3, #3
 8004dba:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dbc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004dbe:	2307      	movs	r3, #7
 8004dc0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc2:	f7fc fb89 	bl	80014d8 <HAL_GPIO_Init>
}
 8004dc6:	e7de      	b.n	8004d86 <HAL_UART_MspInit+0x4e>
 8004dc8:	40004c00 	.word	0x40004c00
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	40020000 	.word	0x40020000
 8004dd4:	40011000 	.word	0x40011000

08004dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ddc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004dde:	e003      	b.n	8004de8 <LoopCopyDataInit>

08004de0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004de2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004de4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004de6:	3104      	adds	r1, #4

08004de8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004de8:	480b      	ldr	r0, [pc, #44]	; (8004e18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004dea:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004dec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004dee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004df0:	d3f6      	bcc.n	8004de0 <CopyDataInit>
  ldr  r2, =_sbss
 8004df2:	4a0b      	ldr	r2, [pc, #44]	; (8004e20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004df4:	e002      	b.n	8004dfc <LoopFillZerobss>

08004df6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004df6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004df8:	f842 3b04 	str.w	r3, [r2], #4

08004dfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dfc:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004dfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e00:	d3f9      	bcc.n	8004df6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e02:	f7ff ff4b 	bl	8004c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e06:	f000 f811 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e0a:	f7ff fd89 	bl	8004920 <main>
  bx  lr    
 8004e0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004e14:	080072f8 	.word	0x080072f8
  ldr  r0, =_sdata
 8004e18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e1c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8004e20:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8004e24:	20001570 	.word	0x20001570

08004e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e28:	e7fe      	b.n	8004e28 <ADC_IRQHandler>
	...

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4e0d      	ldr	r6, [pc, #52]	; (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	; (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1ba4      	subs	r4, r4, r6
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2500      	movs	r5, #0
 8004e38:	42a5      	cmp	r5, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4e0b      	ldr	r6, [pc, #44]	; (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	; (8004e70 <__libc_init_array+0x44>)
 8004e40:	f002 f890 	bl	8006f64 <_init>
 8004e44:	1ba4      	subs	r4, r4, r6
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2500      	movs	r5, #0
 8004e4a:	42a5      	cmp	r5, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e54:	4798      	blx	r3
 8004e56:	3501      	adds	r5, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e5e:	4798      	blx	r3
 8004e60:	3501      	adds	r5, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	080072f0 	.word	0x080072f0
 8004e68:	080072f0 	.word	0x080072f0
 8004e6c:	080072f0 	.word	0x080072f0
 8004e70:	080072f4 	.word	0x080072f4

08004e74 <memcpy>:
 8004e74:	b510      	push	{r4, lr}
 8004e76:	1e43      	subs	r3, r0, #1
 8004e78:	440a      	add	r2, r1
 8004e7a:	4291      	cmp	r1, r2
 8004e7c:	d100      	bne.n	8004e80 <memcpy+0xc>
 8004e7e:	bd10      	pop	{r4, pc}
 8004e80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e88:	e7f7      	b.n	8004e7a <memcpy+0x6>

08004e8a <memset>:
 8004e8a:	4402      	add	r2, r0
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d100      	bne.n	8004e94 <memset+0xa>
 8004e92:	4770      	bx	lr
 8004e94:	f803 1b01 	strb.w	r1, [r3], #1
 8004e98:	e7f9      	b.n	8004e8e <memset+0x4>

08004e9a <__cvt>:
 8004e9a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9e:	ec55 4b10 	vmov	r4, r5, d0
 8004ea2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004ea4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ea8:	2d00      	cmp	r5, #0
 8004eaa:	460e      	mov	r6, r1
 8004eac:	4691      	mov	r9, r2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	bfb8      	it	lt
 8004eb2:	4622      	movlt	r2, r4
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	f027 0720 	bic.w	r7, r7, #32
 8004eba:	bfbb      	ittet	lt
 8004ebc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ec0:	461d      	movlt	r5, r3
 8004ec2:	2300      	movge	r3, #0
 8004ec4:	232d      	movlt	r3, #45	; 0x2d
 8004ec6:	bfb8      	it	lt
 8004ec8:	4614      	movlt	r4, r2
 8004eca:	2f46      	cmp	r7, #70	; 0x46
 8004ecc:	700b      	strb	r3, [r1, #0]
 8004ece:	d004      	beq.n	8004eda <__cvt+0x40>
 8004ed0:	2f45      	cmp	r7, #69	; 0x45
 8004ed2:	d100      	bne.n	8004ed6 <__cvt+0x3c>
 8004ed4:	3601      	adds	r6, #1
 8004ed6:	2102      	movs	r1, #2
 8004ed8:	e000      	b.n	8004edc <__cvt+0x42>
 8004eda:	2103      	movs	r1, #3
 8004edc:	ab03      	add	r3, sp, #12
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	ab02      	add	r3, sp, #8
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	4653      	mov	r3, sl
 8004ee8:	ec45 4b10 	vmov	d0, r4, r5
 8004eec:	f000 fcf4 	bl	80058d8 <_dtoa_r>
 8004ef0:	2f47      	cmp	r7, #71	; 0x47
 8004ef2:	4680      	mov	r8, r0
 8004ef4:	d102      	bne.n	8004efc <__cvt+0x62>
 8004ef6:	f019 0f01 	tst.w	r9, #1
 8004efa:	d026      	beq.n	8004f4a <__cvt+0xb0>
 8004efc:	2f46      	cmp	r7, #70	; 0x46
 8004efe:	eb08 0906 	add.w	r9, r8, r6
 8004f02:	d111      	bne.n	8004f28 <__cvt+0x8e>
 8004f04:	f898 3000 	ldrb.w	r3, [r8]
 8004f08:	2b30      	cmp	r3, #48	; 0x30
 8004f0a:	d10a      	bne.n	8004f22 <__cvt+0x88>
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2300      	movs	r3, #0
 8004f10:	4620      	mov	r0, r4
 8004f12:	4629      	mov	r1, r5
 8004f14:	f7fb fdd4 	bl	8000ac0 <__aeabi_dcmpeq>
 8004f18:	b918      	cbnz	r0, 8004f22 <__cvt+0x88>
 8004f1a:	f1c6 0601 	rsb	r6, r6, #1
 8004f1e:	f8ca 6000 	str.w	r6, [sl]
 8004f22:	f8da 3000 	ldr.w	r3, [sl]
 8004f26:	4499      	add	r9, r3
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f7fb fdc6 	bl	8000ac0 <__aeabi_dcmpeq>
 8004f34:	b938      	cbnz	r0, 8004f46 <__cvt+0xac>
 8004f36:	2230      	movs	r2, #48	; 0x30
 8004f38:	9b03      	ldr	r3, [sp, #12]
 8004f3a:	4599      	cmp	r9, r3
 8004f3c:	d905      	bls.n	8004f4a <__cvt+0xb0>
 8004f3e:	1c59      	adds	r1, r3, #1
 8004f40:	9103      	str	r1, [sp, #12]
 8004f42:	701a      	strb	r2, [r3, #0]
 8004f44:	e7f8      	b.n	8004f38 <__cvt+0x9e>
 8004f46:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f4a:	9b03      	ldr	r3, [sp, #12]
 8004f4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f4e:	eba3 0308 	sub.w	r3, r3, r8
 8004f52:	4640      	mov	r0, r8
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	b004      	add	sp, #16
 8004f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004f5c <__exponent>:
 8004f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2900      	cmp	r1, #0
 8004f62:	bfb8      	it	lt
 8004f64:	4249      	neglt	r1, r1
 8004f66:	f803 2b02 	strb.w	r2, [r3], #2
 8004f6a:	bfb4      	ite	lt
 8004f6c:	222d      	movlt	r2, #45	; 0x2d
 8004f6e:	222b      	movge	r2, #43	; 0x2b
 8004f70:	2909      	cmp	r1, #9
 8004f72:	7042      	strb	r2, [r0, #1]
 8004f74:	dd20      	ble.n	8004fb8 <__exponent+0x5c>
 8004f76:	f10d 0207 	add.w	r2, sp, #7
 8004f7a:	4617      	mov	r7, r2
 8004f7c:	260a      	movs	r6, #10
 8004f7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f82:	fb06 1115 	mls	r1, r6, r5, r1
 8004f86:	3130      	adds	r1, #48	; 0x30
 8004f88:	2d09      	cmp	r5, #9
 8004f8a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f8e:	f102 34ff 	add.w	r4, r2, #4294967295
 8004f92:	4629      	mov	r1, r5
 8004f94:	dc09      	bgt.n	8004faa <__exponent+0x4e>
 8004f96:	3130      	adds	r1, #48	; 0x30
 8004f98:	3a02      	subs	r2, #2
 8004f9a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f9e:	42ba      	cmp	r2, r7
 8004fa0:	461c      	mov	r4, r3
 8004fa2:	d304      	bcc.n	8004fae <__exponent+0x52>
 8004fa4:	1a20      	subs	r0, r4, r0
 8004fa6:	b003      	add	sp, #12
 8004fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004faa:	4622      	mov	r2, r4
 8004fac:	e7e7      	b.n	8004f7e <__exponent+0x22>
 8004fae:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb6:	e7f2      	b.n	8004f9e <__exponent+0x42>
 8004fb8:	2230      	movs	r2, #48	; 0x30
 8004fba:	461c      	mov	r4, r3
 8004fbc:	4411      	add	r1, r2
 8004fbe:	f804 2b02 	strb.w	r2, [r4], #2
 8004fc2:	7059      	strb	r1, [r3, #1]
 8004fc4:	e7ee      	b.n	8004fa4 <__exponent+0x48>
	...

08004fc8 <_printf_float>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	b08d      	sub	sp, #52	; 0x34
 8004fce:	460c      	mov	r4, r1
 8004fd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	461f      	mov	r7, r3
 8004fd8:	4605      	mov	r5, r0
 8004fda:	f001 fa4b 	bl	8006474 <_localeconv_r>
 8004fde:	6803      	ldr	r3, [r0, #0]
 8004fe0:	9304      	str	r3, [sp, #16]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fb f8f4 	bl	80001d0 <strlen>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	930a      	str	r3, [sp, #40]	; 0x28
 8004fec:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff0:	9005      	str	r0, [sp, #20]
 8004ff2:	3307      	adds	r3, #7
 8004ff4:	f023 0307 	bic.w	r3, r3, #7
 8004ff8:	f103 0208 	add.w	r2, r3, #8
 8004ffc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005000:	f8d4 b000 	ldr.w	fp, [r4]
 8005004:	f8c8 2000 	str.w	r2, [r8]
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005010:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005014:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005018:	9307      	str	r3, [sp, #28]
 800501a:	f8cd 8018 	str.w	r8, [sp, #24]
 800501e:	f04f 32ff 	mov.w	r2, #4294967295
 8005022:	4ba5      	ldr	r3, [pc, #660]	; (80052b8 <_printf_float+0x2f0>)
 8005024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005028:	f7fb fd7c 	bl	8000b24 <__aeabi_dcmpun>
 800502c:	2800      	cmp	r0, #0
 800502e:	f040 81fb 	bne.w	8005428 <_printf_float+0x460>
 8005032:	f04f 32ff 	mov.w	r2, #4294967295
 8005036:	4ba0      	ldr	r3, [pc, #640]	; (80052b8 <_printf_float+0x2f0>)
 8005038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800503c:	f7fb fd54 	bl	8000ae8 <__aeabi_dcmple>
 8005040:	2800      	cmp	r0, #0
 8005042:	f040 81f1 	bne.w	8005428 <_printf_float+0x460>
 8005046:	2200      	movs	r2, #0
 8005048:	2300      	movs	r3, #0
 800504a:	4640      	mov	r0, r8
 800504c:	4649      	mov	r1, r9
 800504e:	f7fb fd41 	bl	8000ad4 <__aeabi_dcmplt>
 8005052:	b110      	cbz	r0, 800505a <_printf_float+0x92>
 8005054:	232d      	movs	r3, #45	; 0x2d
 8005056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800505a:	4b98      	ldr	r3, [pc, #608]	; (80052bc <_printf_float+0x2f4>)
 800505c:	4a98      	ldr	r2, [pc, #608]	; (80052c0 <_printf_float+0x2f8>)
 800505e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005062:	bf8c      	ite	hi
 8005064:	4690      	movhi	r8, r2
 8005066:	4698      	movls	r8, r3
 8005068:	2303      	movs	r3, #3
 800506a:	f02b 0204 	bic.w	r2, fp, #4
 800506e:	6123      	str	r3, [r4, #16]
 8005070:	6022      	str	r2, [r4, #0]
 8005072:	f04f 0900 	mov.w	r9, #0
 8005076:	9700      	str	r7, [sp, #0]
 8005078:	4633      	mov	r3, r6
 800507a:	aa0b      	add	r2, sp, #44	; 0x2c
 800507c:	4621      	mov	r1, r4
 800507e:	4628      	mov	r0, r5
 8005080:	f000 f9e2 	bl	8005448 <_printf_common>
 8005084:	3001      	adds	r0, #1
 8005086:	f040 8093 	bne.w	80051b0 <_printf_float+0x1e8>
 800508a:	f04f 30ff 	mov.w	r0, #4294967295
 800508e:	b00d      	add	sp, #52	; 0x34
 8005090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005094:	6861      	ldr	r1, [r4, #4]
 8005096:	1c4b      	adds	r3, r1, #1
 8005098:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800509c:	d13f      	bne.n	800511e <_printf_float+0x156>
 800509e:	2306      	movs	r3, #6
 80050a0:	6063      	str	r3, [r4, #4]
 80050a2:	2300      	movs	r3, #0
 80050a4:	9303      	str	r3, [sp, #12]
 80050a6:	ab0a      	add	r3, sp, #40	; 0x28
 80050a8:	9302      	str	r3, [sp, #8]
 80050aa:	ab09      	add	r3, sp, #36	; 0x24
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	ec49 8b10 	vmov	d0, r8, r9
 80050b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050b6:	6022      	str	r2, [r4, #0]
 80050b8:	f8cd a004 	str.w	sl, [sp, #4]
 80050bc:	6861      	ldr	r1, [r4, #4]
 80050be:	4628      	mov	r0, r5
 80050c0:	f7ff feeb 	bl	8004e9a <__cvt>
 80050c4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80050c8:	2b47      	cmp	r3, #71	; 0x47
 80050ca:	4680      	mov	r8, r0
 80050cc:	d109      	bne.n	80050e2 <_printf_float+0x11a>
 80050ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d0:	1cd8      	adds	r0, r3, #3
 80050d2:	db02      	blt.n	80050da <_printf_float+0x112>
 80050d4:	6862      	ldr	r2, [r4, #4]
 80050d6:	4293      	cmp	r3, r2
 80050d8:	dd57      	ble.n	800518a <_printf_float+0x1c2>
 80050da:	f1aa 0a02 	sub.w	sl, sl, #2
 80050de:	fa5f fa8a 	uxtb.w	sl, sl
 80050e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80050e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050e8:	d834      	bhi.n	8005154 <_printf_float+0x18c>
 80050ea:	3901      	subs	r1, #1
 80050ec:	4652      	mov	r2, sl
 80050ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050f2:	9109      	str	r1, [sp, #36]	; 0x24
 80050f4:	f7ff ff32 	bl	8004f5c <__exponent>
 80050f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050fa:	1883      	adds	r3, r0, r2
 80050fc:	2a01      	cmp	r2, #1
 80050fe:	4681      	mov	r9, r0
 8005100:	6123      	str	r3, [r4, #16]
 8005102:	dc02      	bgt.n	800510a <_printf_float+0x142>
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	07d1      	lsls	r1, r2, #31
 8005108:	d501      	bpl.n	800510e <_printf_float+0x146>
 800510a:	3301      	adds	r3, #1
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0af      	beq.n	8005076 <_printf_float+0xae>
 8005116:	232d      	movs	r3, #45	; 0x2d
 8005118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511c:	e7ab      	b.n	8005076 <_printf_float+0xae>
 800511e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005122:	d002      	beq.n	800512a <_printf_float+0x162>
 8005124:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005128:	d1bb      	bne.n	80050a2 <_printf_float+0xda>
 800512a:	b189      	cbz	r1, 8005150 <_printf_float+0x188>
 800512c:	2300      	movs	r3, #0
 800512e:	9303      	str	r3, [sp, #12]
 8005130:	ab0a      	add	r3, sp, #40	; 0x28
 8005132:	9302      	str	r3, [sp, #8]
 8005134:	ab09      	add	r3, sp, #36	; 0x24
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	ec49 8b10 	vmov	d0, r8, r9
 800513c:	6022      	str	r2, [r4, #0]
 800513e:	f8cd a004 	str.w	sl, [sp, #4]
 8005142:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005146:	4628      	mov	r0, r5
 8005148:	f7ff fea7 	bl	8004e9a <__cvt>
 800514c:	4680      	mov	r8, r0
 800514e:	e7be      	b.n	80050ce <_printf_float+0x106>
 8005150:	2301      	movs	r3, #1
 8005152:	e7a5      	b.n	80050a0 <_printf_float+0xd8>
 8005154:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005158:	d119      	bne.n	800518e <_printf_float+0x1c6>
 800515a:	2900      	cmp	r1, #0
 800515c:	6863      	ldr	r3, [r4, #4]
 800515e:	dd0c      	ble.n	800517a <_printf_float+0x1b2>
 8005160:	6121      	str	r1, [r4, #16]
 8005162:	b913      	cbnz	r3, 800516a <_printf_float+0x1a2>
 8005164:	6822      	ldr	r2, [r4, #0]
 8005166:	07d2      	lsls	r2, r2, #31
 8005168:	d502      	bpl.n	8005170 <_printf_float+0x1a8>
 800516a:	3301      	adds	r3, #1
 800516c:	440b      	add	r3, r1
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005172:	65a3      	str	r3, [r4, #88]	; 0x58
 8005174:	f04f 0900 	mov.w	r9, #0
 8005178:	e7c9      	b.n	800510e <_printf_float+0x146>
 800517a:	b913      	cbnz	r3, 8005182 <_printf_float+0x1ba>
 800517c:	6822      	ldr	r2, [r4, #0]
 800517e:	07d0      	lsls	r0, r2, #31
 8005180:	d501      	bpl.n	8005186 <_printf_float+0x1be>
 8005182:	3302      	adds	r3, #2
 8005184:	e7f3      	b.n	800516e <_printf_float+0x1a6>
 8005186:	2301      	movs	r3, #1
 8005188:	e7f1      	b.n	800516e <_printf_float+0x1a6>
 800518a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800518e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005192:	4293      	cmp	r3, r2
 8005194:	db05      	blt.n	80051a2 <_printf_float+0x1da>
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	6123      	str	r3, [r4, #16]
 800519a:	07d1      	lsls	r1, r2, #31
 800519c:	d5e8      	bpl.n	8005170 <_printf_float+0x1a8>
 800519e:	3301      	adds	r3, #1
 80051a0:	e7e5      	b.n	800516e <_printf_float+0x1a6>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bfd4      	ite	le
 80051a6:	f1c3 0302 	rsble	r3, r3, #2
 80051aa:	2301      	movgt	r3, #1
 80051ac:	4413      	add	r3, r2
 80051ae:	e7de      	b.n	800516e <_printf_float+0x1a6>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	055a      	lsls	r2, r3, #21
 80051b4:	d407      	bmi.n	80051c6 <_printf_float+0x1fe>
 80051b6:	6923      	ldr	r3, [r4, #16]
 80051b8:	4642      	mov	r2, r8
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	47b8      	blx	r7
 80051c0:	3001      	adds	r0, #1
 80051c2:	d12b      	bne.n	800521c <_printf_float+0x254>
 80051c4:	e761      	b.n	800508a <_printf_float+0xc2>
 80051c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80051ca:	f240 80e2 	bls.w	8005392 <_printf_float+0x3ca>
 80051ce:	2200      	movs	r2, #0
 80051d0:	2300      	movs	r3, #0
 80051d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051d6:	f7fb fc73 	bl	8000ac0 <__aeabi_dcmpeq>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d03c      	beq.n	8005258 <_printf_float+0x290>
 80051de:	2301      	movs	r3, #1
 80051e0:	4a38      	ldr	r2, [pc, #224]	; (80052c4 <_printf_float+0x2fc>)
 80051e2:	4631      	mov	r1, r6
 80051e4:	4628      	mov	r0, r5
 80051e6:	47b8      	blx	r7
 80051e8:	3001      	adds	r0, #1
 80051ea:	f43f af4e 	beq.w	800508a <_printf_float+0xc2>
 80051ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051f2:	429a      	cmp	r2, r3
 80051f4:	db02      	blt.n	80051fc <_printf_float+0x234>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	07d8      	lsls	r0, r3, #31
 80051fa:	d50f      	bpl.n	800521c <_printf_float+0x254>
 80051fc:	9b05      	ldr	r3, [sp, #20]
 80051fe:	9a04      	ldr	r2, [sp, #16]
 8005200:	4631      	mov	r1, r6
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	f43f af3f 	beq.w	800508a <_printf_float+0xc2>
 800520c:	f04f 0800 	mov.w	r8, #0
 8005210:	f104 091a 	add.w	r9, r4, #26
 8005214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005216:	3b01      	subs	r3, #1
 8005218:	4598      	cmp	r8, r3
 800521a:	db12      	blt.n	8005242 <_printf_float+0x27a>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	079b      	lsls	r3, r3, #30
 8005220:	d509      	bpl.n	8005236 <_printf_float+0x26e>
 8005222:	f04f 0800 	mov.w	r8, #0
 8005226:	f104 0919 	add.w	r9, r4, #25
 800522a:	68e3      	ldr	r3, [r4, #12]
 800522c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	4598      	cmp	r8, r3
 8005232:	f2c0 80ee 	blt.w	8005412 <_printf_float+0x44a>
 8005236:	68e0      	ldr	r0, [r4, #12]
 8005238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800523a:	4298      	cmp	r0, r3
 800523c:	bfb8      	it	lt
 800523e:	4618      	movlt	r0, r3
 8005240:	e725      	b.n	800508e <_printf_float+0xc6>
 8005242:	2301      	movs	r3, #1
 8005244:	464a      	mov	r2, r9
 8005246:	4631      	mov	r1, r6
 8005248:	4628      	mov	r0, r5
 800524a:	47b8      	blx	r7
 800524c:	3001      	adds	r0, #1
 800524e:	f43f af1c 	beq.w	800508a <_printf_float+0xc2>
 8005252:	f108 0801 	add.w	r8, r8, #1
 8005256:	e7dd      	b.n	8005214 <_printf_float+0x24c>
 8005258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	dc34      	bgt.n	80052c8 <_printf_float+0x300>
 800525e:	2301      	movs	r3, #1
 8005260:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <_printf_float+0x2fc>)
 8005262:	4631      	mov	r1, r6
 8005264:	4628      	mov	r0, r5
 8005266:	47b8      	blx	r7
 8005268:	3001      	adds	r0, #1
 800526a:	f43f af0e 	beq.w	800508a <_printf_float+0xc2>
 800526e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005270:	b923      	cbnz	r3, 800527c <_printf_float+0x2b4>
 8005272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005274:	b913      	cbnz	r3, 800527c <_printf_float+0x2b4>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	07d9      	lsls	r1, r3, #31
 800527a:	d5cf      	bpl.n	800521c <_printf_float+0x254>
 800527c:	9b05      	ldr	r3, [sp, #20]
 800527e:	9a04      	ldr	r2, [sp, #16]
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f aeff 	beq.w	800508a <_printf_float+0xc2>
 800528c:	f04f 0900 	mov.w	r9, #0
 8005290:	f104 0a1a 	add.w	sl, r4, #26
 8005294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005296:	425b      	negs	r3, r3
 8005298:	4599      	cmp	r9, r3
 800529a:	db01      	blt.n	80052a0 <_printf_float+0x2d8>
 800529c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800529e:	e78b      	b.n	80051b8 <_printf_float+0x1f0>
 80052a0:	2301      	movs	r3, #1
 80052a2:	4652      	mov	r2, sl
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f aeed 	beq.w	800508a <_printf_float+0xc2>
 80052b0:	f109 0901 	add.w	r9, r9, #1
 80052b4:	e7ee      	b.n	8005294 <_printf_float+0x2cc>
 80052b6:	bf00      	nop
 80052b8:	7fefffff 	.word	0x7fefffff
 80052bc:	0800708c 	.word	0x0800708c
 80052c0:	08007090 	.word	0x08007090
 80052c4:	0800709c 	.word	0x0800709c
 80052c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052cc:	429a      	cmp	r2, r3
 80052ce:	bfa8      	it	ge
 80052d0:	461a      	movge	r2, r3
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	4691      	mov	r9, r2
 80052d6:	dc38      	bgt.n	800534a <_printf_float+0x382>
 80052d8:	f104 031a 	add.w	r3, r4, #26
 80052dc:	f04f 0b00 	mov.w	fp, #0
 80052e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052e4:	9306      	str	r3, [sp, #24]
 80052e6:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80052ea:	ebaa 0309 	sub.w	r3, sl, r9
 80052ee:	459b      	cmp	fp, r3
 80052f0:	db33      	blt.n	800535a <_printf_float+0x392>
 80052f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052f6:	429a      	cmp	r2, r3
 80052f8:	db3a      	blt.n	8005370 <_printf_float+0x3a8>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	07da      	lsls	r2, r3, #31
 80052fe:	d437      	bmi.n	8005370 <_printf_float+0x3a8>
 8005300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005302:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005304:	eba3 020a 	sub.w	r2, r3, sl
 8005308:	eba3 0901 	sub.w	r9, r3, r1
 800530c:	4591      	cmp	r9, r2
 800530e:	bfa8      	it	ge
 8005310:	4691      	movge	r9, r2
 8005312:	f1b9 0f00 	cmp.w	r9, #0
 8005316:	dc33      	bgt.n	8005380 <_printf_float+0x3b8>
 8005318:	f04f 0800 	mov.w	r8, #0
 800531c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005320:	f104 0a1a 	add.w	sl, r4, #26
 8005324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	eba3 0309 	sub.w	r3, r3, r9
 800532e:	4598      	cmp	r8, r3
 8005330:	f6bf af74 	bge.w	800521c <_printf_float+0x254>
 8005334:	2301      	movs	r3, #1
 8005336:	4652      	mov	r2, sl
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	f43f aea3 	beq.w	800508a <_printf_float+0xc2>
 8005344:	f108 0801 	add.w	r8, r8, #1
 8005348:	e7ec      	b.n	8005324 <_printf_float+0x35c>
 800534a:	4613      	mov	r3, r2
 800534c:	4631      	mov	r1, r6
 800534e:	4642      	mov	r2, r8
 8005350:	4628      	mov	r0, r5
 8005352:	47b8      	blx	r7
 8005354:	3001      	adds	r0, #1
 8005356:	d1bf      	bne.n	80052d8 <_printf_float+0x310>
 8005358:	e697      	b.n	800508a <_printf_float+0xc2>
 800535a:	2301      	movs	r3, #1
 800535c:	9a06      	ldr	r2, [sp, #24]
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	f43f ae90 	beq.w	800508a <_printf_float+0xc2>
 800536a:	f10b 0b01 	add.w	fp, fp, #1
 800536e:	e7ba      	b.n	80052e6 <_printf_float+0x31e>
 8005370:	9b05      	ldr	r3, [sp, #20]
 8005372:	9a04      	ldr	r2, [sp, #16]
 8005374:	4631      	mov	r1, r6
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	d1c0      	bne.n	8005300 <_printf_float+0x338>
 800537e:	e684      	b.n	800508a <_printf_float+0xc2>
 8005380:	464b      	mov	r3, r9
 8005382:	eb08 020a 	add.w	r2, r8, sl
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	d1c3      	bne.n	8005318 <_printf_float+0x350>
 8005390:	e67b      	b.n	800508a <_printf_float+0xc2>
 8005392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005394:	2a01      	cmp	r2, #1
 8005396:	dc01      	bgt.n	800539c <_printf_float+0x3d4>
 8005398:	07db      	lsls	r3, r3, #31
 800539a:	d537      	bpl.n	800540c <_printf_float+0x444>
 800539c:	2301      	movs	r3, #1
 800539e:	4642      	mov	r2, r8
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f ae6f 	beq.w	800508a <_printf_float+0xc2>
 80053ac:	9b05      	ldr	r3, [sp, #20]
 80053ae:	9a04      	ldr	r2, [sp, #16]
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	47b8      	blx	r7
 80053b6:	3001      	adds	r0, #1
 80053b8:	f43f ae67 	beq.w	800508a <_printf_float+0xc2>
 80053bc:	2200      	movs	r2, #0
 80053be:	2300      	movs	r3, #0
 80053c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053c4:	f7fb fb7c 	bl	8000ac0 <__aeabi_dcmpeq>
 80053c8:	b158      	cbz	r0, 80053e2 <_printf_float+0x41a>
 80053ca:	f04f 0800 	mov.w	r8, #0
 80053ce:	f104 0a1a 	add.w	sl, r4, #26
 80053d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d4:	3b01      	subs	r3, #1
 80053d6:	4598      	cmp	r8, r3
 80053d8:	db0d      	blt.n	80053f6 <_printf_float+0x42e>
 80053da:	464b      	mov	r3, r9
 80053dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053e0:	e6eb      	b.n	80051ba <_printf_float+0x1f2>
 80053e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e4:	f108 0201 	add.w	r2, r8, #1
 80053e8:	3b01      	subs	r3, #1
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	d1f2      	bne.n	80053da <_printf_float+0x412>
 80053f4:	e649      	b.n	800508a <_printf_float+0xc2>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4652      	mov	r2, sl
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	f43f ae42 	beq.w	800508a <_printf_float+0xc2>
 8005406:	f108 0801 	add.w	r8, r8, #1
 800540a:	e7e2      	b.n	80053d2 <_printf_float+0x40a>
 800540c:	2301      	movs	r3, #1
 800540e:	4642      	mov	r2, r8
 8005410:	e7eb      	b.n	80053ea <_printf_float+0x422>
 8005412:	2301      	movs	r3, #1
 8005414:	464a      	mov	r2, r9
 8005416:	4631      	mov	r1, r6
 8005418:	4628      	mov	r0, r5
 800541a:	47b8      	blx	r7
 800541c:	3001      	adds	r0, #1
 800541e:	f43f ae34 	beq.w	800508a <_printf_float+0xc2>
 8005422:	f108 0801 	add.w	r8, r8, #1
 8005426:	e700      	b.n	800522a <_printf_float+0x262>
 8005428:	4642      	mov	r2, r8
 800542a:	464b      	mov	r3, r9
 800542c:	4640      	mov	r0, r8
 800542e:	4649      	mov	r1, r9
 8005430:	f7fb fb78 	bl	8000b24 <__aeabi_dcmpun>
 8005434:	2800      	cmp	r0, #0
 8005436:	f43f ae2d 	beq.w	8005094 <_printf_float+0xcc>
 800543a:	4b01      	ldr	r3, [pc, #4]	; (8005440 <_printf_float+0x478>)
 800543c:	4a01      	ldr	r2, [pc, #4]	; (8005444 <_printf_float+0x47c>)
 800543e:	e60e      	b.n	800505e <_printf_float+0x96>
 8005440:	08007094 	.word	0x08007094
 8005444:	08007098 	.word	0x08007098

08005448 <_printf_common>:
 8005448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	4691      	mov	r9, r2
 800544e:	461f      	mov	r7, r3
 8005450:	688a      	ldr	r2, [r1, #8]
 8005452:	690b      	ldr	r3, [r1, #16]
 8005454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005458:	4293      	cmp	r3, r2
 800545a:	bfb8      	it	lt
 800545c:	4613      	movlt	r3, r2
 800545e:	f8c9 3000 	str.w	r3, [r9]
 8005462:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005466:	4606      	mov	r6, r0
 8005468:	460c      	mov	r4, r1
 800546a:	b112      	cbz	r2, 8005472 <_printf_common+0x2a>
 800546c:	3301      	adds	r3, #1
 800546e:	f8c9 3000 	str.w	r3, [r9]
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	0699      	lsls	r1, r3, #26
 8005476:	bf42      	ittt	mi
 8005478:	f8d9 3000 	ldrmi.w	r3, [r9]
 800547c:	3302      	addmi	r3, #2
 800547e:	f8c9 3000 	strmi.w	r3, [r9]
 8005482:	6825      	ldr	r5, [r4, #0]
 8005484:	f015 0506 	ands.w	r5, r5, #6
 8005488:	d107      	bne.n	800549a <_printf_common+0x52>
 800548a:	f104 0a19 	add.w	sl, r4, #25
 800548e:	68e3      	ldr	r3, [r4, #12]
 8005490:	f8d9 2000 	ldr.w	r2, [r9]
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	429d      	cmp	r5, r3
 8005498:	db29      	blt.n	80054ee <_printf_common+0xa6>
 800549a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800549e:	6822      	ldr	r2, [r4, #0]
 80054a0:	3300      	adds	r3, #0
 80054a2:	bf18      	it	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	0692      	lsls	r2, r2, #26
 80054a8:	d42e      	bmi.n	8005508 <_printf_common+0xc0>
 80054aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054ae:	4639      	mov	r1, r7
 80054b0:	4630      	mov	r0, r6
 80054b2:	47c0      	blx	r8
 80054b4:	3001      	adds	r0, #1
 80054b6:	d021      	beq.n	80054fc <_printf_common+0xb4>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	68e5      	ldr	r5, [r4, #12]
 80054bc:	f8d9 2000 	ldr.w	r2, [r9]
 80054c0:	f003 0306 	and.w	r3, r3, #6
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	bf08      	it	eq
 80054c8:	1aad      	subeq	r5, r5, r2
 80054ca:	68a3      	ldr	r3, [r4, #8]
 80054cc:	6922      	ldr	r2, [r4, #16]
 80054ce:	bf0c      	ite	eq
 80054d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d4:	2500      	movne	r5, #0
 80054d6:	4293      	cmp	r3, r2
 80054d8:	bfc4      	itt	gt
 80054da:	1a9b      	subgt	r3, r3, r2
 80054dc:	18ed      	addgt	r5, r5, r3
 80054de:	f04f 0900 	mov.w	r9, #0
 80054e2:	341a      	adds	r4, #26
 80054e4:	454d      	cmp	r5, r9
 80054e6:	d11b      	bne.n	8005520 <_printf_common+0xd8>
 80054e8:	2000      	movs	r0, #0
 80054ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ee:	2301      	movs	r3, #1
 80054f0:	4652      	mov	r2, sl
 80054f2:	4639      	mov	r1, r7
 80054f4:	4630      	mov	r0, r6
 80054f6:	47c0      	blx	r8
 80054f8:	3001      	adds	r0, #1
 80054fa:	d103      	bne.n	8005504 <_printf_common+0xbc>
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005504:	3501      	adds	r5, #1
 8005506:	e7c2      	b.n	800548e <_printf_common+0x46>
 8005508:	18e1      	adds	r1, r4, r3
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	2030      	movs	r0, #48	; 0x30
 800550e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005512:	4422      	add	r2, r4
 8005514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800551c:	3302      	adds	r3, #2
 800551e:	e7c4      	b.n	80054aa <_printf_common+0x62>
 8005520:	2301      	movs	r3, #1
 8005522:	4622      	mov	r2, r4
 8005524:	4639      	mov	r1, r7
 8005526:	4630      	mov	r0, r6
 8005528:	47c0      	blx	r8
 800552a:	3001      	adds	r0, #1
 800552c:	d0e6      	beq.n	80054fc <_printf_common+0xb4>
 800552e:	f109 0901 	add.w	r9, r9, #1
 8005532:	e7d7      	b.n	80054e4 <_printf_common+0x9c>

08005534 <_printf_i>:
 8005534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005538:	4617      	mov	r7, r2
 800553a:	7e0a      	ldrb	r2, [r1, #24]
 800553c:	b085      	sub	sp, #20
 800553e:	2a6e      	cmp	r2, #110	; 0x6e
 8005540:	4698      	mov	r8, r3
 8005542:	4606      	mov	r6, r0
 8005544:	460c      	mov	r4, r1
 8005546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005548:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800554c:	f000 80bc 	beq.w	80056c8 <_printf_i+0x194>
 8005550:	d81a      	bhi.n	8005588 <_printf_i+0x54>
 8005552:	2a63      	cmp	r2, #99	; 0x63
 8005554:	d02e      	beq.n	80055b4 <_printf_i+0x80>
 8005556:	d80a      	bhi.n	800556e <_printf_i+0x3a>
 8005558:	2a00      	cmp	r2, #0
 800555a:	f000 80c8 	beq.w	80056ee <_printf_i+0x1ba>
 800555e:	2a58      	cmp	r2, #88	; 0x58
 8005560:	f000 808a 	beq.w	8005678 <_printf_i+0x144>
 8005564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005568:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800556c:	e02a      	b.n	80055c4 <_printf_i+0x90>
 800556e:	2a64      	cmp	r2, #100	; 0x64
 8005570:	d001      	beq.n	8005576 <_printf_i+0x42>
 8005572:	2a69      	cmp	r2, #105	; 0x69
 8005574:	d1f6      	bne.n	8005564 <_printf_i+0x30>
 8005576:	6821      	ldr	r1, [r4, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800557e:	d023      	beq.n	80055c8 <_printf_i+0x94>
 8005580:	1d11      	adds	r1, r2, #4
 8005582:	6019      	str	r1, [r3, #0]
 8005584:	6813      	ldr	r3, [r2, #0]
 8005586:	e027      	b.n	80055d8 <_printf_i+0xa4>
 8005588:	2a73      	cmp	r2, #115	; 0x73
 800558a:	f000 80b4 	beq.w	80056f6 <_printf_i+0x1c2>
 800558e:	d808      	bhi.n	80055a2 <_printf_i+0x6e>
 8005590:	2a6f      	cmp	r2, #111	; 0x6f
 8005592:	d02a      	beq.n	80055ea <_printf_i+0xb6>
 8005594:	2a70      	cmp	r2, #112	; 0x70
 8005596:	d1e5      	bne.n	8005564 <_printf_i+0x30>
 8005598:	680a      	ldr	r2, [r1, #0]
 800559a:	f042 0220 	orr.w	r2, r2, #32
 800559e:	600a      	str	r2, [r1, #0]
 80055a0:	e003      	b.n	80055aa <_printf_i+0x76>
 80055a2:	2a75      	cmp	r2, #117	; 0x75
 80055a4:	d021      	beq.n	80055ea <_printf_i+0xb6>
 80055a6:	2a78      	cmp	r2, #120	; 0x78
 80055a8:	d1dc      	bne.n	8005564 <_printf_i+0x30>
 80055aa:	2278      	movs	r2, #120	; 0x78
 80055ac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80055b0:	496e      	ldr	r1, [pc, #440]	; (800576c <_printf_i+0x238>)
 80055b2:	e064      	b.n	800567e <_printf_i+0x14a>
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80055ba:	1d11      	adds	r1, r2, #4
 80055bc:	6019      	str	r1, [r3, #0]
 80055be:	6813      	ldr	r3, [r2, #0]
 80055c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0a3      	b.n	8005710 <_printf_i+0x1dc>
 80055c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80055cc:	f102 0104 	add.w	r1, r2, #4
 80055d0:	6019      	str	r1, [r3, #0]
 80055d2:	d0d7      	beq.n	8005584 <_printf_i+0x50>
 80055d4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	da03      	bge.n	80055e4 <_printf_i+0xb0>
 80055dc:	222d      	movs	r2, #45	; 0x2d
 80055de:	425b      	negs	r3, r3
 80055e0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80055e4:	4962      	ldr	r1, [pc, #392]	; (8005770 <_printf_i+0x23c>)
 80055e6:	220a      	movs	r2, #10
 80055e8:	e017      	b.n	800561a <_printf_i+0xe6>
 80055ea:	6820      	ldr	r0, [r4, #0]
 80055ec:	6819      	ldr	r1, [r3, #0]
 80055ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80055f2:	d003      	beq.n	80055fc <_printf_i+0xc8>
 80055f4:	1d08      	adds	r0, r1, #4
 80055f6:	6018      	str	r0, [r3, #0]
 80055f8:	680b      	ldr	r3, [r1, #0]
 80055fa:	e006      	b.n	800560a <_printf_i+0xd6>
 80055fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005600:	f101 0004 	add.w	r0, r1, #4
 8005604:	6018      	str	r0, [r3, #0]
 8005606:	d0f7      	beq.n	80055f8 <_printf_i+0xc4>
 8005608:	880b      	ldrh	r3, [r1, #0]
 800560a:	4959      	ldr	r1, [pc, #356]	; (8005770 <_printf_i+0x23c>)
 800560c:	2a6f      	cmp	r2, #111	; 0x6f
 800560e:	bf14      	ite	ne
 8005610:	220a      	movne	r2, #10
 8005612:	2208      	moveq	r2, #8
 8005614:	2000      	movs	r0, #0
 8005616:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800561a:	6865      	ldr	r5, [r4, #4]
 800561c:	60a5      	str	r5, [r4, #8]
 800561e:	2d00      	cmp	r5, #0
 8005620:	f2c0 809c 	blt.w	800575c <_printf_i+0x228>
 8005624:	6820      	ldr	r0, [r4, #0]
 8005626:	f020 0004 	bic.w	r0, r0, #4
 800562a:	6020      	str	r0, [r4, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d13f      	bne.n	80056b0 <_printf_i+0x17c>
 8005630:	2d00      	cmp	r5, #0
 8005632:	f040 8095 	bne.w	8005760 <_printf_i+0x22c>
 8005636:	4675      	mov	r5, lr
 8005638:	2a08      	cmp	r2, #8
 800563a:	d10b      	bne.n	8005654 <_printf_i+0x120>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	07da      	lsls	r2, r3, #31
 8005640:	d508      	bpl.n	8005654 <_printf_i+0x120>
 8005642:	6923      	ldr	r3, [r4, #16]
 8005644:	6862      	ldr	r2, [r4, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	bfde      	ittt	le
 800564a:	2330      	movle	r3, #48	; 0x30
 800564c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005650:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005654:	ebae 0305 	sub.w	r3, lr, r5
 8005658:	6123      	str	r3, [r4, #16]
 800565a:	f8cd 8000 	str.w	r8, [sp]
 800565e:	463b      	mov	r3, r7
 8005660:	aa03      	add	r2, sp, #12
 8005662:	4621      	mov	r1, r4
 8005664:	4630      	mov	r0, r6
 8005666:	f7ff feef 	bl	8005448 <_printf_common>
 800566a:	3001      	adds	r0, #1
 800566c:	d155      	bne.n	800571a <_printf_i+0x1e6>
 800566e:	f04f 30ff 	mov.w	r0, #4294967295
 8005672:	b005      	add	sp, #20
 8005674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005678:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800567c:	493c      	ldr	r1, [pc, #240]	; (8005770 <_printf_i+0x23c>)
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005686:	f100 0504 	add.w	r5, r0, #4
 800568a:	601d      	str	r5, [r3, #0]
 800568c:	d001      	beq.n	8005692 <_printf_i+0x15e>
 800568e:	6803      	ldr	r3, [r0, #0]
 8005690:	e002      	b.n	8005698 <_printf_i+0x164>
 8005692:	0655      	lsls	r5, r2, #25
 8005694:	d5fb      	bpl.n	800568e <_printf_i+0x15a>
 8005696:	8803      	ldrh	r3, [r0, #0]
 8005698:	07d0      	lsls	r0, r2, #31
 800569a:	bf44      	itt	mi
 800569c:	f042 0220 	orrmi.w	r2, r2, #32
 80056a0:	6022      	strmi	r2, [r4, #0]
 80056a2:	b91b      	cbnz	r3, 80056ac <_printf_i+0x178>
 80056a4:	6822      	ldr	r2, [r4, #0]
 80056a6:	f022 0220 	bic.w	r2, r2, #32
 80056aa:	6022      	str	r2, [r4, #0]
 80056ac:	2210      	movs	r2, #16
 80056ae:	e7b1      	b.n	8005614 <_printf_i+0xe0>
 80056b0:	4675      	mov	r5, lr
 80056b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80056b6:	fb02 3310 	mls	r3, r2, r0, r3
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056c0:	4603      	mov	r3, r0
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d1f5      	bne.n	80056b2 <_printf_i+0x17e>
 80056c6:	e7b7      	b.n	8005638 <_printf_i+0x104>
 80056c8:	6808      	ldr	r0, [r1, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	6949      	ldr	r1, [r1, #20]
 80056ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80056d2:	d004      	beq.n	80056de <_printf_i+0x1aa>
 80056d4:	1d10      	adds	r0, r2, #4
 80056d6:	6018      	str	r0, [r3, #0]
 80056d8:	6813      	ldr	r3, [r2, #0]
 80056da:	6019      	str	r1, [r3, #0]
 80056dc:	e007      	b.n	80056ee <_printf_i+0x1ba>
 80056de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056e2:	f102 0004 	add.w	r0, r2, #4
 80056e6:	6018      	str	r0, [r3, #0]
 80056e8:	6813      	ldr	r3, [r2, #0]
 80056ea:	d0f6      	beq.n	80056da <_printf_i+0x1a6>
 80056ec:	8019      	strh	r1, [r3, #0]
 80056ee:	2300      	movs	r3, #0
 80056f0:	6123      	str	r3, [r4, #16]
 80056f2:	4675      	mov	r5, lr
 80056f4:	e7b1      	b.n	800565a <_printf_i+0x126>
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	1d11      	adds	r1, r2, #4
 80056fa:	6019      	str	r1, [r3, #0]
 80056fc:	6815      	ldr	r5, [r2, #0]
 80056fe:	6862      	ldr	r2, [r4, #4]
 8005700:	2100      	movs	r1, #0
 8005702:	4628      	mov	r0, r5
 8005704:	f7fa fd6c 	bl	80001e0 <memchr>
 8005708:	b108      	cbz	r0, 800570e <_printf_i+0x1da>
 800570a:	1b40      	subs	r0, r0, r5
 800570c:	6060      	str	r0, [r4, #4]
 800570e:	6863      	ldr	r3, [r4, #4]
 8005710:	6123      	str	r3, [r4, #16]
 8005712:	2300      	movs	r3, #0
 8005714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005718:	e79f      	b.n	800565a <_printf_i+0x126>
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	462a      	mov	r2, r5
 800571e:	4639      	mov	r1, r7
 8005720:	4630      	mov	r0, r6
 8005722:	47c0      	blx	r8
 8005724:	3001      	adds	r0, #1
 8005726:	d0a2      	beq.n	800566e <_printf_i+0x13a>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	079b      	lsls	r3, r3, #30
 800572c:	d507      	bpl.n	800573e <_printf_i+0x20a>
 800572e:	2500      	movs	r5, #0
 8005730:	f104 0919 	add.w	r9, r4, #25
 8005734:	68e3      	ldr	r3, [r4, #12]
 8005736:	9a03      	ldr	r2, [sp, #12]
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	429d      	cmp	r5, r3
 800573c:	db05      	blt.n	800574a <_printf_i+0x216>
 800573e:	68e0      	ldr	r0, [r4, #12]
 8005740:	9b03      	ldr	r3, [sp, #12]
 8005742:	4298      	cmp	r0, r3
 8005744:	bfb8      	it	lt
 8005746:	4618      	movlt	r0, r3
 8005748:	e793      	b.n	8005672 <_printf_i+0x13e>
 800574a:	2301      	movs	r3, #1
 800574c:	464a      	mov	r2, r9
 800574e:	4639      	mov	r1, r7
 8005750:	4630      	mov	r0, r6
 8005752:	47c0      	blx	r8
 8005754:	3001      	adds	r0, #1
 8005756:	d08a      	beq.n	800566e <_printf_i+0x13a>
 8005758:	3501      	adds	r5, #1
 800575a:	e7eb      	b.n	8005734 <_printf_i+0x200>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1a7      	bne.n	80056b0 <_printf_i+0x17c>
 8005760:	780b      	ldrb	r3, [r1, #0]
 8005762:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005766:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800576a:	e765      	b.n	8005638 <_printf_i+0x104>
 800576c:	080070af 	.word	0x080070af
 8005770:	0800709e 	.word	0x0800709e

08005774 <siprintf>:
 8005774:	b40e      	push	{r1, r2, r3}
 8005776:	b500      	push	{lr}
 8005778:	b09c      	sub	sp, #112	; 0x70
 800577a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800577e:	ab1d      	add	r3, sp, #116	; 0x74
 8005780:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005784:	9002      	str	r0, [sp, #8]
 8005786:	9006      	str	r0, [sp, #24]
 8005788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800578c:	480a      	ldr	r0, [pc, #40]	; (80057b8 <siprintf+0x44>)
 800578e:	9104      	str	r1, [sp, #16]
 8005790:	9107      	str	r1, [sp, #28]
 8005792:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005796:	f853 2b04 	ldr.w	r2, [r3], #4
 800579a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800579e:	6800      	ldr	r0, [r0, #0]
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	a902      	add	r1, sp, #8
 80057a4:	f001 fa62 	bl	8006c6c <_svfiprintf_r>
 80057a8:	9b02      	ldr	r3, [sp, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	b01c      	add	sp, #112	; 0x70
 80057b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057b4:	b003      	add	sp, #12
 80057b6:	4770      	bx	lr
 80057b8:	20000010 	.word	0x20000010

080057bc <quorem>:
 80057bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	6903      	ldr	r3, [r0, #16]
 80057c2:	690c      	ldr	r4, [r1, #16]
 80057c4:	429c      	cmp	r4, r3
 80057c6:	4680      	mov	r8, r0
 80057c8:	f300 8082 	bgt.w	80058d0 <quorem+0x114>
 80057cc:	3c01      	subs	r4, #1
 80057ce:	f101 0714 	add.w	r7, r1, #20
 80057d2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80057d6:	f100 0614 	add.w	r6, r0, #20
 80057da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80057de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80057e2:	eb06 030e 	add.w	r3, r6, lr
 80057e6:	3501      	adds	r5, #1
 80057e8:	eb07 090e 	add.w	r9, r7, lr
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80057f2:	b395      	cbz	r5, 800585a <quorem+0x9e>
 80057f4:	f04f 0a00 	mov.w	sl, #0
 80057f8:	4638      	mov	r0, r7
 80057fa:	46b4      	mov	ip, r6
 80057fc:	46d3      	mov	fp, sl
 80057fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8005802:	b293      	uxth	r3, r2
 8005804:	fb05 a303 	mla	r3, r5, r3, sl
 8005808:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800580c:	b29b      	uxth	r3, r3
 800580e:	ebab 0303 	sub.w	r3, fp, r3
 8005812:	0c12      	lsrs	r2, r2, #16
 8005814:	f8bc b000 	ldrh.w	fp, [ip]
 8005818:	fb05 a202 	mla	r2, r5, r2, sl
 800581c:	fa13 f38b 	uxtah	r3, r3, fp
 8005820:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005824:	fa1f fb82 	uxth.w	fp, r2
 8005828:	f8dc 2000 	ldr.w	r2, [ip]
 800582c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005834:	b29b      	uxth	r3, r3
 8005836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800583a:	4581      	cmp	r9, r0
 800583c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005840:	f84c 3b04 	str.w	r3, [ip], #4
 8005844:	d2db      	bcs.n	80057fe <quorem+0x42>
 8005846:	f856 300e 	ldr.w	r3, [r6, lr]
 800584a:	b933      	cbnz	r3, 800585a <quorem+0x9e>
 800584c:	9b01      	ldr	r3, [sp, #4]
 800584e:	3b04      	subs	r3, #4
 8005850:	429e      	cmp	r6, r3
 8005852:	461a      	mov	r2, r3
 8005854:	d330      	bcc.n	80058b8 <quorem+0xfc>
 8005856:	f8c8 4010 	str.w	r4, [r8, #16]
 800585a:	4640      	mov	r0, r8
 800585c:	f001 f829 	bl	80068b2 <__mcmp>
 8005860:	2800      	cmp	r0, #0
 8005862:	db25      	blt.n	80058b0 <quorem+0xf4>
 8005864:	3501      	adds	r5, #1
 8005866:	4630      	mov	r0, r6
 8005868:	f04f 0e00 	mov.w	lr, #0
 800586c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005870:	f8d0 c000 	ldr.w	ip, [r0]
 8005874:	b293      	uxth	r3, r2
 8005876:	ebae 0303 	sub.w	r3, lr, r3
 800587a:	0c12      	lsrs	r2, r2, #16
 800587c:	fa13 f38c 	uxtah	r3, r3, ip
 8005880:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005888:	b29b      	uxth	r3, r3
 800588a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800588e:	45b9      	cmp	r9, r7
 8005890:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005894:	f840 3b04 	str.w	r3, [r0], #4
 8005898:	d2e8      	bcs.n	800586c <quorem+0xb0>
 800589a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800589e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80058a2:	b92a      	cbnz	r2, 80058b0 <quorem+0xf4>
 80058a4:	3b04      	subs	r3, #4
 80058a6:	429e      	cmp	r6, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	d30b      	bcc.n	80058c4 <quorem+0x108>
 80058ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80058b0:	4628      	mov	r0, r5
 80058b2:	b003      	add	sp, #12
 80058b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	3b04      	subs	r3, #4
 80058bc:	2a00      	cmp	r2, #0
 80058be:	d1ca      	bne.n	8005856 <quorem+0x9a>
 80058c0:	3c01      	subs	r4, #1
 80058c2:	e7c5      	b.n	8005850 <quorem+0x94>
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	3b04      	subs	r3, #4
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d1ef      	bne.n	80058ac <quorem+0xf0>
 80058cc:	3c01      	subs	r4, #1
 80058ce:	e7ea      	b.n	80058a6 <quorem+0xea>
 80058d0:	2000      	movs	r0, #0
 80058d2:	e7ee      	b.n	80058b2 <quorem+0xf6>
 80058d4:	0000      	movs	r0, r0
	...

080058d8 <_dtoa_r>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	ec57 6b10 	vmov	r6, r7, d0
 80058e0:	b097      	sub	sp, #92	; 0x5c
 80058e2:	e9cd 6700 	strd	r6, r7, [sp]
 80058e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058e8:	9107      	str	r1, [sp, #28]
 80058ea:	4604      	mov	r4, r0
 80058ec:	920a      	str	r2, [sp, #40]	; 0x28
 80058ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80058f0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80058f2:	b93e      	cbnz	r6, 8005904 <_dtoa_r+0x2c>
 80058f4:	2010      	movs	r0, #16
 80058f6:	f000 fdcb 	bl	8006490 <malloc>
 80058fa:	6260      	str	r0, [r4, #36]	; 0x24
 80058fc:	6046      	str	r6, [r0, #4]
 80058fe:	6086      	str	r6, [r0, #8]
 8005900:	6006      	str	r6, [r0, #0]
 8005902:	60c6      	str	r6, [r0, #12]
 8005904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005906:	6819      	ldr	r1, [r3, #0]
 8005908:	b151      	cbz	r1, 8005920 <_dtoa_r+0x48>
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	604a      	str	r2, [r1, #4]
 800590e:	2301      	movs	r3, #1
 8005910:	4093      	lsls	r3, r2
 8005912:	608b      	str	r3, [r1, #8]
 8005914:	4620      	mov	r0, r4
 8005916:	f000 fdf7 	bl	8006508 <_Bfree>
 800591a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	bfbf      	itttt	lt
 8005926:	2301      	movlt	r3, #1
 8005928:	602b      	strlt	r3, [r5, #0]
 800592a:	9b01      	ldrlt	r3, [sp, #4]
 800592c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005930:	bfb2      	itee	lt
 8005932:	9301      	strlt	r3, [sp, #4]
 8005934:	2300      	movge	r3, #0
 8005936:	602b      	strge	r3, [r5, #0]
 8005938:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800593c:	4ba8      	ldr	r3, [pc, #672]	; (8005be0 <_dtoa_r+0x308>)
 800593e:	ea33 0308 	bics.w	r3, r3, r8
 8005942:	d11b      	bne.n	800597c <_dtoa_r+0xa4>
 8005944:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005946:	f242 730f 	movw	r3, #9999	; 0x270f
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	9b00      	ldr	r3, [sp, #0]
 800594e:	b923      	cbnz	r3, 800595a <_dtoa_r+0x82>
 8005950:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005954:	2800      	cmp	r0, #0
 8005956:	f000 8578 	beq.w	800644a <_dtoa_r+0xb72>
 800595a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800595c:	b953      	cbnz	r3, 8005974 <_dtoa_r+0x9c>
 800595e:	4ba1      	ldr	r3, [pc, #644]	; (8005be4 <_dtoa_r+0x30c>)
 8005960:	e021      	b.n	80059a6 <_dtoa_r+0xce>
 8005962:	4ba1      	ldr	r3, [pc, #644]	; (8005be8 <_dtoa_r+0x310>)
 8005964:	9302      	str	r3, [sp, #8]
 8005966:	3308      	adds	r3, #8
 8005968:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	9802      	ldr	r0, [sp, #8]
 800596e:	b017      	add	sp, #92	; 0x5c
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	4b9b      	ldr	r3, [pc, #620]	; (8005be4 <_dtoa_r+0x30c>)
 8005976:	9302      	str	r3, [sp, #8]
 8005978:	3303      	adds	r3, #3
 800597a:	e7f5      	b.n	8005968 <_dtoa_r+0x90>
 800597c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005980:	2200      	movs	r2, #0
 8005982:	2300      	movs	r3, #0
 8005984:	4630      	mov	r0, r6
 8005986:	4639      	mov	r1, r7
 8005988:	f7fb f89a 	bl	8000ac0 <__aeabi_dcmpeq>
 800598c:	4681      	mov	r9, r0
 800598e:	b160      	cbz	r0, 80059aa <_dtoa_r+0xd2>
 8005990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005992:	2301      	movs	r3, #1
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 8553 	beq.w	8006444 <_dtoa_r+0xb6c>
 800599e:	4b93      	ldr	r3, [pc, #588]	; (8005bec <_dtoa_r+0x314>)
 80059a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	9302      	str	r3, [sp, #8]
 80059a8:	e7e0      	b.n	800596c <_dtoa_r+0x94>
 80059aa:	aa14      	add	r2, sp, #80	; 0x50
 80059ac:	a915      	add	r1, sp, #84	; 0x54
 80059ae:	ec47 6b10 	vmov	d0, r6, r7
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 fff5 	bl	80069a2 <__d2b>
 80059b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80059bc:	4682      	mov	sl, r0
 80059be:	2d00      	cmp	r5, #0
 80059c0:	d07e      	beq.n	8005ac0 <_dtoa_r+0x1e8>
 80059c2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80059c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80059ca:	4630      	mov	r0, r6
 80059cc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80059d0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80059d4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80059d8:	2200      	movs	r2, #0
 80059da:	4b85      	ldr	r3, [pc, #532]	; (8005bf0 <_dtoa_r+0x318>)
 80059dc:	f7fa fc54 	bl	8000288 <__aeabi_dsub>
 80059e0:	a379      	add	r3, pc, #484	; (adr r3, 8005bc8 <_dtoa_r+0x2f0>)
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	f7fa fe03 	bl	80005f0 <__aeabi_dmul>
 80059ea:	a379      	add	r3, pc, #484	; (adr r3, 8005bd0 <_dtoa_r+0x2f8>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f7fa fc4c 	bl	800028c <__adddf3>
 80059f4:	4606      	mov	r6, r0
 80059f6:	4628      	mov	r0, r5
 80059f8:	460f      	mov	r7, r1
 80059fa:	f7fa fd93 	bl	8000524 <__aeabi_i2d>
 80059fe:	a376      	add	r3, pc, #472	; (adr r3, 8005bd8 <_dtoa_r+0x300>)
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f7fa fdf4 	bl	80005f0 <__aeabi_dmul>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fa fc3c 	bl	800028c <__adddf3>
 8005a14:	4606      	mov	r6, r0
 8005a16:	460f      	mov	r7, r1
 8005a18:	f7fb f89a 	bl	8000b50 <__aeabi_d2iz>
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4683      	mov	fp, r0
 8005a20:	2300      	movs	r3, #0
 8005a22:	4630      	mov	r0, r6
 8005a24:	4639      	mov	r1, r7
 8005a26:	f7fb f855 	bl	8000ad4 <__aeabi_dcmplt>
 8005a2a:	b158      	cbz	r0, 8005a44 <_dtoa_r+0x16c>
 8005a2c:	4658      	mov	r0, fp
 8005a2e:	f7fa fd79 	bl	8000524 <__aeabi_i2d>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4630      	mov	r0, r6
 8005a38:	4639      	mov	r1, r7
 8005a3a:	f7fb f841 	bl	8000ac0 <__aeabi_dcmpeq>
 8005a3e:	b908      	cbnz	r0, 8005a44 <_dtoa_r+0x16c>
 8005a40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a44:	f1bb 0f16 	cmp.w	fp, #22
 8005a48:	d859      	bhi.n	8005afe <_dtoa_r+0x226>
 8005a4a:	496a      	ldr	r1, [pc, #424]	; (8005bf4 <_dtoa_r+0x31c>)
 8005a4c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a58:	f7fb f85a 	bl	8000b10 <__aeabi_dcmpgt>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d050      	beq.n	8005b02 <_dtoa_r+0x22a>
 8005a60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a64:	2300      	movs	r3, #0
 8005a66:	930e      	str	r3, [sp, #56]	; 0x38
 8005a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a6a:	1b5d      	subs	r5, r3, r5
 8005a6c:	1e6b      	subs	r3, r5, #1
 8005a6e:	9306      	str	r3, [sp, #24]
 8005a70:	bf45      	ittet	mi
 8005a72:	f1c5 0301 	rsbmi	r3, r5, #1
 8005a76:	9305      	strmi	r3, [sp, #20]
 8005a78:	2300      	movpl	r3, #0
 8005a7a:	2300      	movmi	r3, #0
 8005a7c:	bf4c      	ite	mi
 8005a7e:	9306      	strmi	r3, [sp, #24]
 8005a80:	9305      	strpl	r3, [sp, #20]
 8005a82:	f1bb 0f00 	cmp.w	fp, #0
 8005a86:	db3e      	blt.n	8005b06 <_dtoa_r+0x22e>
 8005a88:	9b06      	ldr	r3, [sp, #24]
 8005a8a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005a8e:	445b      	add	r3, fp
 8005a90:	9306      	str	r3, [sp, #24]
 8005a92:	2300      	movs	r3, #0
 8005a94:	9308      	str	r3, [sp, #32]
 8005a96:	9b07      	ldr	r3, [sp, #28]
 8005a98:	2b09      	cmp	r3, #9
 8005a9a:	f200 80af 	bhi.w	8005bfc <_dtoa_r+0x324>
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	bfc4      	itt	gt
 8005aa2:	3b04      	subgt	r3, #4
 8005aa4:	9307      	strgt	r3, [sp, #28]
 8005aa6:	9b07      	ldr	r3, [sp, #28]
 8005aa8:	f1a3 0302 	sub.w	r3, r3, #2
 8005aac:	bfcc      	ite	gt
 8005aae:	2600      	movgt	r6, #0
 8005ab0:	2601      	movle	r6, #1
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	f200 80ae 	bhi.w	8005c14 <_dtoa_r+0x33c>
 8005ab8:	e8df f003 	tbb	[pc, r3]
 8005abc:	772f8482 	.word	0x772f8482
 8005ac0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ac2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005ac4:	441d      	add	r5, r3
 8005ac6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	dd11      	ble.n	8005af2 <_dtoa_r+0x21a>
 8005ace:	9a00      	ldr	r2, [sp, #0]
 8005ad0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005ad4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005ad8:	fa22 f000 	lsr.w	r0, r2, r0
 8005adc:	fa08 f303 	lsl.w	r3, r8, r3
 8005ae0:	4318      	orrs	r0, r3
 8005ae2:	f7fa fd0f 	bl	8000504 <__aeabi_ui2d>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005aec:	3d01      	subs	r5, #1
 8005aee:	9312      	str	r3, [sp, #72]	; 0x48
 8005af0:	e772      	b.n	80059d8 <_dtoa_r+0x100>
 8005af2:	f1c3 0020 	rsb	r0, r3, #32
 8005af6:	9b00      	ldr	r3, [sp, #0]
 8005af8:	fa03 f000 	lsl.w	r0, r3, r0
 8005afc:	e7f1      	b.n	8005ae2 <_dtoa_r+0x20a>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e7b1      	b.n	8005a66 <_dtoa_r+0x18e>
 8005b02:	900e      	str	r0, [sp, #56]	; 0x38
 8005b04:	e7b0      	b.n	8005a68 <_dtoa_r+0x190>
 8005b06:	9b05      	ldr	r3, [sp, #20]
 8005b08:	eba3 030b 	sub.w	r3, r3, fp
 8005b0c:	9305      	str	r3, [sp, #20]
 8005b0e:	f1cb 0300 	rsb	r3, fp, #0
 8005b12:	9308      	str	r3, [sp, #32]
 8005b14:	2300      	movs	r3, #0
 8005b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b18:	e7bd      	b.n	8005a96 <_dtoa_r+0x1be>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	dd7a      	ble.n	8005c1a <_dtoa_r+0x342>
 8005b24:	9304      	str	r3, [sp, #16]
 8005b26:	9303      	str	r3, [sp, #12]
 8005b28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	606a      	str	r2, [r5, #4]
 8005b2e:	2104      	movs	r1, #4
 8005b30:	f101 0214 	add.w	r2, r1, #20
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d975      	bls.n	8005c24 <_dtoa_r+0x34c>
 8005b38:	6869      	ldr	r1, [r5, #4]
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fcb0 	bl	80064a0 <_Balloc>
 8005b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b42:	6028      	str	r0, [r5, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	9302      	str	r3, [sp, #8]
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	2b0e      	cmp	r3, #14
 8005b4c:	f200 80e5 	bhi.w	8005d1a <_dtoa_r+0x442>
 8005b50:	2e00      	cmp	r6, #0
 8005b52:	f000 80e2 	beq.w	8005d1a <_dtoa_r+0x442>
 8005b56:	ed9d 7b00 	vldr	d7, [sp]
 8005b5a:	f1bb 0f00 	cmp.w	fp, #0
 8005b5e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005b62:	dd74      	ble.n	8005c4e <_dtoa_r+0x376>
 8005b64:	4a23      	ldr	r2, [pc, #140]	; (8005bf4 <_dtoa_r+0x31c>)
 8005b66:	f00b 030f 	and.w	r3, fp, #15
 8005b6a:	ea4f 162b 	mov.w	r6, fp, asr #4
 8005b6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b72:	06f0      	lsls	r0, r6, #27
 8005b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b78:	d559      	bpl.n	8005c2e <_dtoa_r+0x356>
 8005b7a:	4b1f      	ldr	r3, [pc, #124]	; (8005bf8 <_dtoa_r+0x320>)
 8005b7c:	ec51 0b17 	vmov	r0, r1, d7
 8005b80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b84:	f7fa fe5e 	bl	8000844 <__aeabi_ddiv>
 8005b88:	e9cd 0100 	strd	r0, r1, [sp]
 8005b8c:	f006 060f 	and.w	r6, r6, #15
 8005b90:	2503      	movs	r5, #3
 8005b92:	4f19      	ldr	r7, [pc, #100]	; (8005bf8 <_dtoa_r+0x320>)
 8005b94:	2e00      	cmp	r6, #0
 8005b96:	d14c      	bne.n	8005c32 <_dtoa_r+0x35a>
 8005b98:	4642      	mov	r2, r8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ba0:	f7fa fe50 	bl	8000844 <__aeabi_ddiv>
 8005ba4:	e9cd 0100 	strd	r0, r1, [sp]
 8005ba8:	e06a      	b.n	8005c80 <_dtoa_r+0x3a8>
 8005baa:	2301      	movs	r3, #1
 8005bac:	9309      	str	r3, [sp, #36]	; 0x24
 8005bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb0:	445b      	add	r3, fp
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	9303      	str	r3, [sp, #12]
 8005bba:	bfb8      	it	lt
 8005bbc:	2301      	movlt	r3, #1
 8005bbe:	e7b3      	b.n	8005b28 <_dtoa_r+0x250>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e7ab      	b.n	8005b1c <_dtoa_r+0x244>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e7f1      	b.n	8005bac <_dtoa_r+0x2d4>
 8005bc8:	636f4361 	.word	0x636f4361
 8005bcc:	3fd287a7 	.word	0x3fd287a7
 8005bd0:	8b60c8b3 	.word	0x8b60c8b3
 8005bd4:	3fc68a28 	.word	0x3fc68a28
 8005bd8:	509f79fb 	.word	0x509f79fb
 8005bdc:	3fd34413 	.word	0x3fd34413
 8005be0:	7ff00000 	.word	0x7ff00000
 8005be4:	080070c9 	.word	0x080070c9
 8005be8:	080070c0 	.word	0x080070c0
 8005bec:	0800709d 	.word	0x0800709d
 8005bf0:	3ff80000 	.word	0x3ff80000
 8005bf4:	080070f8 	.word	0x080070f8
 8005bf8:	080070d0 	.word	0x080070d0
 8005bfc:	2601      	movs	r6, #1
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9307      	str	r3, [sp, #28]
 8005c02:	9609      	str	r6, [sp, #36]	; 0x24
 8005c04:	f04f 33ff 	mov.w	r3, #4294967295
 8005c08:	9304      	str	r3, [sp, #16]
 8005c0a:	9303      	str	r3, [sp, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2312      	movs	r3, #18
 8005c10:	920a      	str	r2, [sp, #40]	; 0x28
 8005c12:	e789      	b.n	8005b28 <_dtoa_r+0x250>
 8005c14:	2301      	movs	r3, #1
 8005c16:	9309      	str	r3, [sp, #36]	; 0x24
 8005c18:	e7f4      	b.n	8005c04 <_dtoa_r+0x32c>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	9304      	str	r3, [sp, #16]
 8005c1e:	9303      	str	r3, [sp, #12]
 8005c20:	461a      	mov	r2, r3
 8005c22:	e7f5      	b.n	8005c10 <_dtoa_r+0x338>
 8005c24:	686a      	ldr	r2, [r5, #4]
 8005c26:	3201      	adds	r2, #1
 8005c28:	606a      	str	r2, [r5, #4]
 8005c2a:	0049      	lsls	r1, r1, #1
 8005c2c:	e780      	b.n	8005b30 <_dtoa_r+0x258>
 8005c2e:	2502      	movs	r5, #2
 8005c30:	e7af      	b.n	8005b92 <_dtoa_r+0x2ba>
 8005c32:	07f1      	lsls	r1, r6, #31
 8005c34:	d508      	bpl.n	8005c48 <_dtoa_r+0x370>
 8005c36:	4640      	mov	r0, r8
 8005c38:	4649      	mov	r1, r9
 8005c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c3e:	f7fa fcd7 	bl	80005f0 <__aeabi_dmul>
 8005c42:	3501      	adds	r5, #1
 8005c44:	4680      	mov	r8, r0
 8005c46:	4689      	mov	r9, r1
 8005c48:	1076      	asrs	r6, r6, #1
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	e7a2      	b.n	8005b94 <_dtoa_r+0x2bc>
 8005c4e:	f000 809d 	beq.w	8005d8c <_dtoa_r+0x4b4>
 8005c52:	f1cb 0600 	rsb	r6, fp, #0
 8005c56:	4b9f      	ldr	r3, [pc, #636]	; (8005ed4 <_dtoa_r+0x5fc>)
 8005c58:	4f9f      	ldr	r7, [pc, #636]	; (8005ed8 <_dtoa_r+0x600>)
 8005c5a:	f006 020f 	and.w	r2, r6, #15
 8005c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c6a:	f7fa fcc1 	bl	80005f0 <__aeabi_dmul>
 8005c6e:	e9cd 0100 	strd	r0, r1, [sp]
 8005c72:	1136      	asrs	r6, r6, #4
 8005c74:	2300      	movs	r3, #0
 8005c76:	2502      	movs	r5, #2
 8005c78:	2e00      	cmp	r6, #0
 8005c7a:	d17c      	bne.n	8005d76 <_dtoa_r+0x49e>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d191      	bne.n	8005ba4 <_dtoa_r+0x2cc>
 8005c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8084 	beq.w	8005d90 <_dtoa_r+0x4b8>
 8005c88:	e9dd 8900 	ldrd	r8, r9, [sp]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4b93      	ldr	r3, [pc, #588]	; (8005edc <_dtoa_r+0x604>)
 8005c90:	4640      	mov	r0, r8
 8005c92:	4649      	mov	r1, r9
 8005c94:	f7fa ff1e 	bl	8000ad4 <__aeabi_dcmplt>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d079      	beq.n	8005d90 <_dtoa_r+0x4b8>
 8005c9c:	9b03      	ldr	r3, [sp, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d076      	beq.n	8005d90 <_dtoa_r+0x4b8>
 8005ca2:	9b04      	ldr	r3, [sp, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dd34      	ble.n	8005d12 <_dtoa_r+0x43a>
 8005ca8:	2200      	movs	r2, #0
 8005caa:	4b8d      	ldr	r3, [pc, #564]	; (8005ee0 <_dtoa_r+0x608>)
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	f7fa fc9e 	bl	80005f0 <__aeabi_dmul>
 8005cb4:	e9cd 0100 	strd	r0, r1, [sp]
 8005cb8:	9e04      	ldr	r6, [sp, #16]
 8005cba:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005cbe:	3501      	adds	r5, #1
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	f7fa fc2f 	bl	8000524 <__aeabi_i2d>
 8005cc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cca:	f7fa fc91 	bl	80005f0 <__aeabi_dmul>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	4b84      	ldr	r3, [pc, #528]	; (8005ee4 <_dtoa_r+0x60c>)
 8005cd2:	f7fa fadb 	bl	800028c <__adddf3>
 8005cd6:	4680      	mov	r8, r0
 8005cd8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005cdc:	2e00      	cmp	r6, #0
 8005cde:	d15a      	bne.n	8005d96 <_dtoa_r+0x4be>
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	4b81      	ldr	r3, [pc, #516]	; (8005ee8 <_dtoa_r+0x610>)
 8005ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ce8:	f7fa face 	bl	8000288 <__aeabi_dsub>
 8005cec:	4642      	mov	r2, r8
 8005cee:	464b      	mov	r3, r9
 8005cf0:	e9cd 0100 	strd	r0, r1, [sp]
 8005cf4:	f7fa ff0c 	bl	8000b10 <__aeabi_dcmpgt>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	f040 829b 	bne.w	8006234 <_dtoa_r+0x95c>
 8005cfe:	4642      	mov	r2, r8
 8005d00:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d08:	f7fa fee4 	bl	8000ad4 <__aeabi_dcmplt>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f040 828f 	bne.w	8006230 <_dtoa_r+0x958>
 8005d12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d16:	e9cd 2300 	strd	r2, r3, [sp]
 8005d1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f2c0 8150 	blt.w	8005fc2 <_dtoa_r+0x6ea>
 8005d22:	f1bb 0f0e 	cmp.w	fp, #14
 8005d26:	f300 814c 	bgt.w	8005fc2 <_dtoa_r+0x6ea>
 8005d2a:	4b6a      	ldr	r3, [pc, #424]	; (8005ed4 <_dtoa_r+0x5fc>)
 8005d2c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f280 80da 	bge.w	8005ef0 <_dtoa_r+0x618>
 8005d3c:	9b03      	ldr	r3, [sp, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f300 80d6 	bgt.w	8005ef0 <_dtoa_r+0x618>
 8005d44:	f040 8273 	bne.w	800622e <_dtoa_r+0x956>
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4b67      	ldr	r3, [pc, #412]	; (8005ee8 <_dtoa_r+0x610>)
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	4649      	mov	r1, r9
 8005d50:	f7fa fc4e 	bl	80005f0 <__aeabi_dmul>
 8005d54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d58:	f7fa fed0 	bl	8000afc <__aeabi_dcmpge>
 8005d5c:	9e03      	ldr	r6, [sp, #12]
 8005d5e:	4637      	mov	r7, r6
 8005d60:	2800      	cmp	r0, #0
 8005d62:	f040 824a 	bne.w	80061fa <_dtoa_r+0x922>
 8005d66:	9b02      	ldr	r3, [sp, #8]
 8005d68:	9a02      	ldr	r2, [sp, #8]
 8005d6a:	1c5d      	adds	r5, r3, #1
 8005d6c:	2331      	movs	r3, #49	; 0x31
 8005d6e:	7013      	strb	r3, [r2, #0]
 8005d70:	f10b 0b01 	add.w	fp, fp, #1
 8005d74:	e245      	b.n	8006202 <_dtoa_r+0x92a>
 8005d76:	07f2      	lsls	r2, r6, #31
 8005d78:	d505      	bpl.n	8005d86 <_dtoa_r+0x4ae>
 8005d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d7e:	f7fa fc37 	bl	80005f0 <__aeabi_dmul>
 8005d82:	3501      	adds	r5, #1
 8005d84:	2301      	movs	r3, #1
 8005d86:	1076      	asrs	r6, r6, #1
 8005d88:	3708      	adds	r7, #8
 8005d8a:	e775      	b.n	8005c78 <_dtoa_r+0x3a0>
 8005d8c:	2502      	movs	r5, #2
 8005d8e:	e777      	b.n	8005c80 <_dtoa_r+0x3a8>
 8005d90:	465f      	mov	r7, fp
 8005d92:	9e03      	ldr	r6, [sp, #12]
 8005d94:	e794      	b.n	8005cc0 <_dtoa_r+0x3e8>
 8005d96:	9a02      	ldr	r2, [sp, #8]
 8005d98:	4b4e      	ldr	r3, [pc, #312]	; (8005ed4 <_dtoa_r+0x5fc>)
 8005d9a:	4432      	add	r2, r6
 8005d9c:	9213      	str	r2, [sp, #76]	; 0x4c
 8005d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005da0:	1e71      	subs	r1, r6, #1
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	d048      	beq.n	8005e38 <_dtoa_r+0x560>
 8005da6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	2000      	movs	r0, #0
 8005db0:	494e      	ldr	r1, [pc, #312]	; (8005eec <_dtoa_r+0x614>)
 8005db2:	f7fa fd47 	bl	8000844 <__aeabi_ddiv>
 8005db6:	4642      	mov	r2, r8
 8005db8:	464b      	mov	r3, r9
 8005dba:	f7fa fa65 	bl	8000288 <__aeabi_dsub>
 8005dbe:	9d02      	ldr	r5, [sp, #8]
 8005dc0:	4680      	mov	r8, r0
 8005dc2:	4689      	mov	r9, r1
 8005dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dc8:	f7fa fec2 	bl	8000b50 <__aeabi_d2iz>
 8005dcc:	4606      	mov	r6, r0
 8005dce:	f7fa fba9 	bl	8000524 <__aeabi_i2d>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dda:	f7fa fa55 	bl	8000288 <__aeabi_dsub>
 8005dde:	3630      	adds	r6, #48	; 0x30
 8005de0:	f805 6b01 	strb.w	r6, [r5], #1
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	e9cd 0100 	strd	r0, r1, [sp]
 8005dec:	f7fa fe72 	bl	8000ad4 <__aeabi_dcmplt>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d165      	bne.n	8005ec0 <_dtoa_r+0x5e8>
 8005df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005df8:	2000      	movs	r0, #0
 8005dfa:	4938      	ldr	r1, [pc, #224]	; (8005edc <_dtoa_r+0x604>)
 8005dfc:	f7fa fa44 	bl	8000288 <__aeabi_dsub>
 8005e00:	4642      	mov	r2, r8
 8005e02:	464b      	mov	r3, r9
 8005e04:	f7fa fe66 	bl	8000ad4 <__aeabi_dcmplt>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	f040 80ba 	bne.w	8005f82 <_dtoa_r+0x6aa>
 8005e0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e10:	429d      	cmp	r5, r3
 8005e12:	f43f af7e 	beq.w	8005d12 <_dtoa_r+0x43a>
 8005e16:	2200      	movs	r2, #0
 8005e18:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <_dtoa_r+0x608>)
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	f7fa fbe7 	bl	80005f0 <__aeabi_dmul>
 8005e22:	2200      	movs	r2, #0
 8005e24:	4680      	mov	r8, r0
 8005e26:	4689      	mov	r9, r1
 8005e28:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <_dtoa_r+0x608>)
 8005e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e2e:	f7fa fbdf 	bl	80005f0 <__aeabi_dmul>
 8005e32:	e9cd 0100 	strd	r0, r1, [sp]
 8005e36:	e7c5      	b.n	8005dc4 <_dtoa_r+0x4ec>
 8005e38:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	464b      	mov	r3, r9
 8005e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e44:	f7fa fbd4 	bl	80005f0 <__aeabi_dmul>
 8005e48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e4c:	9d02      	ldr	r5, [sp, #8]
 8005e4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e52:	f7fa fe7d 	bl	8000b50 <__aeabi_d2iz>
 8005e56:	4606      	mov	r6, r0
 8005e58:	f7fa fb64 	bl	8000524 <__aeabi_i2d>
 8005e5c:	3630      	adds	r6, #48	; 0x30
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e66:	f7fa fa0f 	bl	8000288 <__aeabi_dsub>
 8005e6a:	f805 6b01 	strb.w	r6, [r5], #1
 8005e6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	4680      	mov	r8, r0
 8005e74:	4689      	mov	r9, r1
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	d125      	bne.n	8005ec8 <_dtoa_r+0x5f0>
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <_dtoa_r+0x614>)
 8005e7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e82:	f7fa fa03 	bl	800028c <__adddf3>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	f7fa fe3f 	bl	8000b10 <__aeabi_dcmpgt>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d175      	bne.n	8005f82 <_dtoa_r+0x6aa>
 8005e96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	4913      	ldr	r1, [pc, #76]	; (8005eec <_dtoa_r+0x614>)
 8005e9e:	f7fa f9f3 	bl	8000288 <__aeabi_dsub>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	f7fa fe13 	bl	8000ad4 <__aeabi_dcmplt>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	f43f af2f 	beq.w	8005d12 <_dtoa_r+0x43a>
 8005eb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005eb8:	2b30      	cmp	r3, #48	; 0x30
 8005eba:	f105 32ff 	add.w	r2, r5, #4294967295
 8005ebe:	d001      	beq.n	8005ec4 <_dtoa_r+0x5ec>
 8005ec0:	46bb      	mov	fp, r7
 8005ec2:	e04d      	b.n	8005f60 <_dtoa_r+0x688>
 8005ec4:	4615      	mov	r5, r2
 8005ec6:	e7f5      	b.n	8005eb4 <_dtoa_r+0x5dc>
 8005ec8:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <_dtoa_r+0x608>)
 8005eca:	f7fa fb91 	bl	80005f0 <__aeabi_dmul>
 8005ece:	e9cd 0100 	strd	r0, r1, [sp]
 8005ed2:	e7bc      	b.n	8005e4e <_dtoa_r+0x576>
 8005ed4:	080070f8 	.word	0x080070f8
 8005ed8:	080070d0 	.word	0x080070d0
 8005edc:	3ff00000 	.word	0x3ff00000
 8005ee0:	40240000 	.word	0x40240000
 8005ee4:	401c0000 	.word	0x401c0000
 8005ee8:	40140000 	.word	0x40140000
 8005eec:	3fe00000 	.word	0x3fe00000
 8005ef0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005ef4:	9d02      	ldr	r5, [sp, #8]
 8005ef6:	4642      	mov	r2, r8
 8005ef8:	464b      	mov	r3, r9
 8005efa:	4630      	mov	r0, r6
 8005efc:	4639      	mov	r1, r7
 8005efe:	f7fa fca1 	bl	8000844 <__aeabi_ddiv>
 8005f02:	f7fa fe25 	bl	8000b50 <__aeabi_d2iz>
 8005f06:	9000      	str	r0, [sp, #0]
 8005f08:	f7fa fb0c 	bl	8000524 <__aeabi_i2d>
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	464b      	mov	r3, r9
 8005f10:	f7fa fb6e 	bl	80005f0 <__aeabi_dmul>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4630      	mov	r0, r6
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	f7fa f9b4 	bl	8000288 <__aeabi_dsub>
 8005f20:	9e00      	ldr	r6, [sp, #0]
 8005f22:	9f03      	ldr	r7, [sp, #12]
 8005f24:	3630      	adds	r6, #48	; 0x30
 8005f26:	f805 6b01 	strb.w	r6, [r5], #1
 8005f2a:	9e02      	ldr	r6, [sp, #8]
 8005f2c:	1bae      	subs	r6, r5, r6
 8005f2e:	42b7      	cmp	r7, r6
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	d138      	bne.n	8005fa8 <_dtoa_r+0x6d0>
 8005f36:	f7fa f9a9 	bl	800028c <__adddf3>
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	460f      	mov	r7, r1
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4640      	mov	r0, r8
 8005f44:	4649      	mov	r1, r9
 8005f46:	f7fa fdc5 	bl	8000ad4 <__aeabi_dcmplt>
 8005f4a:	b9c8      	cbnz	r0, 8005f80 <_dtoa_r+0x6a8>
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	463b      	mov	r3, r7
 8005f50:	4640      	mov	r0, r8
 8005f52:	4649      	mov	r1, r9
 8005f54:	f7fa fdb4 	bl	8000ac0 <__aeabi_dcmpeq>
 8005f58:	b110      	cbz	r0, 8005f60 <_dtoa_r+0x688>
 8005f5a:	9b00      	ldr	r3, [sp, #0]
 8005f5c:	07db      	lsls	r3, r3, #31
 8005f5e:	d40f      	bmi.n	8005f80 <_dtoa_r+0x6a8>
 8005f60:	4651      	mov	r1, sl
 8005f62:	4620      	mov	r0, r4
 8005f64:	f000 fad0 	bl	8006508 <_Bfree>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f6c:	702b      	strb	r3, [r5, #0]
 8005f6e:	f10b 0301 	add.w	r3, fp, #1
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f43f acf8 	beq.w	800596c <_dtoa_r+0x94>
 8005f7c:	601d      	str	r5, [r3, #0]
 8005f7e:	e4f5      	b.n	800596c <_dtoa_r+0x94>
 8005f80:	465f      	mov	r7, fp
 8005f82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f86:	2a39      	cmp	r2, #57	; 0x39
 8005f88:	f105 33ff 	add.w	r3, r5, #4294967295
 8005f8c:	d106      	bne.n	8005f9c <_dtoa_r+0x6c4>
 8005f8e:	9a02      	ldr	r2, [sp, #8]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d107      	bne.n	8005fa4 <_dtoa_r+0x6cc>
 8005f94:	2330      	movs	r3, #48	; 0x30
 8005f96:	7013      	strb	r3, [r2, #0]
 8005f98:	3701      	adds	r7, #1
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	3201      	adds	r2, #1
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e78d      	b.n	8005ec0 <_dtoa_r+0x5e8>
 8005fa4:	461d      	mov	r5, r3
 8005fa6:	e7ec      	b.n	8005f82 <_dtoa_r+0x6aa>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4ba4      	ldr	r3, [pc, #656]	; (800623c <_dtoa_r+0x964>)
 8005fac:	f7fa fb20 	bl	80005f0 <__aeabi_dmul>
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	460f      	mov	r7, r1
 8005fb8:	f7fa fd82 	bl	8000ac0 <__aeabi_dcmpeq>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d09a      	beq.n	8005ef6 <_dtoa_r+0x61e>
 8005fc0:	e7ce      	b.n	8005f60 <_dtoa_r+0x688>
 8005fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc4:	2a00      	cmp	r2, #0
 8005fc6:	f000 80cd 	beq.w	8006164 <_dtoa_r+0x88c>
 8005fca:	9a07      	ldr	r2, [sp, #28]
 8005fcc:	2a01      	cmp	r2, #1
 8005fce:	f300 80af 	bgt.w	8006130 <_dtoa_r+0x858>
 8005fd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fd4:	2a00      	cmp	r2, #0
 8005fd6:	f000 80a7 	beq.w	8006128 <_dtoa_r+0x850>
 8005fda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005fde:	9e08      	ldr	r6, [sp, #32]
 8005fe0:	9d05      	ldr	r5, [sp, #20]
 8005fe2:	9a05      	ldr	r2, [sp, #20]
 8005fe4:	441a      	add	r2, r3
 8005fe6:	9205      	str	r2, [sp, #20]
 8005fe8:	9a06      	ldr	r2, [sp, #24]
 8005fea:	2101      	movs	r1, #1
 8005fec:	441a      	add	r2, r3
 8005fee:	4620      	mov	r0, r4
 8005ff0:	9206      	str	r2, [sp, #24]
 8005ff2:	f000 fb29 	bl	8006648 <__i2b>
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	dd0c      	ble.n	8006016 <_dtoa_r+0x73e>
 8005ffc:	9b06      	ldr	r3, [sp, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	dd09      	ble.n	8006016 <_dtoa_r+0x73e>
 8006002:	42ab      	cmp	r3, r5
 8006004:	9a05      	ldr	r2, [sp, #20]
 8006006:	bfa8      	it	ge
 8006008:	462b      	movge	r3, r5
 800600a:	1ad2      	subs	r2, r2, r3
 800600c:	9205      	str	r2, [sp, #20]
 800600e:	9a06      	ldr	r2, [sp, #24]
 8006010:	1aed      	subs	r5, r5, r3
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	9306      	str	r3, [sp, #24]
 8006016:	9b08      	ldr	r3, [sp, #32]
 8006018:	b1f3      	cbz	r3, 8006058 <_dtoa_r+0x780>
 800601a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80a5 	beq.w	800616c <_dtoa_r+0x894>
 8006022:	2e00      	cmp	r6, #0
 8006024:	dd10      	ble.n	8006048 <_dtoa_r+0x770>
 8006026:	4639      	mov	r1, r7
 8006028:	4632      	mov	r2, r6
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fba2 	bl	8006774 <__pow5mult>
 8006030:	4652      	mov	r2, sl
 8006032:	4601      	mov	r1, r0
 8006034:	4607      	mov	r7, r0
 8006036:	4620      	mov	r0, r4
 8006038:	f000 fb0f 	bl	800665a <__multiply>
 800603c:	4651      	mov	r1, sl
 800603e:	4680      	mov	r8, r0
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fa61 	bl	8006508 <_Bfree>
 8006046:	46c2      	mov	sl, r8
 8006048:	9b08      	ldr	r3, [sp, #32]
 800604a:	1b9a      	subs	r2, r3, r6
 800604c:	d004      	beq.n	8006058 <_dtoa_r+0x780>
 800604e:	4651      	mov	r1, sl
 8006050:	4620      	mov	r0, r4
 8006052:	f000 fb8f 	bl	8006774 <__pow5mult>
 8006056:	4682      	mov	sl, r0
 8006058:	2101      	movs	r1, #1
 800605a:	4620      	mov	r0, r4
 800605c:	f000 faf4 	bl	8006648 <__i2b>
 8006060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	4606      	mov	r6, r0
 8006066:	f340 8083 	ble.w	8006170 <_dtoa_r+0x898>
 800606a:	461a      	mov	r2, r3
 800606c:	4601      	mov	r1, r0
 800606e:	4620      	mov	r0, r4
 8006070:	f000 fb80 	bl	8006774 <__pow5mult>
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	2b01      	cmp	r3, #1
 8006078:	4606      	mov	r6, r0
 800607a:	dd7c      	ble.n	8006176 <_dtoa_r+0x89e>
 800607c:	f04f 0800 	mov.w	r8, #0
 8006080:	6933      	ldr	r3, [r6, #16]
 8006082:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006086:	6918      	ldr	r0, [r3, #16]
 8006088:	f000 fa90 	bl	80065ac <__hi0bits>
 800608c:	f1c0 0020 	rsb	r0, r0, #32
 8006090:	9b06      	ldr	r3, [sp, #24]
 8006092:	4418      	add	r0, r3
 8006094:	f010 001f 	ands.w	r0, r0, #31
 8006098:	f000 8096 	beq.w	80061c8 <_dtoa_r+0x8f0>
 800609c:	f1c0 0320 	rsb	r3, r0, #32
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	f340 8087 	ble.w	80061b4 <_dtoa_r+0x8dc>
 80060a6:	9b05      	ldr	r3, [sp, #20]
 80060a8:	f1c0 001c 	rsb	r0, r0, #28
 80060ac:	4403      	add	r3, r0
 80060ae:	9305      	str	r3, [sp, #20]
 80060b0:	9b06      	ldr	r3, [sp, #24]
 80060b2:	4405      	add	r5, r0
 80060b4:	4403      	add	r3, r0
 80060b6:	9306      	str	r3, [sp, #24]
 80060b8:	9b05      	ldr	r3, [sp, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dd05      	ble.n	80060ca <_dtoa_r+0x7f2>
 80060be:	4651      	mov	r1, sl
 80060c0:	461a      	mov	r2, r3
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 fba4 	bl	8006810 <__lshift>
 80060c8:	4682      	mov	sl, r0
 80060ca:	9b06      	ldr	r3, [sp, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dd05      	ble.n	80060dc <_dtoa_r+0x804>
 80060d0:	4631      	mov	r1, r6
 80060d2:	461a      	mov	r2, r3
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 fb9b 	bl	8006810 <__lshift>
 80060da:	4606      	mov	r6, r0
 80060dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d074      	beq.n	80061cc <_dtoa_r+0x8f4>
 80060e2:	4631      	mov	r1, r6
 80060e4:	4650      	mov	r0, sl
 80060e6:	f000 fbe4 	bl	80068b2 <__mcmp>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	da6e      	bge.n	80061cc <_dtoa_r+0x8f4>
 80060ee:	2300      	movs	r3, #0
 80060f0:	4651      	mov	r1, sl
 80060f2:	220a      	movs	r2, #10
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 fa1e 	bl	8006536 <__multadd>
 80060fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006100:	4682      	mov	sl, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 81a8 	beq.w	8006458 <_dtoa_r+0xb80>
 8006108:	2300      	movs	r3, #0
 800610a:	4639      	mov	r1, r7
 800610c:	220a      	movs	r2, #10
 800610e:	4620      	mov	r0, r4
 8006110:	f000 fa11 	bl	8006536 <__multadd>
 8006114:	9b04      	ldr	r3, [sp, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	4607      	mov	r7, r0
 800611a:	f300 80c8 	bgt.w	80062ae <_dtoa_r+0x9d6>
 800611e:	9b07      	ldr	r3, [sp, #28]
 8006120:	2b02      	cmp	r3, #2
 8006122:	f340 80c4 	ble.w	80062ae <_dtoa_r+0x9d6>
 8006126:	e059      	b.n	80061dc <_dtoa_r+0x904>
 8006128:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800612a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800612e:	e756      	b.n	8005fde <_dtoa_r+0x706>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	1e5e      	subs	r6, r3, #1
 8006134:	9b08      	ldr	r3, [sp, #32]
 8006136:	42b3      	cmp	r3, r6
 8006138:	bfbf      	itttt	lt
 800613a:	9b08      	ldrlt	r3, [sp, #32]
 800613c:	9608      	strlt	r6, [sp, #32]
 800613e:	1af2      	sublt	r2, r6, r3
 8006140:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006142:	bfb6      	itet	lt
 8006144:	189b      	addlt	r3, r3, r2
 8006146:	1b9e      	subge	r6, r3, r6
 8006148:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	bfb8      	it	lt
 800614e:	2600      	movlt	r6, #0
 8006150:	2b00      	cmp	r3, #0
 8006152:	bfb9      	ittee	lt
 8006154:	9b05      	ldrlt	r3, [sp, #20]
 8006156:	9a03      	ldrlt	r2, [sp, #12]
 8006158:	9d05      	ldrge	r5, [sp, #20]
 800615a:	9b03      	ldrge	r3, [sp, #12]
 800615c:	bfbc      	itt	lt
 800615e:	1a9d      	sublt	r5, r3, r2
 8006160:	2300      	movlt	r3, #0
 8006162:	e73e      	b.n	8005fe2 <_dtoa_r+0x70a>
 8006164:	9e08      	ldr	r6, [sp, #32]
 8006166:	9d05      	ldr	r5, [sp, #20]
 8006168:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800616a:	e745      	b.n	8005ff8 <_dtoa_r+0x720>
 800616c:	9a08      	ldr	r2, [sp, #32]
 800616e:	e76e      	b.n	800604e <_dtoa_r+0x776>
 8006170:	9b07      	ldr	r3, [sp, #28]
 8006172:	2b01      	cmp	r3, #1
 8006174:	dc19      	bgt.n	80061aa <_dtoa_r+0x8d2>
 8006176:	9b00      	ldr	r3, [sp, #0]
 8006178:	b9bb      	cbnz	r3, 80061aa <_dtoa_r+0x8d2>
 800617a:	9b01      	ldr	r3, [sp, #4]
 800617c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006180:	b99b      	cbnz	r3, 80061aa <_dtoa_r+0x8d2>
 8006182:	9b01      	ldr	r3, [sp, #4]
 8006184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006188:	0d1b      	lsrs	r3, r3, #20
 800618a:	051b      	lsls	r3, r3, #20
 800618c:	b183      	cbz	r3, 80061b0 <_dtoa_r+0x8d8>
 800618e:	9b05      	ldr	r3, [sp, #20]
 8006190:	3301      	adds	r3, #1
 8006192:	9305      	str	r3, [sp, #20]
 8006194:	9b06      	ldr	r3, [sp, #24]
 8006196:	3301      	adds	r3, #1
 8006198:	9306      	str	r3, [sp, #24]
 800619a:	f04f 0801 	mov.w	r8, #1
 800619e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f47f af6d 	bne.w	8006080 <_dtoa_r+0x7a8>
 80061a6:	2001      	movs	r0, #1
 80061a8:	e772      	b.n	8006090 <_dtoa_r+0x7b8>
 80061aa:	f04f 0800 	mov.w	r8, #0
 80061ae:	e7f6      	b.n	800619e <_dtoa_r+0x8c6>
 80061b0:	4698      	mov	r8, r3
 80061b2:	e7f4      	b.n	800619e <_dtoa_r+0x8c6>
 80061b4:	d080      	beq.n	80060b8 <_dtoa_r+0x7e0>
 80061b6:	9a05      	ldr	r2, [sp, #20]
 80061b8:	331c      	adds	r3, #28
 80061ba:	441a      	add	r2, r3
 80061bc:	9205      	str	r2, [sp, #20]
 80061be:	9a06      	ldr	r2, [sp, #24]
 80061c0:	441a      	add	r2, r3
 80061c2:	441d      	add	r5, r3
 80061c4:	4613      	mov	r3, r2
 80061c6:	e776      	b.n	80060b6 <_dtoa_r+0x7de>
 80061c8:	4603      	mov	r3, r0
 80061ca:	e7f4      	b.n	80061b6 <_dtoa_r+0x8de>
 80061cc:	9b03      	ldr	r3, [sp, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dc36      	bgt.n	8006240 <_dtoa_r+0x968>
 80061d2:	9b07      	ldr	r3, [sp, #28]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	dd33      	ble.n	8006240 <_dtoa_r+0x968>
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	9b04      	ldr	r3, [sp, #16]
 80061de:	b963      	cbnz	r3, 80061fa <_dtoa_r+0x922>
 80061e0:	4631      	mov	r1, r6
 80061e2:	2205      	movs	r2, #5
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 f9a6 	bl	8006536 <__multadd>
 80061ea:	4601      	mov	r1, r0
 80061ec:	4606      	mov	r6, r0
 80061ee:	4650      	mov	r0, sl
 80061f0:	f000 fb5f 	bl	80068b2 <__mcmp>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f73f adb6 	bgt.w	8005d66 <_dtoa_r+0x48e>
 80061fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061fc:	9d02      	ldr	r5, [sp, #8]
 80061fe:	ea6f 0b03 	mvn.w	fp, r3
 8006202:	2300      	movs	r3, #0
 8006204:	9303      	str	r3, [sp, #12]
 8006206:	4631      	mov	r1, r6
 8006208:	4620      	mov	r0, r4
 800620a:	f000 f97d 	bl	8006508 <_Bfree>
 800620e:	2f00      	cmp	r7, #0
 8006210:	f43f aea6 	beq.w	8005f60 <_dtoa_r+0x688>
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	b12b      	cbz	r3, 8006224 <_dtoa_r+0x94c>
 8006218:	42bb      	cmp	r3, r7
 800621a:	d003      	beq.n	8006224 <_dtoa_r+0x94c>
 800621c:	4619      	mov	r1, r3
 800621e:	4620      	mov	r0, r4
 8006220:	f000 f972 	bl	8006508 <_Bfree>
 8006224:	4639      	mov	r1, r7
 8006226:	4620      	mov	r0, r4
 8006228:	f000 f96e 	bl	8006508 <_Bfree>
 800622c:	e698      	b.n	8005f60 <_dtoa_r+0x688>
 800622e:	2600      	movs	r6, #0
 8006230:	4637      	mov	r7, r6
 8006232:	e7e2      	b.n	80061fa <_dtoa_r+0x922>
 8006234:	46bb      	mov	fp, r7
 8006236:	4637      	mov	r7, r6
 8006238:	e595      	b.n	8005d66 <_dtoa_r+0x48e>
 800623a:	bf00      	nop
 800623c:	40240000 	.word	0x40240000
 8006240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006242:	bb93      	cbnz	r3, 80062aa <_dtoa_r+0x9d2>
 8006244:	9b03      	ldr	r3, [sp, #12]
 8006246:	9304      	str	r3, [sp, #16]
 8006248:	9d02      	ldr	r5, [sp, #8]
 800624a:	4631      	mov	r1, r6
 800624c:	4650      	mov	r0, sl
 800624e:	f7ff fab5 	bl	80057bc <quorem>
 8006252:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006256:	f805 9b01 	strb.w	r9, [r5], #1
 800625a:	9b02      	ldr	r3, [sp, #8]
 800625c:	9a04      	ldr	r2, [sp, #16]
 800625e:	1aeb      	subs	r3, r5, r3
 8006260:	429a      	cmp	r2, r3
 8006262:	f300 80dc 	bgt.w	800641e <_dtoa_r+0xb46>
 8006266:	9b02      	ldr	r3, [sp, #8]
 8006268:	2a01      	cmp	r2, #1
 800626a:	bfac      	ite	ge
 800626c:	189b      	addge	r3, r3, r2
 800626e:	3301      	addlt	r3, #1
 8006270:	4698      	mov	r8, r3
 8006272:	2300      	movs	r3, #0
 8006274:	9303      	str	r3, [sp, #12]
 8006276:	4651      	mov	r1, sl
 8006278:	2201      	movs	r2, #1
 800627a:	4620      	mov	r0, r4
 800627c:	f000 fac8 	bl	8006810 <__lshift>
 8006280:	4631      	mov	r1, r6
 8006282:	4682      	mov	sl, r0
 8006284:	f000 fb15 	bl	80068b2 <__mcmp>
 8006288:	2800      	cmp	r0, #0
 800628a:	f300 808d 	bgt.w	80063a8 <_dtoa_r+0xad0>
 800628e:	d103      	bne.n	8006298 <_dtoa_r+0x9c0>
 8006290:	f019 0f01 	tst.w	r9, #1
 8006294:	f040 8088 	bne.w	80063a8 <_dtoa_r+0xad0>
 8006298:	4645      	mov	r5, r8
 800629a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800629e:	2b30      	cmp	r3, #48	; 0x30
 80062a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80062a4:	d1af      	bne.n	8006206 <_dtoa_r+0x92e>
 80062a6:	4615      	mov	r5, r2
 80062a8:	e7f7      	b.n	800629a <_dtoa_r+0x9c2>
 80062aa:	9b03      	ldr	r3, [sp, #12]
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	dd05      	ble.n	80062be <_dtoa_r+0x9e6>
 80062b2:	4639      	mov	r1, r7
 80062b4:	462a      	mov	r2, r5
 80062b6:	4620      	mov	r0, r4
 80062b8:	f000 faaa 	bl	8006810 <__lshift>
 80062bc:	4607      	mov	r7, r0
 80062be:	f1b8 0f00 	cmp.w	r8, #0
 80062c2:	d04c      	beq.n	800635e <_dtoa_r+0xa86>
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 f8ea 	bl	80064a0 <_Balloc>
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	3202      	adds	r2, #2
 80062d0:	4605      	mov	r5, r0
 80062d2:	0092      	lsls	r2, r2, #2
 80062d4:	f107 010c 	add.w	r1, r7, #12
 80062d8:	300c      	adds	r0, #12
 80062da:	f7fe fdcb 	bl	8004e74 <memcpy>
 80062de:	2201      	movs	r2, #1
 80062e0:	4629      	mov	r1, r5
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 fa94 	bl	8006810 <__lshift>
 80062e8:	9b00      	ldr	r3, [sp, #0]
 80062ea:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80062ee:	9703      	str	r7, [sp, #12]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	4607      	mov	r7, r0
 80062f6:	9305      	str	r3, [sp, #20]
 80062f8:	4631      	mov	r1, r6
 80062fa:	4650      	mov	r0, sl
 80062fc:	f7ff fa5e 	bl	80057bc <quorem>
 8006300:	9903      	ldr	r1, [sp, #12]
 8006302:	4605      	mov	r5, r0
 8006304:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006308:	4650      	mov	r0, sl
 800630a:	f000 fad2 	bl	80068b2 <__mcmp>
 800630e:	463a      	mov	r2, r7
 8006310:	9000      	str	r0, [sp, #0]
 8006312:	4631      	mov	r1, r6
 8006314:	4620      	mov	r0, r4
 8006316:	f000 fae6 	bl	80068e6 <__mdiff>
 800631a:	68c3      	ldr	r3, [r0, #12]
 800631c:	4602      	mov	r2, r0
 800631e:	bb03      	cbnz	r3, 8006362 <_dtoa_r+0xa8a>
 8006320:	4601      	mov	r1, r0
 8006322:	9006      	str	r0, [sp, #24]
 8006324:	4650      	mov	r0, sl
 8006326:	f000 fac4 	bl	80068b2 <__mcmp>
 800632a:	9a06      	ldr	r2, [sp, #24]
 800632c:	4603      	mov	r3, r0
 800632e:	4611      	mov	r1, r2
 8006330:	4620      	mov	r0, r4
 8006332:	9306      	str	r3, [sp, #24]
 8006334:	f000 f8e8 	bl	8006508 <_Bfree>
 8006338:	9b06      	ldr	r3, [sp, #24]
 800633a:	b9a3      	cbnz	r3, 8006366 <_dtoa_r+0xa8e>
 800633c:	9a07      	ldr	r2, [sp, #28]
 800633e:	b992      	cbnz	r2, 8006366 <_dtoa_r+0xa8e>
 8006340:	9a05      	ldr	r2, [sp, #20]
 8006342:	b982      	cbnz	r2, 8006366 <_dtoa_r+0xa8e>
 8006344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006348:	d029      	beq.n	800639e <_dtoa_r+0xac6>
 800634a:	9b00      	ldr	r3, [sp, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	dd01      	ble.n	8006354 <_dtoa_r+0xa7c>
 8006350:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006354:	f108 0501 	add.w	r5, r8, #1
 8006358:	f888 9000 	strb.w	r9, [r8]
 800635c:	e753      	b.n	8006206 <_dtoa_r+0x92e>
 800635e:	4638      	mov	r0, r7
 8006360:	e7c2      	b.n	80062e8 <_dtoa_r+0xa10>
 8006362:	2301      	movs	r3, #1
 8006364:	e7e3      	b.n	800632e <_dtoa_r+0xa56>
 8006366:	9a00      	ldr	r2, [sp, #0]
 8006368:	2a00      	cmp	r2, #0
 800636a:	db04      	blt.n	8006376 <_dtoa_r+0xa9e>
 800636c:	d125      	bne.n	80063ba <_dtoa_r+0xae2>
 800636e:	9a07      	ldr	r2, [sp, #28]
 8006370:	bb1a      	cbnz	r2, 80063ba <_dtoa_r+0xae2>
 8006372:	9a05      	ldr	r2, [sp, #20]
 8006374:	bb0a      	cbnz	r2, 80063ba <_dtoa_r+0xae2>
 8006376:	2b00      	cmp	r3, #0
 8006378:	ddec      	ble.n	8006354 <_dtoa_r+0xa7c>
 800637a:	4651      	mov	r1, sl
 800637c:	2201      	movs	r2, #1
 800637e:	4620      	mov	r0, r4
 8006380:	f000 fa46 	bl	8006810 <__lshift>
 8006384:	4631      	mov	r1, r6
 8006386:	4682      	mov	sl, r0
 8006388:	f000 fa93 	bl	80068b2 <__mcmp>
 800638c:	2800      	cmp	r0, #0
 800638e:	dc03      	bgt.n	8006398 <_dtoa_r+0xac0>
 8006390:	d1e0      	bne.n	8006354 <_dtoa_r+0xa7c>
 8006392:	f019 0f01 	tst.w	r9, #1
 8006396:	d0dd      	beq.n	8006354 <_dtoa_r+0xa7c>
 8006398:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800639c:	d1d8      	bne.n	8006350 <_dtoa_r+0xa78>
 800639e:	2339      	movs	r3, #57	; 0x39
 80063a0:	f888 3000 	strb.w	r3, [r8]
 80063a4:	f108 0801 	add.w	r8, r8, #1
 80063a8:	4645      	mov	r5, r8
 80063aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063ae:	2b39      	cmp	r3, #57	; 0x39
 80063b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80063b4:	d03b      	beq.n	800642e <_dtoa_r+0xb56>
 80063b6:	3301      	adds	r3, #1
 80063b8:	e040      	b.n	800643c <_dtoa_r+0xb64>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f108 0501 	add.w	r5, r8, #1
 80063c0:	dd05      	ble.n	80063ce <_dtoa_r+0xaf6>
 80063c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80063c6:	d0ea      	beq.n	800639e <_dtoa_r+0xac6>
 80063c8:	f109 0901 	add.w	r9, r9, #1
 80063cc:	e7c4      	b.n	8006358 <_dtoa_r+0xa80>
 80063ce:	9b02      	ldr	r3, [sp, #8]
 80063d0:	9a04      	ldr	r2, [sp, #16]
 80063d2:	f805 9c01 	strb.w	r9, [r5, #-1]
 80063d6:	1aeb      	subs	r3, r5, r3
 80063d8:	4293      	cmp	r3, r2
 80063da:	46a8      	mov	r8, r5
 80063dc:	f43f af4b 	beq.w	8006276 <_dtoa_r+0x99e>
 80063e0:	4651      	mov	r1, sl
 80063e2:	2300      	movs	r3, #0
 80063e4:	220a      	movs	r2, #10
 80063e6:	4620      	mov	r0, r4
 80063e8:	f000 f8a5 	bl	8006536 <__multadd>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	9903      	ldr	r1, [sp, #12]
 80063f0:	42bb      	cmp	r3, r7
 80063f2:	4682      	mov	sl, r0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	f04f 020a 	mov.w	r2, #10
 80063fc:	4620      	mov	r0, r4
 80063fe:	d104      	bne.n	800640a <_dtoa_r+0xb32>
 8006400:	f000 f899 	bl	8006536 <__multadd>
 8006404:	9003      	str	r0, [sp, #12]
 8006406:	4607      	mov	r7, r0
 8006408:	e776      	b.n	80062f8 <_dtoa_r+0xa20>
 800640a:	f000 f894 	bl	8006536 <__multadd>
 800640e:	2300      	movs	r3, #0
 8006410:	9003      	str	r0, [sp, #12]
 8006412:	220a      	movs	r2, #10
 8006414:	4639      	mov	r1, r7
 8006416:	4620      	mov	r0, r4
 8006418:	f000 f88d 	bl	8006536 <__multadd>
 800641c:	e7f3      	b.n	8006406 <_dtoa_r+0xb2e>
 800641e:	4651      	mov	r1, sl
 8006420:	2300      	movs	r3, #0
 8006422:	220a      	movs	r2, #10
 8006424:	4620      	mov	r0, r4
 8006426:	f000 f886 	bl	8006536 <__multadd>
 800642a:	4682      	mov	sl, r0
 800642c:	e70d      	b.n	800624a <_dtoa_r+0x972>
 800642e:	9b02      	ldr	r3, [sp, #8]
 8006430:	4293      	cmp	r3, r2
 8006432:	d105      	bne.n	8006440 <_dtoa_r+0xb68>
 8006434:	9a02      	ldr	r2, [sp, #8]
 8006436:	f10b 0b01 	add.w	fp, fp, #1
 800643a:	2331      	movs	r3, #49	; 0x31
 800643c:	7013      	strb	r3, [r2, #0]
 800643e:	e6e2      	b.n	8006206 <_dtoa_r+0x92e>
 8006440:	4615      	mov	r5, r2
 8006442:	e7b2      	b.n	80063aa <_dtoa_r+0xad2>
 8006444:	4b09      	ldr	r3, [pc, #36]	; (800646c <_dtoa_r+0xb94>)
 8006446:	f7ff baae 	b.w	80059a6 <_dtoa_r+0xce>
 800644a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800644c:	2b00      	cmp	r3, #0
 800644e:	f47f aa88 	bne.w	8005962 <_dtoa_r+0x8a>
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <_dtoa_r+0xb98>)
 8006454:	f7ff baa7 	b.w	80059a6 <_dtoa_r+0xce>
 8006458:	9b04      	ldr	r3, [sp, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	f73f aef4 	bgt.w	8006248 <_dtoa_r+0x970>
 8006460:	9b07      	ldr	r3, [sp, #28]
 8006462:	2b02      	cmp	r3, #2
 8006464:	f77f aef0 	ble.w	8006248 <_dtoa_r+0x970>
 8006468:	e6b8      	b.n	80061dc <_dtoa_r+0x904>
 800646a:	bf00      	nop
 800646c:	0800709c 	.word	0x0800709c
 8006470:	080070c0 	.word	0x080070c0

08006474 <_localeconv_r>:
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <_localeconv_r+0x14>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6a18      	ldr	r0, [r3, #32]
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <_localeconv_r+0x18>)
 800647c:	2800      	cmp	r0, #0
 800647e:	bf08      	it	eq
 8006480:	4618      	moveq	r0, r3
 8006482:	30f0      	adds	r0, #240	; 0xf0
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000010 	.word	0x20000010
 800648c:	20000074 	.word	0x20000074

08006490 <malloc>:
 8006490:	4b02      	ldr	r3, [pc, #8]	; (800649c <malloc+0xc>)
 8006492:	4601      	mov	r1, r0
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	f000 bb2f 	b.w	8006af8 <_malloc_r>
 800649a:	bf00      	nop
 800649c:	20000010 	.word	0x20000010

080064a0 <_Balloc>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064a4:	4604      	mov	r4, r0
 80064a6:	460e      	mov	r6, r1
 80064a8:	b93d      	cbnz	r5, 80064ba <_Balloc+0x1a>
 80064aa:	2010      	movs	r0, #16
 80064ac:	f7ff fff0 	bl	8006490 <malloc>
 80064b0:	6260      	str	r0, [r4, #36]	; 0x24
 80064b2:	6045      	str	r5, [r0, #4]
 80064b4:	6085      	str	r5, [r0, #8]
 80064b6:	6005      	str	r5, [r0, #0]
 80064b8:	60c5      	str	r5, [r0, #12]
 80064ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80064bc:	68eb      	ldr	r3, [r5, #12]
 80064be:	b183      	cbz	r3, 80064e2 <_Balloc+0x42>
 80064c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80064c8:	b9b8      	cbnz	r0, 80064fa <_Balloc+0x5a>
 80064ca:	2101      	movs	r1, #1
 80064cc:	fa01 f506 	lsl.w	r5, r1, r6
 80064d0:	1d6a      	adds	r2, r5, #5
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 fab3 	bl	8006a40 <_calloc_r>
 80064da:	b160      	cbz	r0, 80064f6 <_Balloc+0x56>
 80064dc:	6046      	str	r6, [r0, #4]
 80064de:	6085      	str	r5, [r0, #8]
 80064e0:	e00e      	b.n	8006500 <_Balloc+0x60>
 80064e2:	2221      	movs	r2, #33	; 0x21
 80064e4:	2104      	movs	r1, #4
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 faaa 	bl	8006a40 <_calloc_r>
 80064ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ee:	60e8      	str	r0, [r5, #12]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e4      	bne.n	80064c0 <_Balloc+0x20>
 80064f6:	2000      	movs	r0, #0
 80064f8:	bd70      	pop	{r4, r5, r6, pc}
 80064fa:	6802      	ldr	r2, [r0, #0]
 80064fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006500:	2300      	movs	r3, #0
 8006502:	6103      	str	r3, [r0, #16]
 8006504:	60c3      	str	r3, [r0, #12]
 8006506:	bd70      	pop	{r4, r5, r6, pc}

08006508 <_Bfree>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800650c:	4606      	mov	r6, r0
 800650e:	460d      	mov	r5, r1
 8006510:	b93c      	cbnz	r4, 8006522 <_Bfree+0x1a>
 8006512:	2010      	movs	r0, #16
 8006514:	f7ff ffbc 	bl	8006490 <malloc>
 8006518:	6270      	str	r0, [r6, #36]	; 0x24
 800651a:	6044      	str	r4, [r0, #4]
 800651c:	6084      	str	r4, [r0, #8]
 800651e:	6004      	str	r4, [r0, #0]
 8006520:	60c4      	str	r4, [r0, #12]
 8006522:	b13d      	cbz	r5, 8006534 <_Bfree+0x2c>
 8006524:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006526:	686a      	ldr	r2, [r5, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800652e:	6029      	str	r1, [r5, #0]
 8006530:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006534:	bd70      	pop	{r4, r5, r6, pc}

08006536 <__multadd>:
 8006536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653a:	690d      	ldr	r5, [r1, #16]
 800653c:	461f      	mov	r7, r3
 800653e:	4606      	mov	r6, r0
 8006540:	460c      	mov	r4, r1
 8006542:	f101 0e14 	add.w	lr, r1, #20
 8006546:	2300      	movs	r3, #0
 8006548:	f8de 0000 	ldr.w	r0, [lr]
 800654c:	b281      	uxth	r1, r0
 800654e:	fb02 7101 	mla	r1, r2, r1, r7
 8006552:	0c0f      	lsrs	r7, r1, #16
 8006554:	0c00      	lsrs	r0, r0, #16
 8006556:	fb02 7000 	mla	r0, r2, r0, r7
 800655a:	b289      	uxth	r1, r1
 800655c:	3301      	adds	r3, #1
 800655e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006562:	429d      	cmp	r5, r3
 8006564:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006568:	f84e 1b04 	str.w	r1, [lr], #4
 800656c:	dcec      	bgt.n	8006548 <__multadd+0x12>
 800656e:	b1d7      	cbz	r7, 80065a6 <__multadd+0x70>
 8006570:	68a3      	ldr	r3, [r4, #8]
 8006572:	429d      	cmp	r5, r3
 8006574:	db12      	blt.n	800659c <__multadd+0x66>
 8006576:	6861      	ldr	r1, [r4, #4]
 8006578:	4630      	mov	r0, r6
 800657a:	3101      	adds	r1, #1
 800657c:	f7ff ff90 	bl	80064a0 <_Balloc>
 8006580:	6922      	ldr	r2, [r4, #16]
 8006582:	3202      	adds	r2, #2
 8006584:	f104 010c 	add.w	r1, r4, #12
 8006588:	4680      	mov	r8, r0
 800658a:	0092      	lsls	r2, r2, #2
 800658c:	300c      	adds	r0, #12
 800658e:	f7fe fc71 	bl	8004e74 <memcpy>
 8006592:	4621      	mov	r1, r4
 8006594:	4630      	mov	r0, r6
 8006596:	f7ff ffb7 	bl	8006508 <_Bfree>
 800659a:	4644      	mov	r4, r8
 800659c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065a0:	3501      	adds	r5, #1
 80065a2:	615f      	str	r7, [r3, #20]
 80065a4:	6125      	str	r5, [r4, #16]
 80065a6:	4620      	mov	r0, r4
 80065a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080065ac <__hi0bits>:
 80065ac:	0c02      	lsrs	r2, r0, #16
 80065ae:	0412      	lsls	r2, r2, #16
 80065b0:	4603      	mov	r3, r0
 80065b2:	b9b2      	cbnz	r2, 80065e2 <__hi0bits+0x36>
 80065b4:	0403      	lsls	r3, r0, #16
 80065b6:	2010      	movs	r0, #16
 80065b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80065bc:	bf04      	itt	eq
 80065be:	021b      	lsleq	r3, r3, #8
 80065c0:	3008      	addeq	r0, #8
 80065c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80065c6:	bf04      	itt	eq
 80065c8:	011b      	lsleq	r3, r3, #4
 80065ca:	3004      	addeq	r0, #4
 80065cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80065d0:	bf04      	itt	eq
 80065d2:	009b      	lsleq	r3, r3, #2
 80065d4:	3002      	addeq	r0, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	db06      	blt.n	80065e8 <__hi0bits+0x3c>
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	d503      	bpl.n	80065e6 <__hi0bits+0x3a>
 80065de:	3001      	adds	r0, #1
 80065e0:	4770      	bx	lr
 80065e2:	2000      	movs	r0, #0
 80065e4:	e7e8      	b.n	80065b8 <__hi0bits+0xc>
 80065e6:	2020      	movs	r0, #32
 80065e8:	4770      	bx	lr

080065ea <__lo0bits>:
 80065ea:	6803      	ldr	r3, [r0, #0]
 80065ec:	f013 0207 	ands.w	r2, r3, #7
 80065f0:	4601      	mov	r1, r0
 80065f2:	d00b      	beq.n	800660c <__lo0bits+0x22>
 80065f4:	07da      	lsls	r2, r3, #31
 80065f6:	d423      	bmi.n	8006640 <__lo0bits+0x56>
 80065f8:	0798      	lsls	r0, r3, #30
 80065fa:	bf49      	itett	mi
 80065fc:	085b      	lsrmi	r3, r3, #1
 80065fe:	089b      	lsrpl	r3, r3, #2
 8006600:	2001      	movmi	r0, #1
 8006602:	600b      	strmi	r3, [r1, #0]
 8006604:	bf5c      	itt	pl
 8006606:	600b      	strpl	r3, [r1, #0]
 8006608:	2002      	movpl	r0, #2
 800660a:	4770      	bx	lr
 800660c:	b298      	uxth	r0, r3
 800660e:	b9a8      	cbnz	r0, 800663c <__lo0bits+0x52>
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	2010      	movs	r0, #16
 8006614:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006618:	bf04      	itt	eq
 800661a:	0a1b      	lsreq	r3, r3, #8
 800661c:	3008      	addeq	r0, #8
 800661e:	071a      	lsls	r2, r3, #28
 8006620:	bf04      	itt	eq
 8006622:	091b      	lsreq	r3, r3, #4
 8006624:	3004      	addeq	r0, #4
 8006626:	079a      	lsls	r2, r3, #30
 8006628:	bf04      	itt	eq
 800662a:	089b      	lsreq	r3, r3, #2
 800662c:	3002      	addeq	r0, #2
 800662e:	07da      	lsls	r2, r3, #31
 8006630:	d402      	bmi.n	8006638 <__lo0bits+0x4e>
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	d006      	beq.n	8006644 <__lo0bits+0x5a>
 8006636:	3001      	adds	r0, #1
 8006638:	600b      	str	r3, [r1, #0]
 800663a:	4770      	bx	lr
 800663c:	4610      	mov	r0, r2
 800663e:	e7e9      	b.n	8006614 <__lo0bits+0x2a>
 8006640:	2000      	movs	r0, #0
 8006642:	4770      	bx	lr
 8006644:	2020      	movs	r0, #32
 8006646:	4770      	bx	lr

08006648 <__i2b>:
 8006648:	b510      	push	{r4, lr}
 800664a:	460c      	mov	r4, r1
 800664c:	2101      	movs	r1, #1
 800664e:	f7ff ff27 	bl	80064a0 <_Balloc>
 8006652:	2201      	movs	r2, #1
 8006654:	6144      	str	r4, [r0, #20]
 8006656:	6102      	str	r2, [r0, #16]
 8006658:	bd10      	pop	{r4, pc}

0800665a <__multiply>:
 800665a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665e:	4614      	mov	r4, r2
 8006660:	690a      	ldr	r2, [r1, #16]
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	429a      	cmp	r2, r3
 8006666:	bfb8      	it	lt
 8006668:	460b      	movlt	r3, r1
 800666a:	4689      	mov	r9, r1
 800666c:	bfbc      	itt	lt
 800666e:	46a1      	movlt	r9, r4
 8006670:	461c      	movlt	r4, r3
 8006672:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006676:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800667a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800667e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006682:	eb07 060a 	add.w	r6, r7, sl
 8006686:	429e      	cmp	r6, r3
 8006688:	bfc8      	it	gt
 800668a:	3101      	addgt	r1, #1
 800668c:	f7ff ff08 	bl	80064a0 <_Balloc>
 8006690:	f100 0514 	add.w	r5, r0, #20
 8006694:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006698:	462b      	mov	r3, r5
 800669a:	2200      	movs	r2, #0
 800669c:	4543      	cmp	r3, r8
 800669e:	d316      	bcc.n	80066ce <__multiply+0x74>
 80066a0:	f104 0214 	add.w	r2, r4, #20
 80066a4:	f109 0114 	add.w	r1, r9, #20
 80066a8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80066ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	9c01      	ldr	r4, [sp, #4]
 80066b4:	4294      	cmp	r4, r2
 80066b6:	4613      	mov	r3, r2
 80066b8:	d80c      	bhi.n	80066d4 <__multiply+0x7a>
 80066ba:	2e00      	cmp	r6, #0
 80066bc:	dd03      	ble.n	80066c6 <__multiply+0x6c>
 80066be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d054      	beq.n	8006770 <__multiply+0x116>
 80066c6:	6106      	str	r6, [r0, #16]
 80066c8:	b003      	add	sp, #12
 80066ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ce:	f843 2b04 	str.w	r2, [r3], #4
 80066d2:	e7e3      	b.n	800669c <__multiply+0x42>
 80066d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80066d8:	3204      	adds	r2, #4
 80066da:	f1ba 0f00 	cmp.w	sl, #0
 80066de:	d020      	beq.n	8006722 <__multiply+0xc8>
 80066e0:	46ae      	mov	lr, r5
 80066e2:	4689      	mov	r9, r1
 80066e4:	f04f 0c00 	mov.w	ip, #0
 80066e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80066ec:	f8be b000 	ldrh.w	fp, [lr]
 80066f0:	b2a3      	uxth	r3, r4
 80066f2:	fb0a b303 	mla	r3, sl, r3, fp
 80066f6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80066fa:	f8de 4000 	ldr.w	r4, [lr]
 80066fe:	4463      	add	r3, ip
 8006700:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006704:	fb0a c40b 	mla	r4, sl, fp, ip
 8006708:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800670c:	b29b      	uxth	r3, r3
 800670e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006712:	454f      	cmp	r7, r9
 8006714:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006718:	f84e 3b04 	str.w	r3, [lr], #4
 800671c:	d8e4      	bhi.n	80066e8 <__multiply+0x8e>
 800671e:	f8ce c000 	str.w	ip, [lr]
 8006722:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006726:	f1b9 0f00 	cmp.w	r9, #0
 800672a:	d01f      	beq.n	800676c <__multiply+0x112>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	46ae      	mov	lr, r5
 8006730:	468c      	mov	ip, r1
 8006732:	f04f 0a00 	mov.w	sl, #0
 8006736:	f8bc 4000 	ldrh.w	r4, [ip]
 800673a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800673e:	fb09 b404 	mla	r4, r9, r4, fp
 8006742:	44a2      	add	sl, r4
 8006744:	b29b      	uxth	r3, r3
 8006746:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800674a:	f84e 3b04 	str.w	r3, [lr], #4
 800674e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006752:	f8be 4000 	ldrh.w	r4, [lr]
 8006756:	0c1b      	lsrs	r3, r3, #16
 8006758:	fb09 4303 	mla	r3, r9, r3, r4
 800675c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006760:	4567      	cmp	r7, ip
 8006762:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006766:	d8e6      	bhi.n	8006736 <__multiply+0xdc>
 8006768:	f8ce 3000 	str.w	r3, [lr]
 800676c:	3504      	adds	r5, #4
 800676e:	e7a0      	b.n	80066b2 <__multiply+0x58>
 8006770:	3e01      	subs	r6, #1
 8006772:	e7a2      	b.n	80066ba <__multiply+0x60>

08006774 <__pow5mult>:
 8006774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006778:	4615      	mov	r5, r2
 800677a:	f012 0203 	ands.w	r2, r2, #3
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	d007      	beq.n	8006794 <__pow5mult+0x20>
 8006784:	3a01      	subs	r2, #1
 8006786:	4c21      	ldr	r4, [pc, #132]	; (800680c <__pow5mult+0x98>)
 8006788:	2300      	movs	r3, #0
 800678a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800678e:	f7ff fed2 	bl	8006536 <__multadd>
 8006792:	4607      	mov	r7, r0
 8006794:	10ad      	asrs	r5, r5, #2
 8006796:	d035      	beq.n	8006804 <__pow5mult+0x90>
 8006798:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800679a:	b93c      	cbnz	r4, 80067ac <__pow5mult+0x38>
 800679c:	2010      	movs	r0, #16
 800679e:	f7ff fe77 	bl	8006490 <malloc>
 80067a2:	6270      	str	r0, [r6, #36]	; 0x24
 80067a4:	6044      	str	r4, [r0, #4]
 80067a6:	6084      	str	r4, [r0, #8]
 80067a8:	6004      	str	r4, [r0, #0]
 80067aa:	60c4      	str	r4, [r0, #12]
 80067ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067b4:	b94c      	cbnz	r4, 80067ca <__pow5mult+0x56>
 80067b6:	f240 2171 	movw	r1, #625	; 0x271
 80067ba:	4630      	mov	r0, r6
 80067bc:	f7ff ff44 	bl	8006648 <__i2b>
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80067c6:	4604      	mov	r4, r0
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	f04f 0800 	mov.w	r8, #0
 80067ce:	07eb      	lsls	r3, r5, #31
 80067d0:	d50a      	bpl.n	80067e8 <__pow5mult+0x74>
 80067d2:	4639      	mov	r1, r7
 80067d4:	4622      	mov	r2, r4
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff ff3f 	bl	800665a <__multiply>
 80067dc:	4639      	mov	r1, r7
 80067de:	4681      	mov	r9, r0
 80067e0:	4630      	mov	r0, r6
 80067e2:	f7ff fe91 	bl	8006508 <_Bfree>
 80067e6:	464f      	mov	r7, r9
 80067e8:	106d      	asrs	r5, r5, #1
 80067ea:	d00b      	beq.n	8006804 <__pow5mult+0x90>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	b938      	cbnz	r0, 8006800 <__pow5mult+0x8c>
 80067f0:	4622      	mov	r2, r4
 80067f2:	4621      	mov	r1, r4
 80067f4:	4630      	mov	r0, r6
 80067f6:	f7ff ff30 	bl	800665a <__multiply>
 80067fa:	6020      	str	r0, [r4, #0]
 80067fc:	f8c0 8000 	str.w	r8, [r0]
 8006800:	4604      	mov	r4, r0
 8006802:	e7e4      	b.n	80067ce <__pow5mult+0x5a>
 8006804:	4638      	mov	r0, r7
 8006806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800680a:	bf00      	nop
 800680c:	080071c0 	.word	0x080071c0

08006810 <__lshift>:
 8006810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006814:	460c      	mov	r4, r1
 8006816:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	6849      	ldr	r1, [r1, #4]
 800681e:	eb0a 0903 	add.w	r9, sl, r3
 8006822:	68a3      	ldr	r3, [r4, #8]
 8006824:	4607      	mov	r7, r0
 8006826:	4616      	mov	r6, r2
 8006828:	f109 0501 	add.w	r5, r9, #1
 800682c:	42ab      	cmp	r3, r5
 800682e:	db31      	blt.n	8006894 <__lshift+0x84>
 8006830:	4638      	mov	r0, r7
 8006832:	f7ff fe35 	bl	80064a0 <_Balloc>
 8006836:	2200      	movs	r2, #0
 8006838:	4680      	mov	r8, r0
 800683a:	f100 0314 	add.w	r3, r0, #20
 800683e:	4611      	mov	r1, r2
 8006840:	4552      	cmp	r2, sl
 8006842:	db2a      	blt.n	800689a <__lshift+0x8a>
 8006844:	6920      	ldr	r0, [r4, #16]
 8006846:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800684a:	f104 0114 	add.w	r1, r4, #20
 800684e:	f016 021f 	ands.w	r2, r6, #31
 8006852:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006856:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800685a:	d022      	beq.n	80068a2 <__lshift+0x92>
 800685c:	f1c2 0c20 	rsb	ip, r2, #32
 8006860:	2000      	movs	r0, #0
 8006862:	680e      	ldr	r6, [r1, #0]
 8006864:	4096      	lsls	r6, r2
 8006866:	4330      	orrs	r0, r6
 8006868:	f843 0b04 	str.w	r0, [r3], #4
 800686c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006870:	458e      	cmp	lr, r1
 8006872:	fa20 f00c 	lsr.w	r0, r0, ip
 8006876:	d8f4      	bhi.n	8006862 <__lshift+0x52>
 8006878:	6018      	str	r0, [r3, #0]
 800687a:	b108      	cbz	r0, 8006880 <__lshift+0x70>
 800687c:	f109 0502 	add.w	r5, r9, #2
 8006880:	3d01      	subs	r5, #1
 8006882:	4638      	mov	r0, r7
 8006884:	f8c8 5010 	str.w	r5, [r8, #16]
 8006888:	4621      	mov	r1, r4
 800688a:	f7ff fe3d 	bl	8006508 <_Bfree>
 800688e:	4640      	mov	r0, r8
 8006890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006894:	3101      	adds	r1, #1
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	e7c8      	b.n	800682c <__lshift+0x1c>
 800689a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800689e:	3201      	adds	r2, #1
 80068a0:	e7ce      	b.n	8006840 <__lshift+0x30>
 80068a2:	3b04      	subs	r3, #4
 80068a4:	f851 2b04 	ldr.w	r2, [r1], #4
 80068a8:	f843 2f04 	str.w	r2, [r3, #4]!
 80068ac:	458e      	cmp	lr, r1
 80068ae:	d8f9      	bhi.n	80068a4 <__lshift+0x94>
 80068b0:	e7e6      	b.n	8006880 <__lshift+0x70>

080068b2 <__mcmp>:
 80068b2:	6903      	ldr	r3, [r0, #16]
 80068b4:	690a      	ldr	r2, [r1, #16]
 80068b6:	1a9b      	subs	r3, r3, r2
 80068b8:	b530      	push	{r4, r5, lr}
 80068ba:	d10c      	bne.n	80068d6 <__mcmp+0x24>
 80068bc:	0092      	lsls	r2, r2, #2
 80068be:	3014      	adds	r0, #20
 80068c0:	3114      	adds	r1, #20
 80068c2:	1884      	adds	r4, r0, r2
 80068c4:	4411      	add	r1, r2
 80068c6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068ca:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068ce:	4295      	cmp	r5, r2
 80068d0:	d003      	beq.n	80068da <__mcmp+0x28>
 80068d2:	d305      	bcc.n	80068e0 <__mcmp+0x2e>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4618      	mov	r0, r3
 80068d8:	bd30      	pop	{r4, r5, pc}
 80068da:	42a0      	cmp	r0, r4
 80068dc:	d3f3      	bcc.n	80068c6 <__mcmp+0x14>
 80068de:	e7fa      	b.n	80068d6 <__mcmp+0x24>
 80068e0:	f04f 33ff 	mov.w	r3, #4294967295
 80068e4:	e7f7      	b.n	80068d6 <__mcmp+0x24>

080068e6 <__mdiff>:
 80068e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ea:	460d      	mov	r5, r1
 80068ec:	4607      	mov	r7, r0
 80068ee:	4611      	mov	r1, r2
 80068f0:	4628      	mov	r0, r5
 80068f2:	4614      	mov	r4, r2
 80068f4:	f7ff ffdd 	bl	80068b2 <__mcmp>
 80068f8:	1e06      	subs	r6, r0, #0
 80068fa:	d108      	bne.n	800690e <__mdiff+0x28>
 80068fc:	4631      	mov	r1, r6
 80068fe:	4638      	mov	r0, r7
 8006900:	f7ff fdce 	bl	80064a0 <_Balloc>
 8006904:	2301      	movs	r3, #1
 8006906:	6103      	str	r3, [r0, #16]
 8006908:	6146      	str	r6, [r0, #20]
 800690a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690e:	bfa4      	itt	ge
 8006910:	4623      	movge	r3, r4
 8006912:	462c      	movge	r4, r5
 8006914:	4638      	mov	r0, r7
 8006916:	6861      	ldr	r1, [r4, #4]
 8006918:	bfa6      	itte	ge
 800691a:	461d      	movge	r5, r3
 800691c:	2600      	movge	r6, #0
 800691e:	2601      	movlt	r6, #1
 8006920:	f7ff fdbe 	bl	80064a0 <_Balloc>
 8006924:	692b      	ldr	r3, [r5, #16]
 8006926:	60c6      	str	r6, [r0, #12]
 8006928:	6926      	ldr	r6, [r4, #16]
 800692a:	f105 0914 	add.w	r9, r5, #20
 800692e:	f104 0214 	add.w	r2, r4, #20
 8006932:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006936:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800693a:	f100 0514 	add.w	r5, r0, #20
 800693e:	f04f 0c00 	mov.w	ip, #0
 8006942:	f852 ab04 	ldr.w	sl, [r2], #4
 8006946:	f859 4b04 	ldr.w	r4, [r9], #4
 800694a:	fa1c f18a 	uxtah	r1, ip, sl
 800694e:	b2a3      	uxth	r3, r4
 8006950:	1ac9      	subs	r1, r1, r3
 8006952:	0c23      	lsrs	r3, r4, #16
 8006954:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006958:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800695c:	b289      	uxth	r1, r1
 800695e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006962:	45c8      	cmp	r8, r9
 8006964:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006968:	4696      	mov	lr, r2
 800696a:	f845 3b04 	str.w	r3, [r5], #4
 800696e:	d8e8      	bhi.n	8006942 <__mdiff+0x5c>
 8006970:	45be      	cmp	lr, r7
 8006972:	d305      	bcc.n	8006980 <__mdiff+0x9a>
 8006974:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006978:	b18b      	cbz	r3, 800699e <__mdiff+0xb8>
 800697a:	6106      	str	r6, [r0, #16]
 800697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006980:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006984:	fa1c f381 	uxtah	r3, ip, r1
 8006988:	141a      	asrs	r2, r3, #16
 800698a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800698e:	b29b      	uxth	r3, r3
 8006990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006994:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006998:	f845 3b04 	str.w	r3, [r5], #4
 800699c:	e7e8      	b.n	8006970 <__mdiff+0x8a>
 800699e:	3e01      	subs	r6, #1
 80069a0:	e7e8      	b.n	8006974 <__mdiff+0x8e>

080069a2 <__d2b>:
 80069a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069a6:	460e      	mov	r6, r1
 80069a8:	2101      	movs	r1, #1
 80069aa:	ec59 8b10 	vmov	r8, r9, d0
 80069ae:	4615      	mov	r5, r2
 80069b0:	f7ff fd76 	bl	80064a0 <_Balloc>
 80069b4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80069b8:	4607      	mov	r7, r0
 80069ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069be:	bb34      	cbnz	r4, 8006a0e <__d2b+0x6c>
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	f1b8 0f00 	cmp.w	r8, #0
 80069c6:	d027      	beq.n	8006a18 <__d2b+0x76>
 80069c8:	a802      	add	r0, sp, #8
 80069ca:	f840 8d08 	str.w	r8, [r0, #-8]!
 80069ce:	f7ff fe0c 	bl	80065ea <__lo0bits>
 80069d2:	9900      	ldr	r1, [sp, #0]
 80069d4:	b1f0      	cbz	r0, 8006a14 <__d2b+0x72>
 80069d6:	9a01      	ldr	r2, [sp, #4]
 80069d8:	f1c0 0320 	rsb	r3, r0, #32
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	430b      	orrs	r3, r1
 80069e2:	40c2      	lsrs	r2, r0
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	9201      	str	r2, [sp, #4]
 80069e8:	9b01      	ldr	r3, [sp, #4]
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bf14      	ite	ne
 80069f0:	2102      	movne	r1, #2
 80069f2:	2101      	moveq	r1, #1
 80069f4:	6139      	str	r1, [r7, #16]
 80069f6:	b1c4      	cbz	r4, 8006a2a <__d2b+0x88>
 80069f8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80069fc:	4404      	add	r4, r0
 80069fe:	6034      	str	r4, [r6, #0]
 8006a00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a04:	6028      	str	r0, [r5, #0]
 8006a06:	4638      	mov	r0, r7
 8006a08:	b003      	add	sp, #12
 8006a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a12:	e7d5      	b.n	80069c0 <__d2b+0x1e>
 8006a14:	6179      	str	r1, [r7, #20]
 8006a16:	e7e7      	b.n	80069e8 <__d2b+0x46>
 8006a18:	a801      	add	r0, sp, #4
 8006a1a:	f7ff fde6 	bl	80065ea <__lo0bits>
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	2101      	movs	r1, #1
 8006a24:	6139      	str	r1, [r7, #16]
 8006a26:	3020      	adds	r0, #32
 8006a28:	e7e5      	b.n	80069f6 <__d2b+0x54>
 8006a2a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006a2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a32:	6030      	str	r0, [r6, #0]
 8006a34:	6918      	ldr	r0, [r3, #16]
 8006a36:	f7ff fdb9 	bl	80065ac <__hi0bits>
 8006a3a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006a3e:	e7e1      	b.n	8006a04 <__d2b+0x62>

08006a40 <_calloc_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	fb02 f401 	mul.w	r4, r2, r1
 8006a46:	4621      	mov	r1, r4
 8006a48:	f000 f856 	bl	8006af8 <_malloc_r>
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	b118      	cbz	r0, 8006a58 <_calloc_r+0x18>
 8006a50:	4622      	mov	r2, r4
 8006a52:	2100      	movs	r1, #0
 8006a54:	f7fe fa19 	bl	8004e8a <memset>
 8006a58:	4628      	mov	r0, r5
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}

08006a5c <_free_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4605      	mov	r5, r0
 8006a60:	2900      	cmp	r1, #0
 8006a62:	d045      	beq.n	8006af0 <_free_r+0x94>
 8006a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a68:	1f0c      	subs	r4, r1, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	bfb8      	it	lt
 8006a6e:	18e4      	addlt	r4, r4, r3
 8006a70:	f000 fa2c 	bl	8006ecc <__malloc_lock>
 8006a74:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <_free_r+0x98>)
 8006a76:	6813      	ldr	r3, [r2, #0]
 8006a78:	4610      	mov	r0, r2
 8006a7a:	b933      	cbnz	r3, 8006a8a <_free_r+0x2e>
 8006a7c:	6063      	str	r3, [r4, #4]
 8006a7e:	6014      	str	r4, [r2, #0]
 8006a80:	4628      	mov	r0, r5
 8006a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a86:	f000 ba22 	b.w	8006ece <__malloc_unlock>
 8006a8a:	42a3      	cmp	r3, r4
 8006a8c:	d90c      	bls.n	8006aa8 <_free_r+0x4c>
 8006a8e:	6821      	ldr	r1, [r4, #0]
 8006a90:	1862      	adds	r2, r4, r1
 8006a92:	4293      	cmp	r3, r2
 8006a94:	bf04      	itt	eq
 8006a96:	681a      	ldreq	r2, [r3, #0]
 8006a98:	685b      	ldreq	r3, [r3, #4]
 8006a9a:	6063      	str	r3, [r4, #4]
 8006a9c:	bf04      	itt	eq
 8006a9e:	1852      	addeq	r2, r2, r1
 8006aa0:	6022      	streq	r2, [r4, #0]
 8006aa2:	6004      	str	r4, [r0, #0]
 8006aa4:	e7ec      	b.n	8006a80 <_free_r+0x24>
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	b10a      	cbz	r2, 8006ab0 <_free_r+0x54>
 8006aac:	42a2      	cmp	r2, r4
 8006aae:	d9fa      	bls.n	8006aa6 <_free_r+0x4a>
 8006ab0:	6819      	ldr	r1, [r3, #0]
 8006ab2:	1858      	adds	r0, r3, r1
 8006ab4:	42a0      	cmp	r0, r4
 8006ab6:	d10b      	bne.n	8006ad0 <_free_r+0x74>
 8006ab8:	6820      	ldr	r0, [r4, #0]
 8006aba:	4401      	add	r1, r0
 8006abc:	1858      	adds	r0, r3, r1
 8006abe:	4282      	cmp	r2, r0
 8006ac0:	6019      	str	r1, [r3, #0]
 8006ac2:	d1dd      	bne.n	8006a80 <_free_r+0x24>
 8006ac4:	6810      	ldr	r0, [r2, #0]
 8006ac6:	6852      	ldr	r2, [r2, #4]
 8006ac8:	605a      	str	r2, [r3, #4]
 8006aca:	4401      	add	r1, r0
 8006acc:	6019      	str	r1, [r3, #0]
 8006ace:	e7d7      	b.n	8006a80 <_free_r+0x24>
 8006ad0:	d902      	bls.n	8006ad8 <_free_r+0x7c>
 8006ad2:	230c      	movs	r3, #12
 8006ad4:	602b      	str	r3, [r5, #0]
 8006ad6:	e7d3      	b.n	8006a80 <_free_r+0x24>
 8006ad8:	6820      	ldr	r0, [r4, #0]
 8006ada:	1821      	adds	r1, r4, r0
 8006adc:	428a      	cmp	r2, r1
 8006ade:	bf04      	itt	eq
 8006ae0:	6811      	ldreq	r1, [r2, #0]
 8006ae2:	6852      	ldreq	r2, [r2, #4]
 8006ae4:	6062      	str	r2, [r4, #4]
 8006ae6:	bf04      	itt	eq
 8006ae8:	1809      	addeq	r1, r1, r0
 8006aea:	6021      	streq	r1, [r4, #0]
 8006aec:	605c      	str	r4, [r3, #4]
 8006aee:	e7c7      	b.n	8006a80 <_free_r+0x24>
 8006af0:	bd38      	pop	{r3, r4, r5, pc}
 8006af2:	bf00      	nop
 8006af4:	20000234 	.word	0x20000234

08006af8 <_malloc_r>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	1ccd      	adds	r5, r1, #3
 8006afc:	f025 0503 	bic.w	r5, r5, #3
 8006b00:	3508      	adds	r5, #8
 8006b02:	2d0c      	cmp	r5, #12
 8006b04:	bf38      	it	cc
 8006b06:	250c      	movcc	r5, #12
 8006b08:	2d00      	cmp	r5, #0
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	db01      	blt.n	8006b12 <_malloc_r+0x1a>
 8006b0e:	42a9      	cmp	r1, r5
 8006b10:	d903      	bls.n	8006b1a <_malloc_r+0x22>
 8006b12:	230c      	movs	r3, #12
 8006b14:	6033      	str	r3, [r6, #0]
 8006b16:	2000      	movs	r0, #0
 8006b18:	bd70      	pop	{r4, r5, r6, pc}
 8006b1a:	f000 f9d7 	bl	8006ecc <__malloc_lock>
 8006b1e:	4a23      	ldr	r2, [pc, #140]	; (8006bac <_malloc_r+0xb4>)
 8006b20:	6814      	ldr	r4, [r2, #0]
 8006b22:	4621      	mov	r1, r4
 8006b24:	b991      	cbnz	r1, 8006b4c <_malloc_r+0x54>
 8006b26:	4c22      	ldr	r4, [pc, #136]	; (8006bb0 <_malloc_r+0xb8>)
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	b91b      	cbnz	r3, 8006b34 <_malloc_r+0x3c>
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f000 f991 	bl	8006e54 <_sbrk_r>
 8006b32:	6020      	str	r0, [r4, #0]
 8006b34:	4629      	mov	r1, r5
 8006b36:	4630      	mov	r0, r6
 8006b38:	f000 f98c 	bl	8006e54 <_sbrk_r>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d126      	bne.n	8006b8e <_malloc_r+0x96>
 8006b40:	230c      	movs	r3, #12
 8006b42:	6033      	str	r3, [r6, #0]
 8006b44:	4630      	mov	r0, r6
 8006b46:	f000 f9c2 	bl	8006ece <__malloc_unlock>
 8006b4a:	e7e4      	b.n	8006b16 <_malloc_r+0x1e>
 8006b4c:	680b      	ldr	r3, [r1, #0]
 8006b4e:	1b5b      	subs	r3, r3, r5
 8006b50:	d41a      	bmi.n	8006b88 <_malloc_r+0x90>
 8006b52:	2b0b      	cmp	r3, #11
 8006b54:	d90f      	bls.n	8006b76 <_malloc_r+0x7e>
 8006b56:	600b      	str	r3, [r1, #0]
 8006b58:	50cd      	str	r5, [r1, r3]
 8006b5a:	18cc      	adds	r4, r1, r3
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f000 f9b6 	bl	8006ece <__malloc_unlock>
 8006b62:	f104 000b 	add.w	r0, r4, #11
 8006b66:	1d23      	adds	r3, r4, #4
 8006b68:	f020 0007 	bic.w	r0, r0, #7
 8006b6c:	1ac3      	subs	r3, r0, r3
 8006b6e:	d01b      	beq.n	8006ba8 <_malloc_r+0xb0>
 8006b70:	425a      	negs	r2, r3
 8006b72:	50e2      	str	r2, [r4, r3]
 8006b74:	bd70      	pop	{r4, r5, r6, pc}
 8006b76:	428c      	cmp	r4, r1
 8006b78:	bf0d      	iteet	eq
 8006b7a:	6863      	ldreq	r3, [r4, #4]
 8006b7c:	684b      	ldrne	r3, [r1, #4]
 8006b7e:	6063      	strne	r3, [r4, #4]
 8006b80:	6013      	streq	r3, [r2, #0]
 8006b82:	bf18      	it	ne
 8006b84:	460c      	movne	r4, r1
 8006b86:	e7e9      	b.n	8006b5c <_malloc_r+0x64>
 8006b88:	460c      	mov	r4, r1
 8006b8a:	6849      	ldr	r1, [r1, #4]
 8006b8c:	e7ca      	b.n	8006b24 <_malloc_r+0x2c>
 8006b8e:	1cc4      	adds	r4, r0, #3
 8006b90:	f024 0403 	bic.w	r4, r4, #3
 8006b94:	42a0      	cmp	r0, r4
 8006b96:	d005      	beq.n	8006ba4 <_malloc_r+0xac>
 8006b98:	1a21      	subs	r1, r4, r0
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f000 f95a 	bl	8006e54 <_sbrk_r>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d0cd      	beq.n	8006b40 <_malloc_r+0x48>
 8006ba4:	6025      	str	r5, [r4, #0]
 8006ba6:	e7d9      	b.n	8006b5c <_malloc_r+0x64>
 8006ba8:	bd70      	pop	{r4, r5, r6, pc}
 8006baa:	bf00      	nop
 8006bac:	20000234 	.word	0x20000234
 8006bb0:	20000238 	.word	0x20000238

08006bb4 <__ssputs_r>:
 8006bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb8:	688e      	ldr	r6, [r1, #8]
 8006bba:	429e      	cmp	r6, r3
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	4691      	mov	r9, r2
 8006bc2:	4698      	mov	r8, r3
 8006bc4:	d835      	bhi.n	8006c32 <__ssputs_r+0x7e>
 8006bc6:	898a      	ldrh	r2, [r1, #12]
 8006bc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bcc:	d031      	beq.n	8006c32 <__ssputs_r+0x7e>
 8006bce:	6825      	ldr	r5, [r4, #0]
 8006bd0:	6909      	ldr	r1, [r1, #16]
 8006bd2:	1a6f      	subs	r7, r5, r1
 8006bd4:	6965      	ldr	r5, [r4, #20]
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bdc:	fb95 f5f3 	sdiv	r5, r5, r3
 8006be0:	f108 0301 	add.w	r3, r8, #1
 8006be4:	443b      	add	r3, r7
 8006be6:	429d      	cmp	r5, r3
 8006be8:	bf38      	it	cc
 8006bea:	461d      	movcc	r5, r3
 8006bec:	0553      	lsls	r3, r2, #21
 8006bee:	d531      	bpl.n	8006c54 <__ssputs_r+0xa0>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7ff ff81 	bl	8006af8 <_malloc_r>
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	b950      	cbnz	r0, 8006c10 <__ssputs_r+0x5c>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	f8ca 3000 	str.w	r3, [sl]
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c10:	463a      	mov	r2, r7
 8006c12:	6921      	ldr	r1, [r4, #16]
 8006c14:	f7fe f92e 	bl	8004e74 <memcpy>
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c22:	81a3      	strh	r3, [r4, #12]
 8006c24:	6126      	str	r6, [r4, #16]
 8006c26:	6165      	str	r5, [r4, #20]
 8006c28:	443e      	add	r6, r7
 8006c2a:	1bed      	subs	r5, r5, r7
 8006c2c:	6026      	str	r6, [r4, #0]
 8006c2e:	60a5      	str	r5, [r4, #8]
 8006c30:	4646      	mov	r6, r8
 8006c32:	4546      	cmp	r6, r8
 8006c34:	bf28      	it	cs
 8006c36:	4646      	movcs	r6, r8
 8006c38:	4632      	mov	r2, r6
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	6820      	ldr	r0, [r4, #0]
 8006c3e:	f000 f92b 	bl	8006e98 <memmove>
 8006c42:	68a3      	ldr	r3, [r4, #8]
 8006c44:	1b9b      	subs	r3, r3, r6
 8006c46:	60a3      	str	r3, [r4, #8]
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	441e      	add	r6, r3
 8006c4c:	6026      	str	r6, [r4, #0]
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	462a      	mov	r2, r5
 8006c56:	f000 f93b 	bl	8006ed0 <_realloc_r>
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d1e1      	bne.n	8006c24 <__ssputs_r+0x70>
 8006c60:	6921      	ldr	r1, [r4, #16]
 8006c62:	4650      	mov	r0, sl
 8006c64:	f7ff fefa 	bl	8006a5c <_free_r>
 8006c68:	e7c7      	b.n	8006bfa <__ssputs_r+0x46>
	...

08006c6c <_svfiprintf_r>:
 8006c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c70:	b09d      	sub	sp, #116	; 0x74
 8006c72:	4680      	mov	r8, r0
 8006c74:	9303      	str	r3, [sp, #12]
 8006c76:	898b      	ldrh	r3, [r1, #12]
 8006c78:	061c      	lsls	r4, r3, #24
 8006c7a:	460d      	mov	r5, r1
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	d50f      	bpl.n	8006ca0 <_svfiprintf_r+0x34>
 8006c80:	690b      	ldr	r3, [r1, #16]
 8006c82:	b96b      	cbnz	r3, 8006ca0 <_svfiprintf_r+0x34>
 8006c84:	2140      	movs	r1, #64	; 0x40
 8006c86:	f7ff ff37 	bl	8006af8 <_malloc_r>
 8006c8a:	6028      	str	r0, [r5, #0]
 8006c8c:	6128      	str	r0, [r5, #16]
 8006c8e:	b928      	cbnz	r0, 8006c9c <_svfiprintf_r+0x30>
 8006c90:	230c      	movs	r3, #12
 8006c92:	f8c8 3000 	str.w	r3, [r8]
 8006c96:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9a:	e0c5      	b.n	8006e28 <_svfiprintf_r+0x1bc>
 8006c9c:	2340      	movs	r3, #64	; 0x40
 8006c9e:	616b      	str	r3, [r5, #20]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca4:	2320      	movs	r3, #32
 8006ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006caa:	2330      	movs	r3, #48	; 0x30
 8006cac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cb0:	f04f 0b01 	mov.w	fp, #1
 8006cb4:	4637      	mov	r7, r6
 8006cb6:	463c      	mov	r4, r7
 8006cb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d13c      	bne.n	8006d3a <_svfiprintf_r+0xce>
 8006cc0:	ebb7 0a06 	subs.w	sl, r7, r6
 8006cc4:	d00b      	beq.n	8006cde <_svfiprintf_r+0x72>
 8006cc6:	4653      	mov	r3, sl
 8006cc8:	4632      	mov	r2, r6
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4640      	mov	r0, r8
 8006cce:	f7ff ff71 	bl	8006bb4 <__ssputs_r>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	f000 80a3 	beq.w	8006e1e <_svfiprintf_r+0x1b2>
 8006cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cda:	4453      	add	r3, sl
 8006cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006cde:	783b      	ldrb	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 809c 	beq.w	8006e1e <_svfiprintf_r+0x1b2>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	9307      	str	r3, [sp, #28]
 8006cf0:	9205      	str	r2, [sp, #20]
 8006cf2:	9306      	str	r3, [sp, #24]
 8006cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8006cfa:	2205      	movs	r2, #5
 8006cfc:	7821      	ldrb	r1, [r4, #0]
 8006cfe:	4850      	ldr	r0, [pc, #320]	; (8006e40 <_svfiprintf_r+0x1d4>)
 8006d00:	f7f9 fa6e 	bl	80001e0 <memchr>
 8006d04:	1c67      	adds	r7, r4, #1
 8006d06:	9b04      	ldr	r3, [sp, #16]
 8006d08:	b9d8      	cbnz	r0, 8006d42 <_svfiprintf_r+0xd6>
 8006d0a:	06d9      	lsls	r1, r3, #27
 8006d0c:	bf44      	itt	mi
 8006d0e:	2220      	movmi	r2, #32
 8006d10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d14:	071a      	lsls	r2, r3, #28
 8006d16:	bf44      	itt	mi
 8006d18:	222b      	movmi	r2, #43	; 0x2b
 8006d1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d1e:	7822      	ldrb	r2, [r4, #0]
 8006d20:	2a2a      	cmp	r2, #42	; 0x2a
 8006d22:	d016      	beq.n	8006d52 <_svfiprintf_r+0xe6>
 8006d24:	9a07      	ldr	r2, [sp, #28]
 8006d26:	2100      	movs	r1, #0
 8006d28:	200a      	movs	r0, #10
 8006d2a:	4627      	mov	r7, r4
 8006d2c:	3401      	adds	r4, #1
 8006d2e:	783b      	ldrb	r3, [r7, #0]
 8006d30:	3b30      	subs	r3, #48	; 0x30
 8006d32:	2b09      	cmp	r3, #9
 8006d34:	d951      	bls.n	8006dda <_svfiprintf_r+0x16e>
 8006d36:	b1c9      	cbz	r1, 8006d6c <_svfiprintf_r+0x100>
 8006d38:	e011      	b.n	8006d5e <_svfiprintf_r+0xf2>
 8006d3a:	2b25      	cmp	r3, #37	; 0x25
 8006d3c:	d0c0      	beq.n	8006cc0 <_svfiprintf_r+0x54>
 8006d3e:	4627      	mov	r7, r4
 8006d40:	e7b9      	b.n	8006cb6 <_svfiprintf_r+0x4a>
 8006d42:	4a3f      	ldr	r2, [pc, #252]	; (8006e40 <_svfiprintf_r+0x1d4>)
 8006d44:	1a80      	subs	r0, r0, r2
 8006d46:	fa0b f000 	lsl.w	r0, fp, r0
 8006d4a:	4318      	orrs	r0, r3
 8006d4c:	9004      	str	r0, [sp, #16]
 8006d4e:	463c      	mov	r4, r7
 8006d50:	e7d3      	b.n	8006cfa <_svfiprintf_r+0x8e>
 8006d52:	9a03      	ldr	r2, [sp, #12]
 8006d54:	1d11      	adds	r1, r2, #4
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	9103      	str	r1, [sp, #12]
 8006d5a:	2a00      	cmp	r2, #0
 8006d5c:	db01      	blt.n	8006d62 <_svfiprintf_r+0xf6>
 8006d5e:	9207      	str	r2, [sp, #28]
 8006d60:	e004      	b.n	8006d6c <_svfiprintf_r+0x100>
 8006d62:	4252      	negs	r2, r2
 8006d64:	f043 0302 	orr.w	r3, r3, #2
 8006d68:	9207      	str	r2, [sp, #28]
 8006d6a:	9304      	str	r3, [sp, #16]
 8006d6c:	783b      	ldrb	r3, [r7, #0]
 8006d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d70:	d10e      	bne.n	8006d90 <_svfiprintf_r+0x124>
 8006d72:	787b      	ldrb	r3, [r7, #1]
 8006d74:	2b2a      	cmp	r3, #42	; 0x2a
 8006d76:	f107 0101 	add.w	r1, r7, #1
 8006d7a:	d132      	bne.n	8006de2 <_svfiprintf_r+0x176>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	1d1a      	adds	r2, r3, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	9203      	str	r2, [sp, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bfb8      	it	lt
 8006d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d8c:	3702      	adds	r7, #2
 8006d8e:	9305      	str	r3, [sp, #20]
 8006d90:	4c2c      	ldr	r4, [pc, #176]	; (8006e44 <_svfiprintf_r+0x1d8>)
 8006d92:	7839      	ldrb	r1, [r7, #0]
 8006d94:	2203      	movs	r2, #3
 8006d96:	4620      	mov	r0, r4
 8006d98:	f7f9 fa22 	bl	80001e0 <memchr>
 8006d9c:	b138      	cbz	r0, 8006dae <_svfiprintf_r+0x142>
 8006d9e:	2340      	movs	r3, #64	; 0x40
 8006da0:	1b00      	subs	r0, r0, r4
 8006da2:	fa03 f000 	lsl.w	r0, r3, r0
 8006da6:	9b04      	ldr	r3, [sp, #16]
 8006da8:	4303      	orrs	r3, r0
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	3701      	adds	r7, #1
 8006dae:	7839      	ldrb	r1, [r7, #0]
 8006db0:	4825      	ldr	r0, [pc, #148]	; (8006e48 <_svfiprintf_r+0x1dc>)
 8006db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006db6:	2206      	movs	r2, #6
 8006db8:	1c7e      	adds	r6, r7, #1
 8006dba:	f7f9 fa11 	bl	80001e0 <memchr>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d035      	beq.n	8006e2e <_svfiprintf_r+0x1c2>
 8006dc2:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <_svfiprintf_r+0x1e0>)
 8006dc4:	b9fb      	cbnz	r3, 8006e06 <_svfiprintf_r+0x19a>
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	3307      	adds	r3, #7
 8006dca:	f023 0307 	bic.w	r3, r3, #7
 8006dce:	3308      	adds	r3, #8
 8006dd0:	9303      	str	r3, [sp, #12]
 8006dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd4:	444b      	add	r3, r9
 8006dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd8:	e76c      	b.n	8006cb4 <_svfiprintf_r+0x48>
 8006dda:	fb00 3202 	mla	r2, r0, r2, r3
 8006dde:	2101      	movs	r1, #1
 8006de0:	e7a3      	b.n	8006d2a <_svfiprintf_r+0xbe>
 8006de2:	2300      	movs	r3, #0
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	4618      	mov	r0, r3
 8006de8:	240a      	movs	r4, #10
 8006dea:	460f      	mov	r7, r1
 8006dec:	3101      	adds	r1, #1
 8006dee:	783a      	ldrb	r2, [r7, #0]
 8006df0:	3a30      	subs	r2, #48	; 0x30
 8006df2:	2a09      	cmp	r2, #9
 8006df4:	d903      	bls.n	8006dfe <_svfiprintf_r+0x192>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0ca      	beq.n	8006d90 <_svfiprintf_r+0x124>
 8006dfa:	9005      	str	r0, [sp, #20]
 8006dfc:	e7c8      	b.n	8006d90 <_svfiprintf_r+0x124>
 8006dfe:	fb04 2000 	mla	r0, r4, r0, r2
 8006e02:	2301      	movs	r3, #1
 8006e04:	e7f1      	b.n	8006dea <_svfiprintf_r+0x17e>
 8006e06:	ab03      	add	r3, sp, #12
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	4b10      	ldr	r3, [pc, #64]	; (8006e50 <_svfiprintf_r+0x1e4>)
 8006e0e:	a904      	add	r1, sp, #16
 8006e10:	4640      	mov	r0, r8
 8006e12:	f7fe f8d9 	bl	8004fc8 <_printf_float>
 8006e16:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e1a:	4681      	mov	r9, r0
 8006e1c:	d1d9      	bne.n	8006dd2 <_svfiprintf_r+0x166>
 8006e1e:	89ab      	ldrh	r3, [r5, #12]
 8006e20:	065b      	lsls	r3, r3, #25
 8006e22:	f53f af38 	bmi.w	8006c96 <_svfiprintf_r+0x2a>
 8006e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e28:	b01d      	add	sp, #116	; 0x74
 8006e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2e:	ab03      	add	r3, sp, #12
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	462a      	mov	r2, r5
 8006e34:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <_svfiprintf_r+0x1e4>)
 8006e36:	a904      	add	r1, sp, #16
 8006e38:	4640      	mov	r0, r8
 8006e3a:	f7fe fb7b 	bl	8005534 <_printf_i>
 8006e3e:	e7ea      	b.n	8006e16 <_svfiprintf_r+0x1aa>
 8006e40:	080071cc 	.word	0x080071cc
 8006e44:	080071d2 	.word	0x080071d2
 8006e48:	080071d6 	.word	0x080071d6
 8006e4c:	08004fc9 	.word	0x08004fc9
 8006e50:	08006bb5 	.word	0x08006bb5

08006e54 <_sbrk_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4c06      	ldr	r4, [pc, #24]	; (8006e70 <_sbrk_r+0x1c>)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	f000 f872 	bl	8006f48 <_sbrk>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_sbrk_r+0x1a>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_sbrk_r+0x1a>
 8006e6c:	602b      	str	r3, [r5, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	2000156c 	.word	0x2000156c

08006e74 <__ascii_mbtowc>:
 8006e74:	b082      	sub	sp, #8
 8006e76:	b901      	cbnz	r1, 8006e7a <__ascii_mbtowc+0x6>
 8006e78:	a901      	add	r1, sp, #4
 8006e7a:	b142      	cbz	r2, 8006e8e <__ascii_mbtowc+0x1a>
 8006e7c:	b14b      	cbz	r3, 8006e92 <__ascii_mbtowc+0x1e>
 8006e7e:	7813      	ldrb	r3, [r2, #0]
 8006e80:	600b      	str	r3, [r1, #0]
 8006e82:	7812      	ldrb	r2, [r2, #0]
 8006e84:	1c10      	adds	r0, r2, #0
 8006e86:	bf18      	it	ne
 8006e88:	2001      	movne	r0, #1
 8006e8a:	b002      	add	sp, #8
 8006e8c:	4770      	bx	lr
 8006e8e:	4610      	mov	r0, r2
 8006e90:	e7fb      	b.n	8006e8a <__ascii_mbtowc+0x16>
 8006e92:	f06f 0001 	mvn.w	r0, #1
 8006e96:	e7f8      	b.n	8006e8a <__ascii_mbtowc+0x16>

08006e98 <memmove>:
 8006e98:	4288      	cmp	r0, r1
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	eb01 0302 	add.w	r3, r1, r2
 8006ea0:	d803      	bhi.n	8006eaa <memmove+0x12>
 8006ea2:	1e42      	subs	r2, r0, #1
 8006ea4:	4299      	cmp	r1, r3
 8006ea6:	d10c      	bne.n	8006ec2 <memmove+0x2a>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	4298      	cmp	r0, r3
 8006eac:	d2f9      	bcs.n	8006ea2 <memmove+0xa>
 8006eae:	1881      	adds	r1, r0, r2
 8006eb0:	1ad2      	subs	r2, r2, r3
 8006eb2:	42d3      	cmn	r3, r2
 8006eb4:	d100      	bne.n	8006eb8 <memmove+0x20>
 8006eb6:	bd10      	pop	{r4, pc}
 8006eb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ebc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006ec0:	e7f7      	b.n	8006eb2 <memmove+0x1a>
 8006ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ec6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006eca:	e7eb      	b.n	8006ea4 <memmove+0xc>

08006ecc <__malloc_lock>:
 8006ecc:	4770      	bx	lr

08006ece <__malloc_unlock>:
 8006ece:	4770      	bx	lr

08006ed0 <_realloc_r>:
 8006ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed2:	4607      	mov	r7, r0
 8006ed4:	4614      	mov	r4, r2
 8006ed6:	460e      	mov	r6, r1
 8006ed8:	b921      	cbnz	r1, 8006ee4 <_realloc_r+0x14>
 8006eda:	4611      	mov	r1, r2
 8006edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ee0:	f7ff be0a 	b.w	8006af8 <_malloc_r>
 8006ee4:	b922      	cbnz	r2, 8006ef0 <_realloc_r+0x20>
 8006ee6:	f7ff fdb9 	bl	8006a5c <_free_r>
 8006eea:	4625      	mov	r5, r4
 8006eec:	4628      	mov	r0, r5
 8006eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef0:	f000 f821 	bl	8006f36 <_malloc_usable_size_r>
 8006ef4:	4284      	cmp	r4, r0
 8006ef6:	d90f      	bls.n	8006f18 <_realloc_r+0x48>
 8006ef8:	4621      	mov	r1, r4
 8006efa:	4638      	mov	r0, r7
 8006efc:	f7ff fdfc 	bl	8006af8 <_malloc_r>
 8006f00:	4605      	mov	r5, r0
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d0f2      	beq.n	8006eec <_realloc_r+0x1c>
 8006f06:	4631      	mov	r1, r6
 8006f08:	4622      	mov	r2, r4
 8006f0a:	f7fd ffb3 	bl	8004e74 <memcpy>
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4638      	mov	r0, r7
 8006f12:	f7ff fda3 	bl	8006a5c <_free_r>
 8006f16:	e7e9      	b.n	8006eec <_realloc_r+0x1c>
 8006f18:	4635      	mov	r5, r6
 8006f1a:	e7e7      	b.n	8006eec <_realloc_r+0x1c>

08006f1c <__ascii_wctomb>:
 8006f1c:	b149      	cbz	r1, 8006f32 <__ascii_wctomb+0x16>
 8006f1e:	2aff      	cmp	r2, #255	; 0xff
 8006f20:	bf85      	ittet	hi
 8006f22:	238a      	movhi	r3, #138	; 0x8a
 8006f24:	6003      	strhi	r3, [r0, #0]
 8006f26:	700a      	strbls	r2, [r1, #0]
 8006f28:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f2c:	bf98      	it	ls
 8006f2e:	2001      	movls	r0, #1
 8006f30:	4770      	bx	lr
 8006f32:	4608      	mov	r0, r1
 8006f34:	4770      	bx	lr

08006f36 <_malloc_usable_size_r>:
 8006f36:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	f1a0 0004 	sub.w	r0, r0, #4
 8006f40:	bfbc      	itt	lt
 8006f42:	580b      	ldrlt	r3, [r1, r0]
 8006f44:	18c0      	addlt	r0, r0, r3
 8006f46:	4770      	bx	lr

08006f48 <_sbrk>:
 8006f48:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <_sbrk+0x14>)
 8006f4a:	6819      	ldr	r1, [r3, #0]
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	b909      	cbnz	r1, 8006f54 <_sbrk+0xc>
 8006f50:	4903      	ldr	r1, [pc, #12]	; (8006f60 <_sbrk+0x18>)
 8006f52:	6019      	str	r1, [r3, #0]
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	4402      	add	r2, r0
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	4770      	bx	lr
 8006f5c:	2000023c 	.word	0x2000023c
 8006f60:	20001570 	.word	0x20001570

08006f64 <_init>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	bf00      	nop
 8006f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6a:	bc08      	pop	{r3}
 8006f6c:	469e      	mov	lr, r3
 8006f6e:	4770      	bx	lr

08006f70 <_fini>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	bf00      	nop
 8006f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f76:	bc08      	pop	{r3}
 8006f78:	469e      	mov	lr, r3
 8006f7a:	4770      	bx	lr
