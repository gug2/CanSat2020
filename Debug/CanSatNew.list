
CanSatNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08008c18  08008c18  00018c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08009030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
  8 .bss          00001344  200001e4  200001e4  000201e4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001528  20001528  000201e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026705  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000044f3  00000000  00000000  00046919  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00015cd0  00000000  00000000  0004ae0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  00060ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001be8  00000000  00000000  00061bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ad8a  00000000  00000000  000637b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006e8a  00000000  00000000  0006e542  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000753cc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004170  00000000  00000000  00075448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c00 	.word	0x08008c00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008c00 	.word	0x08008c00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_ldivmod>:
 8000c40:	b97b      	cbnz	r3, 8000c62 <__aeabi_ldivmod+0x22>
 8000c42:	b972      	cbnz	r2, 8000c62 <__aeabi_ldivmod+0x22>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bfbe      	ittt	lt
 8000c48:	2000      	movlt	r0, #0
 8000c4a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c4e:	e006      	blt.n	8000c5e <__aeabi_ldivmod+0x1e>
 8000c50:	bf08      	it	eq
 8000c52:	2800      	cmpeq	r0, #0
 8000c54:	bf1c      	itt	ne
 8000c56:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c5a:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5e:	f000 b9c5 	b.w	8000fec <__aeabi_idiv0>
 8000c62:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c66:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	db09      	blt.n	8000c82 <__aeabi_ldivmod+0x42>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db1a      	blt.n	8000ca8 <__aeabi_ldivmod+0x68>
 8000c72:	f000 f84d 	bl	8000d10 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4770      	bx	lr
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db1b      	blt.n	8000cc4 <__aeabi_ldivmod+0x84>
 8000c8c:	f000 f840 	bl	8000d10 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	f000 f82f 	bl	8000d10 <__udivmoddi4>
 8000cb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cba:	b004      	add	sp, #16
 8000cbc:	4240      	negs	r0, r0
 8000cbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc2:	4770      	bx	lr
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cca:	f000 f821 	bl	8000d10 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4252      	negs	r2, r2
 8000cda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_uldivmod>:
 8000ce0:	b953      	cbnz	r3, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce2:	b94a      	cbnz	r2, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	2800      	cmpeq	r0, #0
 8000cea:	bf1c      	itt	ne
 8000cec:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf4:	f000 b97a 	b.w	8000fec <__aeabi_idiv0>
 8000cf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d00:	f000 f806 	bl	8000d10 <__udivmoddi4>
 8000d04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d0c:	b004      	add	sp, #16
 8000d0e:	4770      	bx	lr

08000d10 <__udivmoddi4>:
 8000d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d14:	468c      	mov	ip, r1
 8000d16:	460d      	mov	r5, r1
 8000d18:	4604      	mov	r4, r0
 8000d1a:	9e08      	ldr	r6, [sp, #32]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d151      	bne.n	8000dc4 <__udivmoddi4+0xb4>
 8000d20:	428a      	cmp	r2, r1
 8000d22:	4617      	mov	r7, r2
 8000d24:	d96d      	bls.n	8000e02 <__udivmoddi4+0xf2>
 8000d26:	fab2 fe82 	clz	lr, r2
 8000d2a:	f1be 0f00 	cmp.w	lr, #0
 8000d2e:	d00b      	beq.n	8000d48 <__udivmoddi4+0x38>
 8000d30:	f1ce 0c20 	rsb	ip, lr, #32
 8000d34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d4c:	0c25      	lsrs	r5, r4, #16
 8000d4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d52:	fa1f f987 	uxth.w	r9, r7
 8000d56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d5e:	fb08 f309 	mul.w	r3, r8, r9
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x6c>
 8000d66:	19ed      	adds	r5, r5, r7
 8000d68:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d6c:	f080 8123 	bcs.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	f240 8120 	bls.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	443d      	add	r5, r7
 8000d7c:	1aed      	subs	r5, r5, r3
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d8c:	fb00 f909 	mul.w	r9, r0, r9
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x98>
 8000d94:	19e4      	adds	r4, r4, r7
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	f080 810a 	bcs.w	8000fb2 <__udivmoddi4+0x2a2>
 8000d9e:	45a1      	cmp	r9, r4
 8000da0:	f240 8107 	bls.w	8000fb2 <__udivmoddi4+0x2a2>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 0409 	sub.w	r4, r4, r9
 8000dac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db0:	2100      	movs	r1, #0
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d061      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000db6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000dba:	2300      	movs	r3, #0
 8000dbc:	6034      	str	r4, [r6, #0]
 8000dbe:	6073      	str	r3, [r6, #4]
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0xc8>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d054      	beq.n	8000e76 <__udivmoddi4+0x166>
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	fab3 f183 	clz	r1, r3
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	f040 808e 	bne.w	8000efe <__udivmoddi4+0x1ee>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xdc>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 80fa 	bhi.w	8000fe0 <__udivmoddi4+0x2d0>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb65 0503 	sbc.w	r5, r5, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	46ac      	mov	ip, r5
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	d03f      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000dfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	b912      	cbnz	r2, 8000e0a <__udivmoddi4+0xfa>
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e0a:	fab7 fe87 	clz	lr, r7
 8000e0e:	f1be 0f00 	cmp.w	lr, #0
 8000e12:	d134      	bne.n	8000e7e <__udivmoddi4+0x16e>
 8000e14:	1beb      	subs	r3, r5, r7
 8000e16:	0c3a      	lsrs	r2, r7, #16
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e22:	0c25      	lsrs	r5, r4, #16
 8000e24:	fb02 3318 	mls	r3, r2, r8, r3
 8000e28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e2c:	fb0c f308 	mul.w	r3, ip, r8
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x134>
 8000e34:	19ed      	adds	r5, r5, r7
 8000e36:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x132>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	f200 80d1 	bhi.w	8000fe4 <__udivmoddi4+0x2d4>
 8000e42:	4680      	mov	r8, r0
 8000e44:	1aed      	subs	r5, r5, r3
 8000e46:	b2a3      	uxth	r3, r4
 8000e48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e54:	fb0c fc00 	mul.w	ip, ip, r0
 8000e58:	45a4      	cmp	ip, r4
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x15c>
 8000e5c:	19e4      	adds	r4, r4, r7
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x15a>
 8000e64:	45a4      	cmp	ip, r4
 8000e66:	f200 80b8 	bhi.w	8000fda <__udivmoddi4+0x2ca>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	eba4 040c 	sub.w	r4, r4, ip
 8000e70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e74:	e79d      	b.n	8000db2 <__udivmoddi4+0xa2>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	f1ce 0420 	rsb	r4, lr, #32
 8000e82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e8e:	0c3a      	lsrs	r2, r7, #16
 8000e90:	fa25 f404 	lsr.w	r4, r5, r4
 8000e94:	ea48 0803 	orr.w	r8, r8, r3
 8000e98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ea0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ea4:	fa1f fc87 	uxth.w	ip, r7
 8000ea8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000eac:	fb01 f30c 	mul.w	r3, r1, ip
 8000eb0:	42ab      	cmp	r3, r5
 8000eb2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000eb6:	d909      	bls.n	8000ecc <__udivmoddi4+0x1bc>
 8000eb8:	19ed      	adds	r5, r5, r7
 8000eba:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ebe:	f080 808a 	bcs.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec2:	42ab      	cmp	r3, r5
 8000ec4:	f240 8087 	bls.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec8:	3902      	subs	r1, #2
 8000eca:	443d      	add	r5, r7
 8000ecc:	1aeb      	subs	r3, r5, r3
 8000ece:	fa1f f588 	uxth.w	r5, r8
 8000ed2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ed6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ede:	fb00 f30c 	mul.w	r3, r0, ip
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1e6>
 8000ee6:	19ed      	adds	r5, r5, r7
 8000ee8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eec:	d26f      	bcs.n	8000fce <__udivmoddi4+0x2be>
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d96d      	bls.n	8000fce <__udivmoddi4+0x2be>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	443d      	add	r5, r7
 8000ef6:	1aeb      	subs	r3, r5, r3
 8000ef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efc:	e78f      	b.n	8000e1e <__udivmoddi4+0x10e>
 8000efe:	f1c1 0720 	rsb	r7, r1, #32
 8000f02:	fa22 f807 	lsr.w	r8, r2, r7
 8000f06:	408b      	lsls	r3, r1
 8000f08:	fa05 f401 	lsl.w	r4, r5, r1
 8000f0c:	ea48 0303 	orr.w	r3, r8, r3
 8000f10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f2a:	fa1f f883 	uxth.w	r8, r3
 8000f2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f32:	fb09 f408 	mul.w	r4, r9, r8
 8000f36:	42ac      	cmp	r4, r5
 8000f38:	fa02 f201 	lsl.w	r2, r2, r1
 8000f3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x244>
 8000f42:	18ed      	adds	r5, r5, r3
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d243      	bcs.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	d941      	bls.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	441d      	add	r5, r3
 8000f54:	1b2d      	subs	r5, r5, r4
 8000f56:	fa1f fe8e 	uxth.w	lr, lr
 8000f5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45a0      	cmp	r8, r4
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x26e>
 8000f6e:	18e4      	adds	r4, r4, r3
 8000f70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f74:	d229      	bcs.n	8000fca <__udivmoddi4+0x2ba>
 8000f76:	45a0      	cmp	r8, r4
 8000f78:	d927      	bls.n	8000fca <__udivmoddi4+0x2ba>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	441c      	add	r4, r3
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba4 0408 	sub.w	r4, r4, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454c      	cmp	r4, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	464d      	mov	r5, r9
 8000f90:	d315      	bcc.n	8000fbe <__udivmoddi4+0x2ae>
 8000f92:	d012      	beq.n	8000fba <__udivmoddi4+0x2aa>
 8000f94:	b156      	cbz	r6, 8000fac <__udivmoddi4+0x29c>
 8000f96:	ebba 030e 	subs.w	r3, sl, lr
 8000f9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000fa2:	40cb      	lsrs	r3, r1
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	40cc      	lsrs	r4, r1
 8000fa8:	6037      	str	r7, [r6, #0]
 8000faa:	6074      	str	r4, [r6, #4]
 8000fac:	2100      	movs	r1, #0
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e6f8      	b.n	8000da8 <__udivmoddi4+0x98>
 8000fb6:	4690      	mov	r8, r2
 8000fb8:	e6e0      	b.n	8000d7c <__udivmoddi4+0x6c>
 8000fba:	45c2      	cmp	sl, r8
 8000fbc:	d2ea      	bcs.n	8000f94 <__udivmoddi4+0x284>
 8000fbe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc2:	eb69 0503 	sbc.w	r5, r9, r3
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7e4      	b.n	8000f94 <__udivmoddi4+0x284>
 8000fca:	4628      	mov	r0, r5
 8000fcc:	e7d7      	b.n	8000f7e <__udivmoddi4+0x26e>
 8000fce:	4640      	mov	r0, r8
 8000fd0:	e791      	b.n	8000ef6 <__udivmoddi4+0x1e6>
 8000fd2:	4681      	mov	r9, r0
 8000fd4:	e7be      	b.n	8000f54 <__udivmoddi4+0x244>
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	e778      	b.n	8000ecc <__udivmoddi4+0x1bc>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	443c      	add	r4, r7
 8000fde:	e745      	b.n	8000e6c <__udivmoddi4+0x15c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xe6>
 8000fe4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe8:	443d      	add	r5, r7
 8000fea:	e72b      	b.n	8000e44 <__udivmoddi4+0x134>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_InitTick+0x3c>)
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_InitTick+0x40>)
{
 8000ff6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	7818      	ldrb	r0, [r3, #0]
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f0 	udiv	r3, r3, r0
 8001002:	6810      	ldr	r0, [r2, #0]
 8001004:	fbb0 f0f3 	udiv	r0, r0, r3
 8001008:	f000 f8aa 	bl	8001160 <HAL_SYSTICK_Config>
 800100c:	4604      	mov	r4, r0
 800100e:	b958      	cbnz	r0, 8001028 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001010:	2d0f      	cmp	r5, #15
 8001012:	d809      	bhi.n	8001028 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	4602      	mov	r2, r0
 8001016:	4629      	mov	r1, r5
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f85e 	bl	80010dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <HAL_InitTick+0x44>)
 8001022:	4620      	mov	r0, r4
 8001024:	601d      	str	r5, [r3, #0]
 8001026:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001028:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800102a:	bd38      	pop	{r3, r4, r5, pc}
 800102c:	2000000c 	.word	0x2000000c
 8001030:	20000000 	.word	0x20000000
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_Init>:
{
 8001038:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_Init+0x30>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001042:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800104a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001052:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f82f 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff ffc8 	bl	8000ff0 <HAL_InitTick>
  HAL_MspInit();
 8001060:	f004 fe8c 	bl	8005d7c <HAL_MspInit>
}
 8001064:	2000      	movs	r0, #0
 8001066:	bd08      	pop	{r3, pc}
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800106c:	4a03      	ldr	r2, [pc, #12]	; (800107c <HAL_IncTick+0x10>)
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_IncTick+0x14>)
 8001070:	6811      	ldr	r1, [r2, #0]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	440b      	add	r3, r1
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000240 	.word	0x20000240
 8001080:	20000000 	.word	0x20000000

08001084 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001084:	4b01      	ldr	r3, [pc, #4]	; (800108c <HAL_GetTick+0x8>)
 8001086:	6818      	ldr	r0, [r3, #0]
}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000240 	.word	0x20000240

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b538      	push	{r3, r4, r5, lr}
 8001092:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff fff6 	bl	8001084 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001098:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	bf1c      	itt	ne
 800109c:	4b05      	ldrne	r3, [pc, #20]	; (80010b4 <HAL_Delay+0x24>)
 800109e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80010a2:	bf18      	it	ne
 80010a4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	f7ff ffed 	bl	8001084 <HAL_GetTick>
 80010aa:	1b40      	subs	r0, r0, r5
 80010ac:	4284      	cmp	r4, r0
 80010ae:	d8fa      	bhi.n	80010a6 <HAL_Delay+0x16>
  {
  }
}
 80010b0:	bd38      	pop	{r3, r4, r5, pc}
 80010b2:	bf00      	nop
 80010b4:	20000000 	.word	0x20000000

080010b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010c0:	041b      	lsls	r3, r3, #16
 80010c2:	0c1b      	lsrs	r3, r3, #16
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	0200      	lsls	r0, r0, #8
 80010ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80010d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010d4:	60d3      	str	r3, [r2, #12]
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b530      	push	{r4, r5, lr}
 80010e0:	68dc      	ldr	r4, [r3, #12]
 80010e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	bf28      	it	cs
 80010f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 0501 	mov.w	r5, #1
 80010f8:	fa05 f303 	lsl.w	r3, r5, r3
 80010fc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001100:	bf8c      	ite	hi
 8001102:	3c03      	subhi	r4, #3
 8001104:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001106:	4019      	ands	r1, r3
 8001108:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110a:	fa05 f404 	lsl.w	r4, r5, r4
 800110e:	3c01      	subs	r4, #1
 8001110:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001112:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	ea42 0201 	orr.w	r2, r2, r1
 8001118:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	bfad      	iteet	ge
 800111e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	f000 000f 	andlt.w	r0, r0, #15
 8001126:	4b06      	ldrlt	r3, [pc, #24]	; (8001140 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	bfb5      	itete	lt
 800112e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001138:	bd30      	pop	{r4, r5, pc}
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	e000ed14 	.word	0xe000ed14

08001144 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001144:	2800      	cmp	r0, #0
 8001146:	db08      	blt.n	800115a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001148:	0942      	lsrs	r2, r0, #5
 800114a:	2301      	movs	r3, #1
 800114c:	f000 001f 	and.w	r0, r0, #31
 8001150:	fa03 f000 	lsl.w	r0, r3, r0
 8001154:	4b01      	ldr	r3, [pc, #4]	; (800115c <HAL_NVIC_EnableIRQ+0x18>)
 8001156:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100

08001160 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	3801      	subs	r0, #1
 8001162:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001166:	d20a      	bcs.n	800117e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	21f0      	movs	r1, #240	; 0xf0
 8001170:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800118e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001190:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001192:	bf0c      	ite	eq
 8001194:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001198:	f022 0204 	bicne.w	r2, r2, #4
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	4770      	bx	lr
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80011a4:	4770      	bx	lr

080011a6 <HAL_SYSTICK_IRQHandler>:
{
 80011a6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80011a8:	f7ff fffc 	bl	80011a4 <HAL_SYSTICK_Callback>
 80011ac:	bd08      	pop	{r3, pc}

080011ae <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ae:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d003      	beq.n	80011be <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80011ba:	2001      	movs	r0, #1
 80011bc:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011be:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c0:	2305      	movs	r3, #5
 80011c2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80011c6:	6813      	ldr	r3, [r2, #0]
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80011ce:	2000      	movs	r0, #0
}
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800138c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e0:	4a68      	ldr	r2, [pc, #416]	; (8001384 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001390 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80011ea:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ec:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80011ee:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80011f2:	42ac      	cmp	r4, r5
 80011f4:	f040 80b0 	bne.w	8001358 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011f8:	684c      	ldr	r4, [r1, #4]
 80011fa:	f024 0c10 	bic.w	ip, r4, #16
 80011fe:	f10c 36ff 	add.w	r6, ip, #4294967295
 8001202:	2e01      	cmp	r6, #1
 8001204:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001208:	d812      	bhi.n	8001230 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800120a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800120c:	2603      	movs	r6, #3
 800120e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001212:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001216:	68ce      	ldr	r6, [r1, #12]
 8001218:	fa06 f60e 	lsl.w	r6, r6, lr
 800121c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800121e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001220:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001222:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001226:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800122a:	409e      	lsls	r6, r3
 800122c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800122e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001230:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8001232:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001234:	fa06 f60e 	lsl.w	r6, r6, lr
 8001238:	43f6      	mvns	r6, r6
 800123a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123e:	688f      	ldr	r7, [r1, #8]
 8001240:	fa07 f70e 	lsl.w	r7, r7, lr
 8001244:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001248:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800124c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124e:	d116      	bne.n	800127e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8001250:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001254:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001258:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800125c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001260:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001264:	f04f 0c0f 	mov.w	ip, #15
 8001268:	fa0c fc0b 	lsl.w	ip, ip, fp
 800126c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001270:	690f      	ldr	r7, [r1, #16]
 8001272:	fa07 f70b 	lsl.w	r7, r7, fp
 8001276:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800127a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800127e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001280:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001282:	f004 0703 	and.w	r7, r4, #3
 8001286:	fa07 fe0e 	lsl.w	lr, r7, lr
 800128a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800128e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001290:	00e6      	lsls	r6, r4, #3
 8001292:	d561      	bpl.n	8001358 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	f04f 0b00 	mov.w	fp, #0
 8001298:	f8cd b00c 	str.w	fp, [sp, #12]
 800129c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a0:	4e39      	ldr	r6, [pc, #228]	; (8001388 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80012a6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80012aa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80012ae:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80012b2:	9703      	str	r7, [sp, #12]
 80012b4:	9f03      	ldr	r7, [sp, #12]
 80012b6:	f023 0703 	bic.w	r7, r3, #3
 80012ba:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80012be:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ca:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80012ce:	f04f 0e0f 	mov.w	lr, #15
 80012d2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012dc:	d043      	beq.n	8001366 <HAL_GPIO_Init+0x192>
 80012de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012e2:	42b0      	cmp	r0, r6
 80012e4:	d041      	beq.n	800136a <HAL_GPIO_Init+0x196>
 80012e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012ea:	42b0      	cmp	r0, r6
 80012ec:	d03f      	beq.n	800136e <HAL_GPIO_Init+0x19a>
 80012ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012f2:	42b0      	cmp	r0, r6
 80012f4:	d03d      	beq.n	8001372 <HAL_GPIO_Init+0x19e>
 80012f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012fa:	42b0      	cmp	r0, r6
 80012fc:	d03b      	beq.n	8001376 <HAL_GPIO_Init+0x1a2>
 80012fe:	4548      	cmp	r0, r9
 8001300:	d03b      	beq.n	800137a <HAL_GPIO_Init+0x1a6>
 8001302:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001306:	42b0      	cmp	r0, r6
 8001308:	d039      	beq.n	800137e <HAL_GPIO_Init+0x1aa>
 800130a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800130e:	42b0      	cmp	r0, r6
 8001310:	bf14      	ite	ne
 8001312:	2608      	movne	r6, #8
 8001314:	2607      	moveq	r6, #7
 8001316:	fa06 f60c 	lsl.w	r6, r6, ip
 800131a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800131e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001320:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001322:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001324:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001328:	bf0c      	ite	eq
 800132a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800132c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800132e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001330:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001332:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001336:	bf0c      	ite	eq
 8001338:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800133a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800133c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001340:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001344:	bf0c      	ite	eq
 8001346:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001348:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800134a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800134c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800134e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001350:	bf54      	ite	pl
 8001352:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001354:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8001356:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001358:	3301      	adds	r3, #1
 800135a:	2b10      	cmp	r3, #16
 800135c:	f47f af45 	bne.w	80011ea <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001360:	b005      	add	sp, #20
 8001362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001366:	465e      	mov	r6, fp
 8001368:	e7d5      	b.n	8001316 <HAL_GPIO_Init+0x142>
 800136a:	2601      	movs	r6, #1
 800136c:	e7d3      	b.n	8001316 <HAL_GPIO_Init+0x142>
 800136e:	2602      	movs	r6, #2
 8001370:	e7d1      	b.n	8001316 <HAL_GPIO_Init+0x142>
 8001372:	2603      	movs	r6, #3
 8001374:	e7cf      	b.n	8001316 <HAL_GPIO_Init+0x142>
 8001376:	2604      	movs	r6, #4
 8001378:	e7cd      	b.n	8001316 <HAL_GPIO_Init+0x142>
 800137a:	2605      	movs	r6, #5
 800137c:	e7cb      	b.n	8001316 <HAL_GPIO_Init+0x142>
 800137e:	2606      	movs	r6, #6
 8001380:	e7c9      	b.n	8001316 <HAL_GPIO_Init+0x142>
 8001382:	bf00      	nop
 8001384:	40013c00 	.word	0x40013c00
 8001388:	40020000 	.word	0x40020000
 800138c:	40023800 	.word	0x40023800
 8001390:	40021400 	.word	0x40021400

08001394 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001394:	b10a      	cbz	r2, 800139a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001396:	6181      	str	r1, [r0, #24]
 8001398:	4770      	bx	lr
 800139a:	0409      	lsls	r1, r1, #16
 800139c:	e7fb      	b.n	8001396 <HAL_GPIO_WritePin+0x2>

0800139e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800139e:	6801      	ldr	r1, [r0, #0]
 80013a0:	694b      	ldr	r3, [r1, #20]
 80013a2:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	d010      	beq.n	80013ce <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013ac:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80013b0:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80013b2:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80013b4:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80013b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013ba:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013be:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80013ca:	2001      	movs	r0, #1
 80013cc:	4770      	bx	lr
  }
  return HAL_OK;
 80013ce:	4618      	mov	r0, r3
}
 80013d0:	4770      	bx	lr

080013d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80013d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013d6:	4604      	mov	r4, r0
 80013d8:	4617      	mov	r7, r2
 80013da:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013dc:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80013e0:	b28e      	uxth	r6, r1
 80013e2:	6825      	ldr	r5, [r4, #0]
 80013e4:	f1b8 0f01 	cmp.w	r8, #1
 80013e8:	bf0c      	ite	eq
 80013ea:	696b      	ldreq	r3, [r5, #20]
 80013ec:	69ab      	ldrne	r3, [r5, #24]
 80013ee:	ea36 0303 	bics.w	r3, r6, r3
 80013f2:	bf14      	ite	ne
 80013f4:	2001      	movne	r0, #1
 80013f6:	2000      	moveq	r0, #0
 80013f8:	b908      	cbnz	r0, 80013fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80013fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013fe:	696b      	ldr	r3, [r5, #20]
 8001400:	055a      	lsls	r2, r3, #21
 8001402:	d516      	bpl.n	8001432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800140c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001410:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001412:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001414:	2300      	movs	r3, #0
 8001416:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001418:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800141c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001420:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001422:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001426:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001428:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800142c:	2001      	movs	r0, #1
 800142e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001432:	1c7b      	adds	r3, r7, #1
 8001434:	d0d5      	beq.n	80013e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001436:	f7ff fe25 	bl	8001084 <HAL_GetTick>
 800143a:	eba0 0009 	sub.w	r0, r0, r9
 800143e:	4287      	cmp	r7, r0
 8001440:	d301      	bcc.n	8001446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8001442:	2f00      	cmp	r7, #0
 8001444:	d1cd      	bne.n	80013e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001446:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001448:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800144a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800144c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001450:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001454:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001456:	f042 0220 	orr.w	r2, r2, #32
 800145a:	e7e4      	b.n	8001426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

0800145c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800145c:	b570      	push	{r4, r5, r6, lr}
 800145e:	4604      	mov	r4, r0
 8001460:	460d      	mov	r5, r1
 8001462:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	075b      	lsls	r3, r3, #29
 800146a:	d501      	bpl.n	8001470 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800146c:	2000      	movs	r0, #0
 800146e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff ff94 	bl	800139e <I2C_IsAcknowledgeFailed>
 8001476:	b9a8      	cbnz	r0, 80014a4 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001478:	1c6a      	adds	r2, r5, #1
 800147a:	d0f3      	beq.n	8001464 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800147c:	f7ff fe02 	bl	8001084 <HAL_GetTick>
 8001480:	1b80      	subs	r0, r0, r6
 8001482:	4285      	cmp	r5, r0
 8001484:	d301      	bcc.n	800148a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001486:	2d00      	cmp	r5, #0
 8001488:	d1ec      	bne.n	8001464 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800148a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800148c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800148e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001490:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001494:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001498:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800149a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800149e:	f042 0220 	orr.w	r2, r2, #32
 80014a2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80014a4:	2001      	movs	r0, #1
}
 80014a6:	bd70      	pop	{r4, r5, r6, pc}

080014a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80014a8:	b570      	push	{r4, r5, r6, lr}
 80014aa:	4604      	mov	r4, r0
 80014ac:	460d      	mov	r5, r1
 80014ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	6943      	ldr	r3, [r0, #20]
 80014b4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80014b8:	d001      	beq.n	80014be <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80014ba:	2000      	movs	r0, #0
}
 80014bc:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80014be:	6942      	ldr	r2, [r0, #20]
 80014c0:	06d2      	lsls	r2, r2, #27
 80014c2:	d50e      	bpl.n	80014e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014c4:	f06f 0210 	mvn.w	r2, #16
 80014c8:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80014ca:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80014cc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80014d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014d8:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80014da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80014de:	2001      	movs	r0, #1
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e2:	f7ff fdcf 	bl	8001084 <HAL_GetTick>
 80014e6:	1b80      	subs	r0, r0, r6
 80014e8:	42a8      	cmp	r0, r5
 80014ea:	d801      	bhi.n	80014f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80014ec:	2d00      	cmp	r5, #0
 80014ee:	d1df      	bne.n	80014b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80014f0:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80014f2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80014f4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001500:	f042 0220 	orr.w	r2, r2, #32
 8001504:	e7e8      	b.n	80014d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001506 <I2C_WaitOnFlagUntilTimeout>:
{
 8001506:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800150a:	9e08      	ldr	r6, [sp, #32]
 800150c:	4604      	mov	r4, r0
 800150e:	4690      	mov	r8, r2
 8001510:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001512:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001516:	b28d      	uxth	r5, r1
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	f1b9 0f01 	cmp.w	r9, #1
 800151e:	bf0c      	ite	eq
 8001520:	695b      	ldreq	r3, [r3, #20]
 8001522:	699b      	ldrne	r3, [r3, #24]
 8001524:	ea35 0303 	bics.w	r3, r5, r3
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	4543      	cmp	r3, r8
 8001530:	d002      	beq.n	8001538 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001532:	2000      	movs	r0, #0
}
 8001534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001538:	1c7b      	adds	r3, r7, #1
 800153a:	d0ed      	beq.n	8001518 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800153c:	f7ff fda2 	bl	8001084 <HAL_GetTick>
 8001540:	1b80      	subs	r0, r0, r6
 8001542:	4287      	cmp	r7, r0
 8001544:	d301      	bcc.n	800154a <I2C_WaitOnFlagUntilTimeout+0x44>
 8001546:	2f00      	cmp	r7, #0
 8001548:	d1e6      	bne.n	8001518 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800154a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800154c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800154e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001550:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001554:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001558:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800155a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800155e:	f042 0220 	orr.w	r2, r2, #32
 8001562:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001564:	2001      	movs	r0, #1
 8001566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800156a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800156a:	b570      	push	{r4, r5, r6, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	460d      	mov	r5, r1
 8001570:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	061b      	lsls	r3, r3, #24
 8001578:	d501      	bpl.n	800157e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800157a:	2000      	movs	r0, #0
 800157c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff ff0d 	bl	800139e <I2C_IsAcknowledgeFailed>
 8001584:	b9a8      	cbnz	r0, 80015b2 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001586:	1c6a      	adds	r2, r5, #1
 8001588:	d0f3      	beq.n	8001572 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800158a:	f7ff fd7b 	bl	8001084 <HAL_GetTick>
 800158e:	1b80      	subs	r0, r0, r6
 8001590:	4285      	cmp	r5, r0
 8001592:	d301      	bcc.n	8001598 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001594:	2d00      	cmp	r5, #0
 8001596:	d1ec      	bne.n	8001572 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001598:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800159a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800159c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800159e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80015a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ac:	f042 0220 	orr.w	r2, r2, #32
 80015b0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80015b2:	2001      	movs	r0, #1
}
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080015b8 <I2C_RequestMemoryWrite>:
{
 80015b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80015bc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015be:	6802      	ldr	r2, [r0, #0]
{
 80015c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80015c2:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]
{
 80015cc:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015d0:	9600      	str	r6, [sp, #0]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80015d8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015da:	f7ff ff94 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	b138      	cbz	r0, 80015f2 <I2C_RequestMemoryWrite+0x3a>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	05db      	lsls	r3, r3, #23
 80015e6:	d502      	bpl.n	80015ee <I2C_RequestMemoryWrite+0x36>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ec:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80015ee:	2003      	movs	r0, #3
 80015f0:	e00a      	b.n	8001608 <I2C_RequestMemoryWrite+0x50>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015f2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80015f6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80015fa:	4919      	ldr	r1, [pc, #100]	; (8001660 <I2C_RequestMemoryWrite+0xa8>)
 80015fc:	4633      	mov	r3, r6
 80015fe:	4620      	mov	r0, r4
 8001600:	f7ff fee7 	bl	80013d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001604:	b118      	cbz	r0, 800160e <I2C_RequestMemoryWrite+0x56>
      return HAL_ERROR;
 8001606:	2001      	movs	r0, #1
}
 8001608:	b004      	add	sp, #16
 800160a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	9003      	str	r0, [sp, #12]
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	9203      	str	r2, [sp, #12]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800161a:	4632      	mov	r2, r6
 800161c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff ffa2 	bl	800156a <I2C_WaitOnTXEFlagUntilTimeout>
 8001626:	b140      	cbz	r0, 800163a <I2C_RequestMemoryWrite+0x82>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800162a:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162c:	bf01      	itttt	eq
 800162e:	6822      	ldreq	r2, [r4, #0]
 8001630:	6813      	ldreq	r3, [r2, #0]
 8001632:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001636:	6013      	streq	r3, [r2, #0]
 8001638:	e7e5      	b.n	8001606 <I2C_RequestMemoryWrite+0x4e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800163a:	f1b8 0f01 	cmp.w	r8, #1
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	d102      	bne.n	8001648 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001642:	b2ed      	uxtb	r5, r5
 8001644:	611d      	str	r5, [r3, #16]
 8001646:	e7df      	b.n	8001608 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001648:	0a2a      	lsrs	r2, r5, #8
 800164a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800164c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800164e:	4632      	mov	r2, r6
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff ff8a 	bl	800156a <I2C_WaitOnTXEFlagUntilTimeout>
 8001656:	2800      	cmp	r0, #0
 8001658:	d1e6      	bne.n	8001628 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	e7f1      	b.n	8001642 <I2C_RequestMemoryWrite+0x8a>
 800165e:	bf00      	nop
 8001660:	00010002 	.word	0x00010002

08001664 <I2C_RequestMemoryRead>:
{
 8001664:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001668:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800166a:	6803      	ldr	r3, [r0, #0]
{
 800166c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800166e:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001676:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167e:	601a      	str	r2, [r3, #0]
{
 8001680:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001684:	9500      	str	r5, [sp, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800168c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800168e:	f7ff ff3a 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	b148      	cbz	r0, 80016aa <I2C_RequestMemoryRead+0x46>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	05db      	lsls	r3, r3, #23
 800169a:	d502      	bpl.n	80016a2 <I2C_RequestMemoryRead+0x3e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800169c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80016a2:	2003      	movs	r0, #3
}
 80016a4:	b004      	add	sp, #16
 80016a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016aa:	b2ff      	uxtb	r7, r7
 80016ac:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80016b0:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016b2:	492a      	ldr	r1, [pc, #168]	; (800175c <I2C_RequestMemoryRead+0xf8>)
 80016b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80016b6:	462b      	mov	r3, r5
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fe8a 	bl	80013d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016be:	b108      	cbz	r0, 80016c4 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 80016c0:	2001      	movs	r0, #1
 80016c2:	e7ef      	b.n	80016a4 <I2C_RequestMemoryRead+0x40>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	9003      	str	r0, [sp, #12]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	9203      	str	r2, [sp, #12]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016d0:	462a      	mov	r2, r5
 80016d2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016d4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff ff47 	bl	800156a <I2C_WaitOnTXEFlagUntilTimeout>
 80016dc:	b140      	cbz	r0, 80016f0 <I2C_RequestMemoryRead+0x8c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016e0:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e2:	bf01      	itttt	eq
 80016e4:	6822      	ldreq	r2, [r4, #0]
 80016e6:	6813      	ldreq	r3, [r2, #0]
 80016e8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80016ec:	6013      	streq	r3, [r2, #0]
 80016ee:	e7e7      	b.n	80016c0 <I2C_RequestMemoryRead+0x5c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016f0:	f1b8 0f01 	cmp.w	r8, #1
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	d125      	bne.n	8001744 <I2C_RequestMemoryRead+0xe0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016f8:	b2f6      	uxtb	r6, r6
 80016fa:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016fc:	462a      	mov	r2, r5
 80016fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff ff32 	bl	800156a <I2C_WaitOnTXEFlagUntilTimeout>
 8001706:	4602      	mov	r2, r0
 8001708:	2800      	cmp	r0, #0
 800170a:	d1e8      	bne.n	80016de <I2C_RequestMemoryRead+0x7a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800170c:	6821      	ldr	r1, [r4, #0]
 800170e:	680b      	ldr	r3, [r1, #0]
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001716:	4620      	mov	r0, r4
 8001718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800171a:	9500      	str	r5, [sp, #0]
 800171c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001720:	f7ff fef1 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	2800      	cmp	r0, #0
 8001728:	d1b5      	bne.n	8001696 <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800172a:	f047 0701 	orr.w	r7, r7, #1
 800172e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001732:	490a      	ldr	r1, [pc, #40]	; (800175c <I2C_RequestMemoryRead+0xf8>)
 8001734:	462b      	mov	r3, r5
 8001736:	4620      	mov	r0, r4
 8001738:	f7ff fe4b 	bl	80013d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 800173c:	3000      	adds	r0, #0
 800173e:	bf18      	it	ne
 8001740:	2001      	movne	r0, #1
 8001742:	e7af      	b.n	80016a4 <I2C_RequestMemoryRead+0x40>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001744:	0a32      	lsrs	r2, r6, #8
 8001746:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001748:	990a      	ldr	r1, [sp, #40]	; 0x28
 800174a:	462a      	mov	r2, r5
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff ff0c 	bl	800156a <I2C_WaitOnTXEFlagUntilTimeout>
 8001752:	2800      	cmp	r0, #0
 8001754:	d1c3      	bne.n	80016de <I2C_RequestMemoryRead+0x7a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	e7ce      	b.n	80016f8 <I2C_RequestMemoryRead+0x94>
 800175a:	bf00      	nop
 800175c:	00010002 	.word	0x00010002

08001760 <HAL_I2C_Init>:
{
 8001760:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001762:	4604      	mov	r4, r0
 8001764:	b908      	cbnz	r0, 800176a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001766:	2001      	movs	r0, #1
 8001768:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800176a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800176e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001772:	b91b      	cbnz	r3, 800177c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001774:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001778:	f003 ffc6 	bl	8005708 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800177c:	2324      	movs	r3, #36	; 0x24
 800177e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	f022 0201 	bic.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800179a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800179c:	f000 fc9e 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017a0:	6865      	ldr	r5, [r4, #4]
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_I2C_Init+0x148>)
 80017a4:	429d      	cmp	r5, r3
 80017a6:	d84d      	bhi.n	8001844 <HAL_I2C_Init+0xe4>
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <HAL_I2C_Init+0x14c>)
 80017aa:	4298      	cmp	r0, r3
 80017ac:	d9db      	bls.n	8001766 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ae:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80017b0:	493f      	ldr	r1, [pc, #252]	; (80018b0 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017b2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80017b4:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017bc:	430b      	orrs	r3, r1
 80017be:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017c0:	6a13      	ldr	r3, [r2, #32]
 80017c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017c6:	3101      	adds	r1, #1
 80017c8:	4319      	orrs	r1, r3
 80017ca:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017cc:	69d1      	ldr	r1, [r2, #28]
 80017ce:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <HAL_I2C_Init+0x148>)
 80017d0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80017d4:	429d      	cmp	r5, r3
 80017d6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80017da:	f100 30ff 	add.w	r0, r0, #4294967295
 80017de:	d848      	bhi.n	8001872 <HAL_I2C_Init+0x112>
 80017e0:	006d      	lsls	r5, r5, #1
 80017e2:	fbb0 f0f5 	udiv	r0, r0, r5
 80017e6:	3001      	adds	r0, #1
 80017e8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	bf38      	it	cc
 80017f0:	2304      	movcc	r3, #4
 80017f2:	430b      	orrs	r3, r1
 80017f4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017f6:	6811      	ldr	r1, [r2, #0]
 80017f8:	6a20      	ldr	r0, [r4, #32]
 80017fa:	69e3      	ldr	r3, [r4, #28]
 80017fc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001800:	4303      	orrs	r3, r0
 8001802:	430b      	orrs	r3, r1
 8001804:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001806:	6891      	ldr	r1, [r2, #8]
 8001808:	68e0      	ldr	r0, [r4, #12]
 800180a:	6923      	ldr	r3, [r4, #16]
 800180c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001810:	4303      	orrs	r3, r0
 8001812:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001816:	430b      	orrs	r3, r1
 8001818:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800181a:	68d1      	ldr	r1, [r2, #12]
 800181c:	69a0      	ldr	r0, [r4, #24]
 800181e:	6963      	ldr	r3, [r4, #20]
 8001820:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001824:	4303      	orrs	r3, r0
 8001826:	430b      	orrs	r3, r1
 8001828:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800182a:	6813      	ldr	r3, [r2, #0]
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001832:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001834:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001836:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001838:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800183c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800183e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001842:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_I2C_Init+0x154>)
 8001846:	4298      	cmp	r0, r3
 8001848:	d98d      	bls.n	8001766 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800184a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800184c:	4e18      	ldr	r6, [pc, #96]	; (80018b0 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800184e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001850:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001858:	4333      	orrs	r3, r6
 800185a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800185c:	6a13      	ldr	r3, [r2, #32]
 800185e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001862:	4371      	muls	r1, r6
 8001864:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001868:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800186c:	fbb1 f1f6 	udiv	r1, r1, r6
 8001870:	e7a9      	b.n	80017c6 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001872:	68a3      	ldr	r3, [r4, #8]
 8001874:	b953      	cbnz	r3, 800188c <HAL_I2C_Init+0x12c>
 8001876:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800187a:	fbb0 f0f3 	udiv	r0, r0, r3
 800187e:	1c43      	adds	r3, r0, #1
 8001880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001884:	b16b      	cbz	r3, 80018a2 <HAL_I2C_Init+0x142>
 8001886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800188a:	e7b2      	b.n	80017f2 <HAL_I2C_Init+0x92>
 800188c:	2319      	movs	r3, #25
 800188e:	436b      	muls	r3, r5
 8001890:	fbb0 f0f3 	udiv	r0, r0, r3
 8001894:	1c43      	adds	r3, r0, #1
 8001896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189a:	b113      	cbz	r3, 80018a2 <HAL_I2C_Init+0x142>
 800189c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018a0:	e7a7      	b.n	80017f2 <HAL_I2C_Init+0x92>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e7a5      	b.n	80017f2 <HAL_I2C_Init+0x92>
 80018a6:	bf00      	nop
 80018a8:	000186a0 	.word	0x000186a0
 80018ac:	001e847f 	.word	0x001e847f
 80018b0:	000f4240 	.word	0x000f4240
 80018b4:	003d08ff 	.word	0x003d08ff

080018b8 <HAL_I2C_Mem_Write>:
{
 80018b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018bc:	4604      	mov	r4, r0
 80018be:	4699      	mov	r9, r3
 80018c0:	460f      	mov	r7, r1
 80018c2:	4690      	mov	r8, r2
 80018c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80018c6:	f7ff fbdd 	bl	8001084 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80018ce:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80018d0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d2:	d003      	beq.n	80018dc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80018d4:	2002      	movs	r0, #2
}
 80018d6:	b003      	add	sp, #12
 80018d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018dc:	9000      	str	r0, [sp, #0]
 80018de:	2319      	movs	r3, #25
 80018e0:	2201      	movs	r2, #1
 80018e2:	493b      	ldr	r1, [pc, #236]	; (80019d0 <HAL_I2C_Mem_Write+0x118>)
 80018e4:	4620      	mov	r0, r4
 80018e6:	f7ff fe0e 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d1f2      	bne.n	80018d4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80018ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d0ee      	beq.n	80018d4 <HAL_I2C_Mem_Write+0x1c>
 80018f6:	2301      	movs	r3, #1
 80018f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001902:	bf5e      	ittt	pl
 8001904:	681a      	ldrpl	r2, [r3, #0]
 8001906:	f042 0201 	orrpl.w	r2, r2, #1
 800190a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001912:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001914:	2321      	movs	r3, #33	; 0x21
 8001916:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800191a:	2340      	movs	r3, #64	; 0x40
 800191c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001920:	2300      	movs	r3, #0
 8001922:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001926:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001928:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800192c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800192e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001930:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001932:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <HAL_I2C_Mem_Write+0x11c>)
 8001934:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001936:	9501      	str	r5, [sp, #4]
 8001938:	9600      	str	r6, [sp, #0]
 800193a:	464b      	mov	r3, r9
 800193c:	4642      	mov	r2, r8
 800193e:	4639      	mov	r1, r7
 8001940:	4620      	mov	r0, r4
 8001942:	f7ff fe39 	bl	80015b8 <I2C_RequestMemoryWrite>
 8001946:	2800      	cmp	r0, #0
 8001948:	d02a      	beq.n	80019a0 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 800194a:	2001      	movs	r0, #1
 800194c:	e7c3      	b.n	80018d6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194e:	f7ff fe0c 	bl	800156a <I2C_WaitOnTXEFlagUntilTimeout>
 8001952:	b140      	cbz	r0, 8001966 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001956:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001958:	bf01      	itttt	eq
 800195a:	6822      	ldreq	r2, [r4, #0]
 800195c:	6813      	ldreq	r3, [r2, #0]
 800195e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001962:	6013      	streq	r3, [r2, #0]
 8001964:	e7f1      	b.n	800194a <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001968:	6827      	ldr	r7, [r4, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001970:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001972:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001974:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001976:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001978:	3a01      	subs	r2, #1
 800197a:	b292      	uxth	r2, r2
 800197c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800197e:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001980:	1e48      	subs	r0, r1, #1
 8001982:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001984:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001986:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001988:	d50a      	bpl.n	80019a0 <HAL_I2C_Mem_Write+0xe8>
 800198a:	b148      	cbz	r0, 80019a0 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800198c:	785a      	ldrb	r2, [r3, #1]
 800198e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001990:	3302      	adds	r3, #2
 8001992:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001994:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001996:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001998:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800199a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800199c:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800199e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80019a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a2:	462a      	mov	r2, r5
 80019a4:	4631      	mov	r1, r6
 80019a6:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1d0      	bne.n	800194e <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ac:	f7ff fd56 	bl	800145c <I2C_WaitOnBTFFlagUntilTimeout>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d1cf      	bne.n	8001954 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019bc:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80019be:	2320      	movs	r3, #32
 80019c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80019c4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80019cc:	e783      	b.n	80018d6 <HAL_I2C_Mem_Write+0x1e>
 80019ce:	bf00      	nop
 80019d0:	00100002 	.word	0x00100002
 80019d4:	ffff0000 	.word	0xffff0000

080019d8 <HAL_I2C_Mem_Read>:
{
 80019d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019dc:	4604      	mov	r4, r0
 80019de:	b087      	sub	sp, #28
 80019e0:	4699      	mov	r9, r3
 80019e2:	460d      	mov	r5, r1
 80019e4:	4690      	mov	r8, r2
 80019e6:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff fb4c 	bl	8001084 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80019f0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80019f2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f4:	d004      	beq.n	8001a00 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80019f6:	2502      	movs	r5, #2
}
 80019f8:	4628      	mov	r0, r5
 80019fa:	b007      	add	sp, #28
 80019fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a00:	9000      	str	r0, [sp, #0]
 8001a02:	2319      	movs	r3, #25
 8001a04:	2201      	movs	r2, #1
 8001a06:	4977      	ldr	r1, [pc, #476]	; (8001be4 <HAL_I2C_Mem_Read+0x20c>)
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff fd7c 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	d1f1      	bne.n	80019f6 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001a12:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d0ed      	beq.n	80019f6 <HAL_I2C_Mem_Read+0x1e>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001a26:	bf5e      	ittt	pl
 8001a28:	681a      	ldrpl	r2, [r3, #0]
 8001a2a:	f042 0201 	orrpl.w	r2, r2, #1
 8001a2e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a36:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a38:	2322      	movs	r3, #34	; 0x22
 8001a3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a3e:	2340      	movs	r3, #64	; 0x40
 8001a40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a4a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a4c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001a50:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a54:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a56:	4b64      	ldr	r3, [pc, #400]	; (8001be8 <HAL_I2C_Mem_Read+0x210>)
 8001a58:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	9601      	str	r6, [sp, #4]
 8001a5e:	9700      	str	r7, [sp, #0]
 8001a60:	464b      	mov	r3, r9
 8001a62:	4642      	mov	r2, r8
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff fdfd 	bl	8001664 <I2C_RequestMemoryRead>
 8001a6a:	4605      	mov	r5, r0
 8001a6c:	b108      	cbz	r0, 8001a72 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8001a6e:	2501      	movs	r5, #1
 8001a70:	e7c2      	b.n	80019f8 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8001a72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	b992      	cbnz	r2, 8001a9e <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a78:	9002      	str	r0, [sp, #8]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	9202      	str	r2, [sp, #8]
 8001a7e:	699a      	ldr	r2, [r3, #24]
 8001a80:	9202      	str	r2, [sp, #8]
 8001a82:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001a98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001a9c:	e7ac      	b.n	80019f8 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8001a9e:	2a01      	cmp	r2, #1
 8001aa0:	d12c      	bne.n	8001afc <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aaa:	9003      	str	r0, [sp, #12]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	9203      	str	r2, [sp, #12]
 8001ab0:	699a      	ldr	r2, [r3, #24]
 8001ab2:	9203      	str	r2, [sp, #12]
 8001ab4:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001abc:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001abe:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001bec <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 8001ac2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0e1      	beq.n	8001a8c <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d86e      	bhi.n	8001baa <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d12d      	bne.n	8001b2c <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad0:	4632      	mov	r2, r6
 8001ad2:	4639      	mov	r1, r7
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7ff fce7 	bl	80014a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d1c7      	bne.n	8001a6e <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ade:	6822      	ldr	r2, [r4, #0]
 8001ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ae2:	6912      	ldr	r2, [r2, #16]
 8001ae4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001aec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001af2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001afa:	e7e2      	b.n	8001ac2 <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 8001afc:	2a02      	cmp	r2, #2
 8001afe:	d10e      	bne.n	8001b1e <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b06:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b0e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b10:	9004      	str	r0, [sp, #16]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	9204      	str	r2, [sp, #16]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	9304      	str	r3, [sp, #16]
 8001b1a:	9b04      	ldr	r3, [sp, #16]
 8001b1c:	e7cf      	b.n	8001abe <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1e:	9005      	str	r0, [sp, #20]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	9205      	str	r2, [sp, #20]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	9305      	str	r3, [sp, #20]
 8001b28:	9b05      	ldr	r3, [sp, #20]
 8001b2a:	e7c8      	b.n	8001abe <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 8001b2c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b2e:	9600      	str	r6, [sp, #0]
 8001b30:	463b      	mov	r3, r7
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4641      	mov	r1, r8
 8001b38:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001b3a:	d119      	bne.n	8001b70 <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b3c:	f7ff fce3 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d194      	bne.n	8001a6e <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b4c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001b54:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b56:	1c53      	adds	r3, r2, #1
 8001b58:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001b5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b68:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	7053      	strb	r3, [r2, #1]
 8001b6e:	e7ba      	b.n	8001ae6 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b70:	f7ff fcc9 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 8001b74:	4602      	mov	r2, r0
 8001b76:	2800      	cmp	r0, #0
 8001b78:	f47f af79 	bne.w	8001a6e <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	6819      	ldr	r1, [r3, #0]
 8001b80:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001b84:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8001b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b8e:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8001b90:	3301      	adds	r3, #1
 8001b92:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001b94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b96:	3b01      	subs	r3, #1
 8001b98:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ba2:	4641      	mov	r1, r8
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	e7c8      	b.n	8001b3c <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001baa:	4632      	mov	r2, r6
 8001bac:	4639      	mov	r1, r7
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff fc7a 	bl	80014a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	f47f af5a 	bne.w	8001a6e <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bba:	6822      	ldr	r2, [r4, #0]
 8001bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bbe:	6912      	ldr	r2, [r2, #16]
 8001bc0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001bc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bc4:	1c53      	adds	r3, r2, #1
 8001bc6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001bc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001bce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	6959      	ldr	r1, [r3, #20]
 8001bda:	0749      	lsls	r1, r1, #29
 8001bdc:	f57f af71 	bpl.w	8001ac2 <HAL_I2C_Mem_Read+0xea>
 8001be0:	e7c3      	b.n	8001b6a <HAL_I2C_Mem_Read+0x192>
 8001be2:	bf00      	nop
 8001be4:	00100002 	.word	0x00100002
 8001be8:	ffff0000 	.word	0xffff0000
 8001bec:	00010004 	.word	0x00010004

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	b908      	cbnz	r0, 8001bfc <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	e03f      	b.n	8001c7c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfc:	6803      	ldr	r3, [r0, #0]
 8001bfe:	07dd      	lsls	r5, r3, #31
 8001c00:	d410      	bmi.n	8001c24 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	0798      	lsls	r0, r3, #30
 8001c06:	d45a      	bmi.n	8001cbe <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	071a      	lsls	r2, r3, #28
 8001c0c:	f100 809c 	bmi.w	8001d48 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	075b      	lsls	r3, r3, #29
 8001c14:	f100 80ba 	bmi.w	8001d8c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c18:	69a0      	ldr	r0, [r4, #24]
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	f040 811b 	bne.w	8001e56 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001c20:	2000      	movs	r0, #0
 8001c22:	e02b      	b.n	8001c7c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c24:	4ba4      	ldr	r3, [pc, #656]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	f002 020c 	and.w	r2, r2, #12
 8001c2c:	2a04      	cmp	r2, #4
 8001c2e:	d007      	beq.n	8001c40 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c36:	2a08      	cmp	r2, #8
 8001c38:	d10a      	bne.n	8001c50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	0259      	lsls	r1, r3, #9
 8001c3e:	d507      	bpl.n	8001c50 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	4b9d      	ldr	r3, [pc, #628]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	039a      	lsls	r2, r3, #14
 8001c46:	d5dc      	bpl.n	8001c02 <HAL_RCC_OscConfig+0x12>
 8001c48:	6863      	ldr	r3, [r4, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1d9      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
 8001c4e:	e7d3      	b.n	8001bf8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	6863      	ldr	r3, [r4, #4]
 8001c52:	4d99      	ldr	r5, [pc, #612]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d113      	bne.n	8001c82 <HAL_RCC_OscConfig+0x92>
 8001c5a:	682b      	ldr	r3, [r5, #0]
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c62:	f7ff fa0f 	bl	8001084 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4d94      	ldr	r5, [pc, #592]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001c68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	682b      	ldr	r3, [r5, #0]
 8001c6c:	039b      	lsls	r3, r3, #14
 8001c6e:	d4c8      	bmi.n	8001c02 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fa08 	bl	8001084 <HAL_GetTick>
 8001c74:	1b80      	subs	r0, r0, r6
 8001c76:	2864      	cmp	r0, #100	; 0x64
 8001c78:	d9f7      	bls.n	8001c6a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001c7a:	2003      	movs	r0, #3
}
 8001c7c:	b002      	add	sp, #8
 8001c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c86:	d104      	bne.n	8001c92 <HAL_RCC_OscConfig+0xa2>
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8e:	602b      	str	r3, [r5, #0]
 8001c90:	e7e3      	b.n	8001c5a <HAL_RCC_OscConfig+0x6a>
 8001c92:	682a      	ldr	r2, [r5, #0]
 8001c94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c98:	602a      	str	r2, [r5, #0]
 8001c9a:	682a      	ldr	r2, [r5, #0]
 8001c9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ca0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1dd      	bne.n	8001c62 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001ca6:	f7ff f9ed 	bl	8001084 <HAL_GetTick>
 8001caa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	039f      	lsls	r7, r3, #14
 8001cb0:	d5a7      	bpl.n	8001c02 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb2:	f7ff f9e7 	bl	8001084 <HAL_GetTick>
 8001cb6:	1b80      	subs	r0, r0, r6
 8001cb8:	2864      	cmp	r0, #100	; 0x64
 8001cba:	d9f7      	bls.n	8001cac <HAL_RCC_OscConfig+0xbc>
 8001cbc:	e7dd      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cbe:	4b7e      	ldr	r3, [pc, #504]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	f012 0f0c 	tst.w	r2, #12
 8001cc6:	d007      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cce:	2a08      	cmp	r2, #8
 8001cd0:	d111      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	025e      	lsls	r6, r3, #9
 8001cd6:	d40e      	bmi.n	8001cf6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd8:	4b77      	ldr	r3, [pc, #476]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	0795      	lsls	r5, r2, #30
 8001cde:	d502      	bpl.n	8001ce6 <HAL_RCC_OscConfig+0xf6>
 8001ce0:	68e2      	ldr	r2, [r4, #12]
 8001ce2:	2a01      	cmp	r2, #1
 8001ce4:	d188      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	6921      	ldr	r1, [r4, #16]
 8001cea:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001cee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001cf2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf4:	e788      	b.n	8001c08 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cf6:	68e2      	ldr	r2, [r4, #12]
 8001cf8:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <HAL_RCC_OscConfig+0x2cc>)
 8001cfa:	b1b2      	cbz	r2, 8001d2a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d00:	f7ff f9c0 	bl	8001084 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	4d6c      	ldr	r5, [pc, #432]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001d06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	0798      	lsls	r0, r3, #30
 8001d0c:	d507      	bpl.n	8001d1e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	6922      	ldr	r2, [r4, #16]
 8001d12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d16:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d1a:	602b      	str	r3, [r5, #0]
 8001d1c:	e774      	b.n	8001c08 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f9b1 	bl	8001084 <HAL_GetTick>
 8001d22:	1b80      	subs	r0, r0, r6
 8001d24:	2802      	cmp	r0, #2
 8001d26:	d9ef      	bls.n	8001d08 <HAL_RCC_OscConfig+0x118>
 8001d28:	e7a7      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f9aa 	bl	8001084 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d30:	4d61      	ldr	r5, [pc, #388]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001d32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d34:	682b      	ldr	r3, [r5, #0]
 8001d36:	0799      	lsls	r1, r3, #30
 8001d38:	f57f af66 	bpl.w	8001c08 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff f9a2 	bl	8001084 <HAL_GetTick>
 8001d40:	1b80      	subs	r0, r0, r6
 8001d42:	2802      	cmp	r0, #2
 8001d44:	d9f6      	bls.n	8001d34 <HAL_RCC_OscConfig+0x144>
 8001d46:	e798      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d48:	6962      	ldr	r2, [r4, #20]
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <HAL_RCC_OscConfig+0x2d0>)
 8001d4c:	b17a      	cbz	r2, 8001d6e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d52:	f7ff f997 	bl	8001084 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4d58      	ldr	r5, [pc, #352]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001d58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d5c:	079f      	lsls	r7, r3, #30
 8001d5e:	f53f af57 	bmi.w	8001c10 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d62:	f7ff f98f 	bl	8001084 <HAL_GetTick>
 8001d66:	1b80      	subs	r0, r0, r6
 8001d68:	2802      	cmp	r0, #2
 8001d6a:	d9f6      	bls.n	8001d5a <HAL_RCC_OscConfig+0x16a>
 8001d6c:	e785      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001d6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d70:	f7ff f988 	bl	8001084 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d74:	4d50      	ldr	r5, [pc, #320]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001d76:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d7a:	0798      	lsls	r0, r3, #30
 8001d7c:	f57f af48 	bpl.w	8001c10 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff f980 	bl	8001084 <HAL_GetTick>
 8001d84:	1b80      	subs	r0, r0, r6
 8001d86:	2802      	cmp	r0, #2
 8001d88:	d9f6      	bls.n	8001d78 <HAL_RCC_OscConfig+0x188>
 8001d8a:	e776      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
 8001d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d90:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001d94:	d128      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	9201      	str	r2, [sp, #4]
 8001d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001daa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	4d45      	ldr	r5, [pc, #276]	; (8001ec4 <HAL_RCC_OscConfig+0x2d4>)
 8001dae:	682b      	ldr	r3, [r5, #0]
 8001db0:	05d9      	lsls	r1, r3, #23
 8001db2:	d51b      	bpl.n	8001dec <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	68a3      	ldr	r3, [r4, #8]
 8001db6:	4d40      	ldr	r5, [pc, #256]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d127      	bne.n	8001e0c <HAL_RCC_OscConfig+0x21c>
 8001dbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f95e 	bl	8001084 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc8:	4d3b      	ldr	r5, [pc, #236]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001dca:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001dd2:	079b      	lsls	r3, r3, #30
 8001dd4:	d539      	bpl.n	8001e4a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001dd6:	2e00      	cmp	r6, #0
 8001dd8:	f43f af1e 	beq.w	8001c18 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	4a36      	ldr	r2, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
 8001dde:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	e717      	b.n	8001c18 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001de8:	2600      	movs	r6, #0
 8001dea:	e7df      	b.n	8001dac <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dec:	682b      	ldr	r3, [r5, #0]
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001df4:	f7ff f946 	bl	8001084 <HAL_GetTick>
 8001df8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	682b      	ldr	r3, [r5, #0]
 8001dfc:	05da      	lsls	r2, r3, #23
 8001dfe:	d4d9      	bmi.n	8001db4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e00:	f7ff f940 	bl	8001084 <HAL_GetTick>
 8001e04:	1bc0      	subs	r0, r0, r7
 8001e06:	2802      	cmp	r0, #2
 8001e08:	d9f7      	bls.n	8001dfa <HAL_RCC_OscConfig+0x20a>
 8001e0a:	e736      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d104      	bne.n	8001e1a <HAL_RCC_OscConfig+0x22a>
 8001e10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	672b      	str	r3, [r5, #112]	; 0x70
 8001e18:	e7d0      	b.n	8001dbc <HAL_RCC_OscConfig+0x1cc>
 8001e1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	672a      	str	r2, [r5, #112]	; 0x70
 8001e22:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001e24:	f022 0204 	bic.w	r2, r2, #4
 8001e28:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ca      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f929 	bl	8001084 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e36:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e3a:	0798      	lsls	r0, r3, #30
 8001e3c:	d5cb      	bpl.n	8001dd6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff f921 	bl	8001084 <HAL_GetTick>
 8001e42:	1bc0      	subs	r0, r0, r7
 8001e44:	4540      	cmp	r0, r8
 8001e46:	d9f7      	bls.n	8001e38 <HAL_RCC_OscConfig+0x248>
 8001e48:	e717      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7ff f91b 	bl	8001084 <HAL_GetTick>
 8001e4e:	1bc0      	subs	r0, r0, r7
 8001e50:	4540      	cmp	r0, r8
 8001e52:	d9bd      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x1e0>
 8001e54:	e711      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e56:	4d18      	ldr	r5, [pc, #96]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
 8001e58:	68ab      	ldr	r3, [r5, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d047      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x302>
 8001e62:	4e19      	ldr	r6, [pc, #100]	; (8001ec8 <HAL_RCC_OscConfig+0x2d8>)
 8001e64:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e66:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001e68:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	d135      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f90a 	bl	8001084 <HAL_GetTick>
 8001e70:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	682b      	ldr	r3, [r5, #0]
 8001e74:	0199      	lsls	r1, r3, #6
 8001e76:	d429      	bmi.n	8001ecc <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e78:	6a22      	ldr	r2, [r4, #32]
 8001e7a:	69e3      	ldr	r3, [r4, #28]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e80:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8c:	4c0a      	ldr	r4, [pc, #40]	; (8001eb8 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e8e:	0852      	lsrs	r2, r2, #1
 8001e90:	3a01      	subs	r2, #1
 8001e92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e96:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e98:	2301      	movs	r3, #1
 8001e9a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f8f2 	bl	8001084 <HAL_GetTick>
 8001ea0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	019a      	lsls	r2, r3, #6
 8001ea6:	f53f aebb 	bmi.w	8001c20 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7ff f8eb 	bl	8001084 <HAL_GetTick>
 8001eae:	1b40      	subs	r0, r0, r5
 8001eb0:	2802      	cmp	r0, #2
 8001eb2:	d9f6      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x2b2>
 8001eb4:	e6e1      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	42470000 	.word	0x42470000
 8001ec0:	42470e80 	.word	0x42470e80
 8001ec4:	40007000 	.word	0x40007000
 8001ec8:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f8da 	bl	8001084 <HAL_GetTick>
 8001ed0:	1bc0      	subs	r0, r0, r7
 8001ed2:	2802      	cmp	r0, #2
 8001ed4:	d9cd      	bls.n	8001e72 <HAL_RCC_OscConfig+0x282>
 8001ed6:	e6d0      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f8d4 	bl	8001084 <HAL_GetTick>
 8001edc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	682b      	ldr	r3, [r5, #0]
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	f57f ae9d 	bpl.w	8001c20 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff f8cd 	bl	8001084 <HAL_GetTick>
 8001eea:	1b00      	subs	r0, r0, r4
 8001eec:	2802      	cmp	r0, #2
 8001eee:	d9f6      	bls.n	8001ede <HAL_RCC_OscConfig+0x2ee>
 8001ef0:	e6c3      	b.n	8001c7a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef2:	2801      	cmp	r0, #1
 8001ef4:	f43f aec2 	beq.w	8001c7c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001ef8:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	69e3      	ldr	r3, [r4, #28]
 8001efc:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f47f ae79 	bne.w	8001bf8 <HAL_RCC_OscConfig+0x8>
 8001f06:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f08:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	f47f ae73 	bne.w	8001bf8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f18:	4003      	ands	r3, r0
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	f47f ae6c 	bne.w	8001bf8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f22:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f26:	4293      	cmp	r3, r2
 8001f28:	f47f ae66 	bne.w	8001bf8 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f2e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001f32:	1ac0      	subs	r0, r0, r3
 8001f34:	bf18      	it	ne
 8001f36:	2001      	movne	r0, #1
 8001f38:	e6a0      	b.n	8001c7c <HAL_RCC_OscConfig+0x8c>
 8001f3a:	bf00      	nop

08001f3c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3c:	4913      	ldr	r1, [pc, #76]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001f3e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f40:	688b      	ldr	r3, [r1, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0x16>
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d003      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f4e:	4810      	ldr	r0, [pc, #64]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f50:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001f52:	4810      	ldr	r0, [pc, #64]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x58>)
 8001f54:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f56:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f58:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f5a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f5c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f60:	bf14      	ite	ne
 8001f62:	480c      	ldrne	r0, [pc, #48]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f64:	480a      	ldreq	r0, [pc, #40]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f66:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f6a:	bf18      	it	ne
 8001f6c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f6e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	fba1 0100 	umull	r0, r1, r1, r0
 8001f76:	f7fe feb3 	bl	8000ce0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x50>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f82:	3301      	adds	r3, #1
 8001f84:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001f86:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f8a:	bd08      	pop	{r3, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	00f42400 	.word	0x00f42400
 8001f94:	007a1200 	.word	0x007a1200

08001f98 <HAL_RCC_ClockConfig>:
{
 8001f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f9c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	b910      	cbnz	r0, 8001fa8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b44      	ldr	r3, [pc, #272]	; (80020bc <HAL_RCC_ClockConfig+0x124>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	f002 020f 	and.w	r2, r2, #15
 8001fb0:	428a      	cmp	r2, r1
 8001fb2:	d329      	bcc.n	8002008 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	6821      	ldr	r1, [r4, #0]
 8001fb6:	078f      	lsls	r7, r1, #30
 8001fb8:	d42e      	bmi.n	8002018 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	07c8      	lsls	r0, r1, #31
 8001fbc:	d441      	bmi.n	8002042 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_RCC_ClockConfig+0x124>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f002 020f 	and.w	r2, r2, #15
 8001fc6:	4295      	cmp	r5, r2
 8001fc8:	d367      	bcc.n	800209a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fca:	6822      	ldr	r2, [r4, #0]
 8001fcc:	0751      	lsls	r1, r2, #29
 8001fce:	d46d      	bmi.n	80020ac <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	0713      	lsls	r3, r2, #28
 8001fd2:	d507      	bpl.n	8001fe4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd4:	4a3a      	ldr	r2, [pc, #232]	; (80020c0 <HAL_RCC_ClockConfig+0x128>)
 8001fd6:	6921      	ldr	r1, [r4, #16]
 8001fd8:	6893      	ldr	r3, [r2, #8]
 8001fda:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001fde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fe2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fe4:	f7ff ffaa 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_RCC_ClockConfig+0x128>)
 8001fea:	4a36      	ldr	r2, [pc, #216]	; (80020c4 <HAL_RCC_ClockConfig+0x12c>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ff2:	5cd3      	ldrb	r3, [r2, r3]
 8001ff4:	40d8      	lsrs	r0, r3
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCC_ClockConfig+0x130>)
 8001ff8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_RCC_ClockConfig+0x134>)
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	f7fe fff7 	bl	8000ff0 <HAL_InitTick>
  return HAL_OK;
 8002002:	2000      	movs	r0, #0
 8002004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002008:	b2ca      	uxtb	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	4299      	cmp	r1, r3
 8002014:	d1c5      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xa>
 8002016:	e7cd      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1c>
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800201e:	bf1e      	ittt	ne
 8002020:	689a      	ldrne	r2, [r3, #8]
 8002022:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002026:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800202a:	bf42      	ittt	mi
 800202c:	689a      	ldrmi	r2, [r3, #8]
 800202e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002032:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	68a0      	ldr	r0, [r4, #8]
 8002038:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800203c:	4302      	orrs	r2, r0
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	e7bb      	b.n	8001fba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002042:	6862      	ldr	r2, [r4, #4]
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_RCC_ClockConfig+0x128>)
 8002046:	2a01      	cmp	r2, #1
 8002048:	d11d      	bne.n	8002086 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	d0a7      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4e1b      	ldr	r6, [pc, #108]	; (80020c0 <HAL_RCC_ClockConfig+0x128>)
 8002054:	68b3      	ldr	r3, [r6, #8]
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	4313      	orrs	r3, r2
 800205c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800205e:	f7ff f811 	bl	8001084 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002062:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002066:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002068:	68b3      	ldr	r3, [r6, #8]
 800206a:	6862      	ldr	r2, [r4, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002074:	d0a3      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002076:	f7ff f805 	bl	8001084 <HAL_GetTick>
 800207a:	1bc0      	subs	r0, r0, r7
 800207c:	4540      	cmp	r0, r8
 800207e:	d9f3      	bls.n	8002068 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002080:	2003      	movs	r0, #3
}
 8002082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002086:	1e91      	subs	r1, r2, #2
 8002088:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208c:	d802      	bhi.n	8002094 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002092:	e7dd      	b.n	8002050 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	f013 0f02 	tst.w	r3, #2
 8002098:	e7da      	b.n	8002050 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	b2ea      	uxtb	r2, r5
 800209c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	429d      	cmp	r5, r3
 80020a6:	f47f af7c 	bne.w	8001fa2 <HAL_RCC_ClockConfig+0xa>
 80020aa:	e78e      	b.n	8001fca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4904      	ldr	r1, [pc, #16]	; (80020c0 <HAL_RCC_ClockConfig+0x128>)
 80020ae:	68e0      	ldr	r0, [r4, #12]
 80020b0:	688b      	ldr	r3, [r1, #8]
 80020b2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80020b6:	4303      	orrs	r3, r0
 80020b8:	608b      	str	r3, [r1, #8]
 80020ba:	e789      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x38>
 80020bc:	40023c00 	.word	0x40023c00
 80020c0:	40023800 	.word	0x40023800
 80020c4:	08008d6d 	.word	0x08008d6d
 80020c8:	2000000c 	.word	0x2000000c
 80020cc:	20000004 	.word	0x20000004

080020d0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80020d0:	4b01      	ldr	r3, [pc, #4]	; (80020d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	2000000c 	.word	0x2000000c

080020dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020ea:	6810      	ldr	r0, [r2, #0]
}
 80020ec:	40d8      	lsrs	r0, r3
 80020ee:	4770      	bx	lr
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08008d7d 	.word	0x08008d7d
 80020f8:	2000000c 	.word	0x2000000c

080020fc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x14>)
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	4a03      	ldr	r2, [pc, #12]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800210a:	6810      	ldr	r0, [r2, #0]
}
 800210c:	40d8      	lsrs	r0, r3
 800210e:	4770      	bx	lr
 8002110:	40023800 	.word	0x40023800
 8002114:	08008d7d 	.word	0x08008d7d
 8002118:	2000000c 	.word	0x2000000c

0800211c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800211c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002120:	b089      	sub	sp, #36	; 0x24
 8002122:	4605      	mov	r5, r0
 8002124:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002126:	f7fe ffad 	bl	8001084 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 800212a:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 800212c:	4681      	mov	r9, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800212e:	2108      	movs	r1, #8
 8002130:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002136:	f000 ffe2 	bl	80030fe <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800213a:	4604      	mov	r4, r0
 800213c:	bb40      	cbnz	r0, 8002190 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800213e:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8002140:	6828      	ldr	r0, [r5, #0]
 8002142:	0409      	lsls	r1, r1, #16
 8002144:	f001 f8ec 	bl	8003320 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002148:	4604      	mov	r4, r0
 800214a:	bb08      	cbnz	r0, 8002190 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8002152:	2308      	movs	r3, #8
 8002154:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002156:	2330      	movs	r3, #48	; 0x30
 8002158:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800215a:	2302      	movs	r3, #2
 800215c:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800215e:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002160:	2301      	movs	r3, #1
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002162:	a902      	add	r1, sp, #8
 8002164:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002166:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002168:	f000 ffb6 	bl	80030d8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800216c:	6828      	ldr	r0, [r5, #0]
 800216e:	f001 f908 	bl	8003382 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002172:	4604      	mov	r4, r0
 8002174:	b960      	cbnz	r0, 8002190 <SD_FindSCR+0x74>
 8002176:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8002178:	f240 482a 	movw	r8, #1066	; 0x42a
 800217c:	6828      	ldr	r0, [r5, #0]
 800217e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002180:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002184:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8002186:	d007      	beq.n	8002198 <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002188:	0719      	lsls	r1, r3, #28
 800218a:	d518      	bpl.n	80021be <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800218c:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800218e:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8002190:	4620      	mov	r0, r4
 8002192:	b009      	add	sp, #36	; 0x24
 8002194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002198:	029b      	lsls	r3, r3, #10
 800219a:	d507      	bpl.n	80021ac <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800219c:	f000 ff72 	bl	8003084 <SDIO_ReadFIFO>
 80021a0:	ab08      	add	r3, sp, #32
 80021a2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 80021a6:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80021a8:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80021ac:	f7fe ff6a 	bl	8001084 <HAL_GetTick>
 80021b0:	eba0 0009 	sub.w	r0, r0, r9
 80021b4:	3001      	adds	r0, #1
 80021b6:	d1e1      	bne.n	800217c <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 80021b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80021bc:	e7e8      	b.n	8002190 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80021be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021c0:	079a      	lsls	r2, r3, #30
 80021c2:	d501      	bpl.n	80021c8 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80021c4:	2402      	movs	r4, #2
 80021c6:	e7e2      	b.n	800218e <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80021c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021ca:	069b      	lsls	r3, r3, #26
 80021cc:	d501      	bpl.n	80021d2 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80021ce:	2420      	movs	r4, #32
 80021d0:	e7dd      	b.n	800218e <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80021d2:	f240 533a 	movw	r3, #1338	; 0x53a
 80021d6:	6383      	str	r3, [r0, #56]	; 0x38
 80021d8:	9b01      	ldr	r3, [sp, #4]
 80021da:	ba1b      	rev	r3, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80021dc:	6033      	str	r3, [r6, #0]
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	ba1b      	rev	r3, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80021e2:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 80021e4:	e7d4      	b.n	8002190 <SD_FindSCR+0x74>
	...

080021e8 <HAL_SD_ReadBlocks>:
{
 80021e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ec:	b087      	sub	sp, #28
 80021ee:	4604      	mov	r4, r0
 80021f0:	460d      	mov	r5, r1
 80021f2:	4616      	mov	r6, r2
 80021f4:	4699      	mov	r9, r3
  uint32_t tickstart = HAL_GetTick();
 80021f6:	f7fe ff45 	bl	8001084 <HAL_GetTick>
 80021fa:	4607      	mov	r7, r0
  if(NULL == pData)
 80021fc:	b92d      	cbnz	r5, 800220a <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80021fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002200:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002204:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002206:	2001      	movs	r0, #1
 8002208:	e010      	b.n	800222c <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 800220a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800220e:	b2c0      	uxtb	r0, r0
 8002210:	2801      	cmp	r0, #1
 8002212:	f040 80f5 	bne.w	8002400 <HAL_SD_ReadBlocks+0x218>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002216:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002218:	eb06 0309 	add.w	r3, r6, r9
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800221c:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800221e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002220:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002222:	d906      	bls.n	8002232 <HAL_SD_ReadBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002224:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800222a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800222c:	b007      	add	sp, #28
 800222e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8002232:	2303      	movs	r3, #3
 8002234:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8002238:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800223a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 800223c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800223e:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002240:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8002244:	bf18      	it	ne
 8002246:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002248:	f000 ff59 	bl	80030fe <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800224c:	b148      	cbz	r0, 8002262 <HAL_SD_ReadBlocks+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	4a6d      	ldr	r2, [pc, #436]	; (8002408 <HAL_SD_ReadBlocks+0x220>)
 8002252:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002256:	4318      	orrs	r0, r3
 8002258:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800225a:	2001      	movs	r0, #1
 800225c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002260:	e7e4      	b.n	800222c <HAL_SD_ReadBlocks+0x44>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002268:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800226c:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800226e:	9004      	str	r0, [sp, #16]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002270:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002272:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002276:	f04f 0b02 	mov.w	fp, #2
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800227a:	4669      	mov	r1, sp
 800227c:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800227e:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002280:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002284:	f8cd a014 	str.w	sl, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002288:	f000 ff26 	bl	80030d8 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 800228c:	45d1      	cmp	r9, sl
 800228e:	d912      	bls.n	80022b6 <HAL_SD_ReadBlocks+0xce>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002290:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002294:	4631      	mov	r1, r6
 8002296:	6820      	ldr	r0, [r4, #0]
 8002298:	f000 ff61 	bl	800315e <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800229c:	b190      	cbz	r0, 80022c4 <HAL_SD_ReadBlocks+0xdc>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	4a59      	ldr	r2, [pc, #356]	; (8002408 <HAL_SD_ReadBlocks+0x220>)
 80022a2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80022a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022a6:	4318      	orrs	r0, r3
 80022a8:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80022aa:	2001      	movs	r0, #1
        hsd->Context = SD_CONTEXT_NONE;
 80022ac:	2300      	movs	r3, #0
        hsd->State= HAL_SD_STATE_READY;
 80022ae:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80022b2:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80022b4:	e7ba      	b.n	800222c <HAL_SD_ReadBlocks+0x44>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80022b6:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80022ba:	4631      	mov	r1, r6
 80022bc:	6820      	ldr	r0, [r4, #0]
 80022be:	f000 ff36 	bl	800312e <SDMMC_CmdReadSingleBlock>
 80022c2:	e7eb      	b.n	800229c <HAL_SD_ReadBlocks+0xb4>
    dataremaining = config.DataLength;
 80022c4:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80022c8:	f240 3b2a 	movw	fp, #810	; 0x32a
 80022cc:	6820      	ldr	r0, [r4, #0]
 80022ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80022d0:	ea13 0f0b 	tst.w	r3, fp
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80022d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80022d6:	d017      	beq.n	8002308 <HAL_SD_ReadBlocks+0x120>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80022d8:	05de      	lsls	r6, r3, #23
 80022da:	d509      	bpl.n	80022f0 <HAL_SD_ReadBlocks+0x108>
 80022dc:	f1b9 0f01 	cmp.w	r9, #1
 80022e0:	d906      	bls.n	80022f0 <HAL_SD_ReadBlocks+0x108>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80022e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d003      	beq.n	80022f0 <HAL_SD_ReadBlocks+0x108>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80022e8:	f000 ff82 	bl	80031f0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d1d6      	bne.n	800229e <HAL_SD_ReadBlocks+0xb6>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022f4:	f011 0108 	ands.w	r1, r1, #8
 80022f8:	d036      	beq.n	8002368 <HAL_SD_ReadBlocks+0x180>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022fa:	4a43      	ldr	r2, [pc, #268]	; (8002408 <HAL_SD_ReadBlocks+0x220>)
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80022fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002300:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002304:	63a3      	str	r3, [r4, #56]	; 0x38
 8002306:	e7d0      	b.n	80022aa <HAL_SD_ReadBlocks+0xc2>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	d519      	bpl.n	8002340 <HAL_SD_ReadBlocks+0x158>
 800230c:	f1ba 0f00 	cmp.w	sl, #0
 8002310:	d016      	beq.n	8002340 <HAL_SD_ReadBlocks+0x158>
 8002312:	1d2e      	adds	r6, r5, #4
 8002314:	f105 0824 	add.w	r8, r5, #36	; 0x24
          data = SDIO_ReadFIFO(hsd->Instance);
 8002318:	6820      	ldr	r0, [r4, #0]
 800231a:	f000 feb3 	bl	8003084 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800231e:	0a02      	lsrs	r2, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002320:	f806 0c04 	strb.w	r0, [r6, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002324:	f806 2c03 	strb.w	r2, [r6, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002328:	0c02      	lsrs	r2, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800232a:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800232c:	f806 2c02 	strb.w	r2, [r6, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002330:	f806 0c01 	strb.w	r0, [r6, #-1]
 8002334:	3604      	adds	r6, #4
        for(count = 0U; count < 8U; count++)
 8002336:	4546      	cmp	r6, r8
 8002338:	d1ee      	bne.n	8002318 <HAL_SD_ReadBlocks+0x130>
 800233a:	3520      	adds	r5, #32
 800233c:	f1aa 0a20 	sub.w	sl, sl, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002340:	f7fe fea0 	bl	8001084 <HAL_GetTick>
 8002344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002346:	1bc0      	subs	r0, r0, r7
 8002348:	4298      	cmp	r0, r3
 800234a:	d3bf      	bcc.n	80022cc <HAL_SD_ReadBlocks+0xe4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	4a2e      	ldr	r2, [pc, #184]	; (8002408 <HAL_SD_ReadBlocks+0x220>)
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002352:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002354:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002358:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800235a:	2301      	movs	r3, #1
 800235c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002360:	2300      	movs	r3, #0
 8002362:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8002364:	2003      	movs	r0, #3
 8002366:	e761      	b.n	800222c <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236a:	f012 0202 	ands.w	r2, r2, #2
 800236e:	d00a      	beq.n	8002386 <HAL_SD_ReadBlocks+0x19e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002370:	4a25      	ldr	r2, [pc, #148]	; (8002408 <HAL_SD_ReadBlocks+0x220>)
 8002372:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002374:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002376:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800237e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002382:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002384:	e752      	b.n	800222c <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002386:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002388:	0689      	lsls	r1, r1, #26
 800238a:	d50a      	bpl.n	80023a2 <HAL_SD_ReadBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800238c:	491e      	ldr	r1, [pc, #120]	; (8002408 <HAL_SD_ReadBlocks+0x220>)
 800238e:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002392:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002394:	f043 0320 	orr.w	r3, r3, #32
 8002398:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800239a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800239e:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80023a0:	e744      	b.n	800222c <HAL_SD_ReadBlocks+0x44>
 80023a2:	1d2e      	adds	r6, r5, #4
 80023a4:	f10a 0a04 	add.w	sl, sl, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80023a8:	6820      	ldr	r0, [r4, #0]
 80023aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80023ac:	029b      	lsls	r3, r3, #10
 80023ae:	d407      	bmi.n	80023c0 <HAL_SD_ReadBlocks+0x1d8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80023b0:	f240 533a 	movw	r3, #1338	; 0x53a
 80023b4:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80023bc:	2000      	movs	r0, #0
 80023be:	e735      	b.n	800222c <HAL_SD_ReadBlocks+0x44>
 80023c0:	ebaa 0306 	sub.w	r3, sl, r6
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80023c4:	42dd      	cmn	r5, r3
 80023c6:	d0f3      	beq.n	80023b0 <HAL_SD_ReadBlocks+0x1c8>
      data = SDIO_ReadFIFO(hsd->Instance);
 80023c8:	f000 fe5c 	bl	8003084 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80023cc:	0a03      	lsrs	r3, r0, #8
      *tempbuff = (uint8_t)(data & 0xFFU);
 80023ce:	f806 0c04 	strb.w	r0, [r6, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80023d2:	f806 3c03 	strb.w	r3, [r6, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80023d6:	0c03      	lsrs	r3, r0, #16
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80023d8:	0e00      	lsrs	r0, r0, #24
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80023da:	f806 3c02 	strb.w	r3, [r6, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80023de:	f806 0c01 	strb.w	r0, [r6, #-1]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80023e2:	f7fe fe4f 	bl	8001084 <HAL_GetTick>
 80023e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80023e8:	1bc0      	subs	r0, r0, r7
 80023ea:	4283      	cmp	r3, r0
 80023ec:	f106 0604 	add.w	r6, r6, #4
 80023f0:	d8da      	bhi.n	80023a8 <HAL_SD_ReadBlocks+0x1c0>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_SD_ReadBlocks+0x220>)
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80023f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023fe:	e781      	b.n	8002304 <HAL_SD_ReadBlocks+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002402:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002406:	e6fd      	b.n	8002204 <HAL_SD_ReadBlocks+0x1c>
 8002408:	004005ff 	.word	0x004005ff

0800240c <HAL_SD_WriteBlocks>:
{
 800240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002410:	b089      	sub	sp, #36	; 0x24
 8002412:	4604      	mov	r4, r0
 8002414:	460e      	mov	r6, r1
 8002416:	4691      	mov	r9, r2
 8002418:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800241a:	f7fe fe33 	bl	8001084 <HAL_GetTick>
 800241e:	4680      	mov	r8, r0
  if(NULL == pData)
 8002420:	b92e      	cbnz	r6, 800242e <HAL_SD_WriteBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002424:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002428:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800242a:	2001      	movs	r0, #1
 800242c:	e010      	b.n	8002450 <HAL_SD_WriteBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 800242e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002432:	b2c0      	uxtb	r0, r0
 8002434:	2801      	cmp	r0, #1
 8002436:	f040 80b9 	bne.w	80025ac <HAL_SD_WriteBlocks+0x1a0>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800243a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800243c:	eb09 0307 	add.w	r3, r9, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002440:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002442:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002444:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002446:	d906      	bls.n	8002456 <HAL_SD_WriteBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002448:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800244a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800244e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002450:	b009      	add	sp, #36	; 0x24
 8002452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8002456:	2303      	movs	r3, #3
 8002458:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800245c:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800245e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8002460:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002462:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002464:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8002468:	bf18      	it	ne
 800246a:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800246e:	f000 fe46 	bl	80030fe <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002472:	b148      	cbz	r0, 8002488 <HAL_SD_WriteBlocks+0x7c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	4a4f      	ldr	r2, [pc, #316]	; (80025b4 <HAL_SD_WriteBlocks+0x1a8>)
 8002478:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800247a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800247c:	4318      	orrs	r0, r3
 800247e:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002480:	2001      	movs	r0, #1
 8002482:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002486:	e7e3      	b.n	8002450 <HAL_SD_WriteBlocks+0x44>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800248e:	027b      	lsls	r3, r7, #9
 8002490:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002492:	2390      	movs	r3, #144	; 0x90
 8002494:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002496:	9005      	str	r0, [sp, #20]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002498:	9006      	str	r0, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800249a:	2301      	movs	r3, #1
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800249c:	a902      	add	r1, sp, #8
 800249e:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80024a0:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80024a2:	f000 fe19 	bl	80030d8 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 80024a6:	2f01      	cmp	r7, #1
 80024a8:	d912      	bls.n	80024d0 <HAL_SD_WriteBlocks+0xc4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80024aa:	2320      	movs	r3, #32
 80024ac:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80024ae:	4649      	mov	r1, r9
 80024b0:	6820      	ldr	r0, [r4, #0]
 80024b2:	f000 fe84 	bl	80031be <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024b6:	b190      	cbz	r0, 80024de <HAL_SD_WriteBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	4a3e      	ldr	r2, [pc, #248]	; (80025b4 <HAL_SD_WriteBlocks+0x1a8>)
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80024be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024c0:	4318      	orrs	r0, r3
 80024c2:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024c4:	2001      	movs	r0, #1
      hsd->Context = SD_CONTEXT_NONE;
 80024c6:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 80024c8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024cc:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80024ce:	e7bf      	b.n	8002450 <HAL_SD_WriteBlocks+0x44>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80024d0:	2310      	movs	r3, #16
 80024d2:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80024d4:	4649      	mov	r1, r9
 80024d6:	6820      	ldr	r0, [r4, #0]
 80024d8:	f000 fe59 	bl	800318e <SDMMC_CmdWriteSingleBlock>
 80024dc:	e7eb      	b.n	80024b6 <HAL_SD_WriteBlocks+0xaa>
    dataremaining = config.DataLength;
 80024de:	9d03      	ldr	r5, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80024e0:	f240 3a1a 	movw	sl, #794	; 0x31a
 80024e4:	6820      	ldr	r0, [r4, #0]
 80024e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024e8:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80024ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80024ee:	d016      	beq.n	800251e <HAL_SD_WriteBlocks+0x112>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80024f0:	05db      	lsls	r3, r3, #23
 80024f2:	d508      	bpl.n	8002506 <HAL_SD_WriteBlocks+0xfa>
 80024f4:	2f01      	cmp	r7, #1
 80024f6:	d906      	bls.n	8002506 <HAL_SD_WriteBlocks+0xfa>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80024f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d003      	beq.n	8002506 <HAL_SD_WriteBlocks+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80024fe:	f000 fe77 	bl	80031f0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002502:	2800      	cmp	r0, #0
 8002504:	d1d8      	bne.n	80024b8 <HAL_SD_WriteBlocks+0xac>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800250a:	f011 0108 	ands.w	r1, r1, #8
 800250e:	d028      	beq.n	8002562 <HAL_SD_WriteBlocks+0x156>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002510:	4a28      	ldr	r2, [pc, #160]	; (80025b4 <HAL_SD_WriteBlocks+0x1a8>)
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002514:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002516:	f043 0308 	orr.w	r3, r3, #8
 800251a:	63a3      	str	r3, [r4, #56]	; 0x38
 800251c:	e7d2      	b.n	80024c4 <HAL_SD_WriteBlocks+0xb8>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800251e:	045a      	lsls	r2, r3, #17
 8002520:	d50c      	bpl.n	800253c <HAL_SD_WriteBlocks+0x130>
 8002522:	b15d      	cbz	r5, 800253c <HAL_SD_WriteBlocks+0x130>
 8002524:	f106 0b20 	add.w	fp, r6, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002528:	f856 3b04 	ldr.w	r3, [r6], #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800252c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800252e:	9301      	str	r3, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002530:	a901      	add	r1, sp, #4
 8002532:	f000 fdaa 	bl	800308a <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002536:	45b3      	cmp	fp, r6
 8002538:	d1f6      	bne.n	8002528 <HAL_SD_WriteBlocks+0x11c>
 800253a:	3d20      	subs	r5, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800253c:	f7fe fda2 	bl	8001084 <HAL_GetTick>
 8002540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002542:	eba0 0008 	sub.w	r0, r0, r8
 8002546:	4298      	cmp	r0, r3
 8002548:	d3cc      	bcc.n	80024e4 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_SD_WriteBlocks+0x1a8>)
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002550:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002552:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002554:	2301      	movs	r3, #1
 8002556:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800255a:	2300      	movs	r3, #0
 800255c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800255e:	2003      	movs	r0, #3
 8002560:	e776      	b.n	8002450 <HAL_SD_WriteBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002564:	f012 0202 	ands.w	r2, r2, #2
 8002568:	d00a      	beq.n	8002580 <HAL_SD_WriteBlocks+0x174>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_SD_WriteBlocks+0x1a8>)
 800256c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800256e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002570:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002578:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800257c:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800257e:	e767      	b.n	8002450 <HAL_SD_WriteBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002580:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002582:	f010 0010 	ands.w	r0, r0, #16
 8002586:	d00a      	beq.n	800259e <HAL_SD_WriteBlocks+0x192>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002588:	490a      	ldr	r1, [pc, #40]	; (80025b4 <HAL_SD_WriteBlocks+0x1a8>)
 800258a:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800258c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800258e:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002596:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800259a:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800259c:	e758      	b.n	8002450 <HAL_SD_WriteBlocks+0x44>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800259e:	f240 523a 	movw	r2, #1338	; 0x53a
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80025aa:	e751      	b.n	8002450 <HAL_SD_WriteBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80025ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025b2:	e739      	b.n	8002428 <HAL_SD_WriteBlocks+0x1c>
 80025b4:	004005ff 	.word	0x004005ff

080025b8 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80025b8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80025ba:	0f9a      	lsrs	r2, r3, #30
 80025bc:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80025be:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80025c2:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80025c4:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80025c8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80025ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80025ce:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80025d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80025d4:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80025d6:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80025d8:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80025da:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80025dc:	0d1a      	lsrs	r2, r3, #20
 80025de:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80025e0:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80025e4:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80025e6:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80025ea:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80025ec:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80025f0:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80025f2:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80025f6:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80025f8:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80025fc:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80025fe:	2200      	movs	r2, #0
 8002600:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002602:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8002604:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002606:	2a00      	cmp	r2, #0
 8002608:	d16b      	bne.n	80026e2 <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800260a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800260c:	f640 74fc 	movw	r4, #4092	; 0xffc
 8002610:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8002614:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8002618:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800261a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800261e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002620:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8002624:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002626:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800262a:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800262c:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002630:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002634:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002636:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002638:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800263a:	7e0a      	ldrb	r2, [r1, #24]
 800263c:	f002 0207 	and.w	r2, r2, #7
 8002640:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002642:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002644:	4093      	lsls	r3, r2
 8002646:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002648:	7a0a      	ldrb	r2, [r1, #8]
 800264a:	f002 040f 	and.w	r4, r2, #15
 800264e:	2201      	movs	r2, #1
 8002650:	40a2      	lsls	r2, r4
 8002652:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002654:	0a52      	lsrs	r2, r2, #9
 8002656:	4353      	muls	r3, r2
 8002658:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800265a:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800265e:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002660:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002662:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8002666:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002668:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800266c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002670:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002672:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002674:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002676:	0fda      	lsrs	r2, r3, #31
 8002678:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800267a:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800267e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002680:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8002684:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002686:	f3c3 5283 	ubfx	r2, r3, #22, #4
 800268a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800268c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8002690:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8002694:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002696:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 800269a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800269e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80026a2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80026a6:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80026aa:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80026ae:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80026b2:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80026b6:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80026ba:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80026be:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80026c2:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80026c6:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80026ca:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80026ce:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80026d2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80026d6:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80026e0:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80026e2:	2a01      	cmp	r2, #1
 80026e4:	d10f      	bne.n	8002706 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80026e6:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80026f0:	4313      	orrs	r3, r2
 80026f2:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80026f4:	690b      	ldr	r3, [r1, #16]
 80026f6:	3301      	adds	r3, #1
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80026fc:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80026fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002702:	6583      	str	r3, [r0, #88]	; 0x58
 8002704:	e7ab      	b.n	800265e <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002706:	6803      	ldr	r3, [r0, #0]
 8002708:	4a05      	ldr	r2, [pc, #20]	; (8002720 <HAL_SD_GetCardCSD+0x168>)
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800270c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800270e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002712:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002714:	2301      	movs	r3, #1
 8002716:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800271a:	4618      	mov	r0, r3
 800271c:	bd10      	pop	{r4, pc}
 800271e:	bf00      	nop
 8002720:	004005ff 	.word	0x004005ff

08002724 <HAL_SD_InitCard>:
{
 8002724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002728:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800272a:	2300      	movs	r3, #0
 800272c:	9307      	str	r3, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800272e:	9308      	str	r3, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002730:	9309      	str	r3, [sp, #36]	; 0x24
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002732:	930a      	str	r3, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002734:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002736:	2376      	movs	r3, #118	; 0x76
 8002738:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 800273a:	ab0a      	add	r3, sp, #40	; 0x28
{
 800273c:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 800273e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002742:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002746:	ab07      	add	r3, sp, #28
 8002748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274a:	6820      	ldr	r0, [r4, #0]
 800274c:	f000 fc7e 	bl	800304c <SDIO_Init>
  if(status != HAL_OK)
 8002750:	4605      	mov	r5, r0
 8002752:	2800      	cmp	r0, #0
 8002754:	f040 808e 	bne.w	8002874 <HAL_SD_InitCard+0x150>
  __HAL_SD_DISABLE(hsd);
 8002758:	4f6e      	ldr	r7, [pc, #440]	; (8002914 <HAL_SD_InitCard+0x1f0>)
  __HAL_SD_ENABLE(hsd);
 800275a:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 800275c:	6038      	str	r0, [r7, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 800275e:	6820      	ldr	r0, [r4, #0]
 8002760:	f000 fc98 	bl	8003094 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8002764:	603e      	str	r6, [r7, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002766:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8002768:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800276a:	f000 fd73 	bl	8003254 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800276e:	4605      	mov	r5, r0
 8002770:	2800      	cmp	r0, #0
 8002772:	d179      	bne.n	8002868 <HAL_SD_InitCard+0x144>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002774:	6820      	ldr	r0, [r4, #0]
 8002776:	f000 fd95 	bl	80032a4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800277a:	b130      	cbz	r0, 800278a <HAL_SD_InitCard+0x66>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800277c:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800277e:	6820      	ldr	r0, [r4, #0]
 8002780:	f000 fd68 	bl	8003254 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002784:	b110      	cbz	r0, 800278c <HAL_SD_InitCard+0x68>
 8002786:	4605      	mov	r5, r0
 8002788:	e06e      	b.n	8002868 <HAL_SD_InitCard+0x144>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800278a:	64a6      	str	r6, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800278c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800278e:	2b01      	cmp	r3, #1
 8002790:	d062      	beq.n	8002858 <HAL_SD_InitCard+0x134>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002792:	f64f 76fe 	movw	r6, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002796:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002918 <HAL_SD_InitCard+0x1f4>
{
 800279a:	2100      	movs	r1, #0
 800279c:	4637      	mov	r7, r6
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800279e:	9b06      	ldr	r3, [sp, #24]
 80027a0:	42b3      	cmp	r3, r6
 80027a2:	d969      	bls.n	8002878 <HAL_SD_InitCard+0x154>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80027a4:	9b06      	ldr	r3, [sp, #24]
 80027a6:	42bb      	cmp	r3, r7
 80027a8:	f200 80aa 	bhi.w	8002900 <HAL_SD_InitCard+0x1dc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80027ac:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 80027b0:	f04f 0301 	mov.w	r3, #1
 80027b4:	bf18      	it	ne
 80027b6:	461d      	movne	r5, r3
 80027b8:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80027ba:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 80027bc:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80027c0:	f000 fc70 	bl	80030a4 <SDIO_GetPowerState>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	f000 809e 	beq.w	8002906 <HAL_SD_InitCard+0x1e2>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80027ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d019      	beq.n	8002804 <HAL_SD_InitCard+0xe0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80027d0:	6820      	ldr	r0, [r4, #0]
 80027d2:	f000 fdee 	bl	80033b2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80027d6:	2800      	cmp	r0, #0
 80027d8:	d16d      	bne.n	80028b6 <HAL_SD_InitCard+0x192>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80027da:	4601      	mov	r1, r0
 80027dc:	6820      	ldr	r0, [r4, #0]
 80027de:	f000 fc78 	bl	80030d2 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80027e2:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80027e4:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80027e6:	6820      	ldr	r0, [r4, #0]
 80027e8:	f000 fc73 	bl	80030d2 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80027ec:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80027ee:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80027f0:	6820      	ldr	r0, [r4, #0]
 80027f2:	f000 fc6e 	bl	80030d2 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80027f6:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80027f8:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80027fa:	6820      	ldr	r0, [r4, #0]
 80027fc:	f000 fc69 	bl	80030d2 <SDIO_GetResponse>
 8002800:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002804:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002806:	2b03      	cmp	r3, #3
 8002808:	d14e      	bne.n	80028a8 <HAL_SD_InitCard+0x184>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800280a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800280c:	2b03      	cmp	r3, #3
 800280e:	d159      	bne.n	80028c4 <HAL_SD_InitCard+0x1a0>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002810:	2104      	movs	r1, #4
 8002812:	6820      	ldr	r0, [r4, #0]
 8002814:	f000 fc5d 	bl	80030d2 <SDIO_GetResponse>
 8002818:	0d00      	lsrs	r0, r0, #20
 800281a:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800281c:	a90d      	add	r1, sp, #52	; 0x34
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff feca 	bl	80025b8 <HAL_SD_GetCardCSD>
 8002824:	4605      	mov	r5, r0
 8002826:	2800      	cmp	r0, #0
 8002828:	d170      	bne.n	800290c <HAL_SD_InitCard+0x1e8>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800282a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800282c:	4603      	mov	r3, r0
 800282e:	0412      	lsls	r2, r2, #16
 8002830:	6820      	ldr	r0, [r4, #0]
 8002832:	f000 fcf7 	bl	8003224 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002836:	2800      	cmp	r0, #0
 8002838:	d13d      	bne.n	80028b6 <HAL_SD_InitCard+0x192>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800283a:	f104 0310 	add.w	r3, r4, #16
 800283e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002842:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002846:	1d23      	adds	r3, r4, #4
 8002848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800284a:	6820      	ldr	r0, [r4, #0]
 800284c:	f000 fbfe 	bl	800304c <SDIO_Init>
}
 8002850:	4628      	mov	r0, r5
 8002852:	b018      	add	sp, #96	; 0x60
 8002854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002858:	2100      	movs	r1, #0
 800285a:	6820      	ldr	r0, [r4, #0]
 800285c:	f000 fd60 	bl	8003320 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002860:	2800      	cmp	r0, #0
 8002862:	d096      	beq.n	8002792 <HAL_SD_InitCard+0x6e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002864:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8002868:	2301      	movs	r3, #1
 800286a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800286e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002870:	4315      	orrs	r5, r2
 8002872:	63a5      	str	r5, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002874:	2501      	movs	r5, #1
 8002876:	e7eb      	b.n	8002850 <HAL_SD_InitCard+0x12c>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002878:	2900      	cmp	r1, #0
 800287a:	d193      	bne.n	80027a4 <HAL_SD_InitCard+0x80>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800287c:	6820      	ldr	r0, [r4, #0]
 800287e:	f000 fd4f 	bl	8003320 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002882:	4605      	mov	r5, r0
 8002884:	2800      	cmp	r0, #0
 8002886:	d1ef      	bne.n	8002868 <HAL_SD_InitCard+0x144>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002888:	4641      	mov	r1, r8
 800288a:	6820      	ldr	r0, [r4, #0]
 800288c:	f000 fd60 	bl	8003350 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002890:	2800      	cmp	r0, #0
 8002892:	d1e7      	bne.n	8002864 <HAL_SD_InitCard+0x140>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002894:	4629      	mov	r1, r5
 8002896:	6820      	ldr	r0, [r4, #0]
 8002898:	f000 fc1b 	bl	80030d2 <SDIO_GetResponse>
    count++;
 800289c:	9b06      	ldr	r3, [sp, #24]
 800289e:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80028a0:	4605      	mov	r5, r0
    count++;
 80028a2:	9306      	str	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80028a4:	0fc1      	lsrs	r1, r0, #31
 80028a6:	e77a      	b.n	800279e <HAL_SD_InitCard+0x7a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80028a8:	f10d 0116 	add.w	r1, sp, #22
 80028ac:	6820      	ldr	r0, [r4, #0]
 80028ae:	f000 fdab 	bl	8003408 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d0a9      	beq.n	800280a <HAL_SD_InitCard+0xe6>
    hsd->State = HAL_SD_STATE_READY;
 80028b6:	2501      	movs	r5, #1
 80028b8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80028bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80028be:	4308      	orrs	r0, r1
 80028c0:	63a0      	str	r0, [r4, #56]	; 0x38
 80028c2:	e7c5      	b.n	8002850 <HAL_SD_InitCard+0x12c>
    hsd->SdCard.RelCardAdd = sd_rca;
 80028c4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80028c8:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80028ca:	6820      	ldr	r0, [r4, #0]
 80028cc:	0409      	lsls	r1, r1, #16
 80028ce:	f000 fd85 	bl	80033dc <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80028d2:	2800      	cmp	r0, #0
 80028d4:	d1ef      	bne.n	80028b6 <HAL_SD_InitCard+0x192>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80028d6:	4601      	mov	r1, r0
 80028d8:	6820      	ldr	r0, [r4, #0]
 80028da:	f000 fbfa 	bl	80030d2 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80028de:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80028e0:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80028e2:	6820      	ldr	r0, [r4, #0]
 80028e4:	f000 fbf5 	bl	80030d2 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80028e8:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80028ea:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80028ec:	6820      	ldr	r0, [r4, #0]
 80028ee:	f000 fbf0 	bl	80030d2 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80028f2:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80028f4:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80028f6:	6820      	ldr	r0, [r4, #0]
 80028f8:	f000 fbeb 	bl	80030d2 <SDIO_GetResponse>
 80028fc:	6720      	str	r0, [r4, #112]	; 0x70
 80028fe:	e787      	b.n	8002810 <HAL_SD_InitCard+0xec>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002900:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8002904:	e7b0      	b.n	8002868 <HAL_SD_InitCard+0x144>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002906:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800290a:	e7d4      	b.n	80028b6 <HAL_SD_InitCard+0x192>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800290c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002910:	e7d1      	b.n	80028b6 <HAL_SD_InitCard+0x192>
 8002912:	bf00      	nop
 8002914:	422580a0 	.word	0x422580a0
 8002918:	c1100000 	.word	0xc1100000

0800291c <HAL_SD_Init>:
{
 800291c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800291e:	4604      	mov	r4, r0
 8002920:	b908      	cbnz	r0, 8002926 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8002922:	2001      	movs	r0, #1
 8002924:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8002926:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800292a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800292e:	b913      	cbnz	r3, 8002936 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8002930:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8002932:	f003 f9a3 	bl	8005c7c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8002936:	2303      	movs	r3, #3
 8002938:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800293c:	4620      	mov	r0, r4
 800293e:	f7ff fef1 	bl	8002724 <HAL_SD_InitCard>
 8002942:	2800      	cmp	r0, #0
 8002944:	d1ed      	bne.n	8002922 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8002946:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002948:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800294a:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800294c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002950:	bd10      	pop	{r4, pc}

08002952 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002952:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002954:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002956:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002958:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800295a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800295c:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800295e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002960:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002962:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002964:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002966:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002968:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800296a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800296c:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800296e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002970:	61cb      	str	r3, [r1, #28]
}
 8002972:	2000      	movs	r0, #0
 8002974:	4770      	bx	lr
	...

08002978 <HAL_SD_ConfigWideBusOperation>:
{
 8002978:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800297a:	2303      	movs	r3, #3
 800297c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002980:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002982:	2b03      	cmp	r3, #3
{
 8002984:	b08a      	sub	sp, #40	; 0x28
 8002986:	4604      	mov	r4, r0
 8002988:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800298a:	d002      	beq.n	8002992 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 800298c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002990:	d103      	bne.n	800299a <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002992:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	e055      	b.n	8002a46 <HAL_SD_ConfigWideBusOperation+0xce>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800299a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800299e:	d12c      	bne.n	80029fa <HAL_SD_ConfigWideBusOperation+0x82>
  uint32_t scr[2U] = {0U, 0U};
 80029a0:	2100      	movs	r1, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80029a2:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 80029a4:	9104      	str	r1, [sp, #16]
 80029a6:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80029a8:	f000 fb93 	bl	80030d2 <SDIO_GetResponse>
 80029ac:	0180      	lsls	r0, r0, #6
 80029ae:	d41f      	bmi.n	80029f0 <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 80029b0:	a904      	add	r1, sp, #16
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff fbb2 	bl	800211c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80029b8:	b960      	cbnz	r0, 80029d4 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80029ba:	9b05      	ldr	r3, [sp, #20]
 80029bc:	0359      	lsls	r1, r3, #13
 80029be:	d519      	bpl.n	80029f4 <HAL_SD_ConfigWideBusOperation+0x7c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80029c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80029c2:	6820      	ldr	r0, [r4, #0]
 80029c4:	0409      	lsls	r1, r1, #16
 80029c6:	f000 fcab 	bl	8003320 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80029ca:	b918      	cbnz	r0, 80029d4 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80029cc:	2102      	movs	r1, #2
 80029ce:	6820      	ldr	r0, [r4, #0]
 80029d0:	f000 fd9a 	bl	8003508 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80029d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029d6:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 80029d8:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80029da:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80029dc:	2d00      	cmp	r5, #0
 80029de:	d034      	beq.n	8002a4a <HAL_SD_ConfigWideBusOperation+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_SD_ConfigWideBusOperation+0x108>)
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80029e6:	2001      	movs	r0, #1
 80029e8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80029ec:	b00a      	add	sp, #40	; 0x28
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80029f0:	4630      	mov	r0, r6
 80029f2:	e7ef      	b.n	80029d4 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80029f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80029f8:	e7ec      	b.n	80029d4 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80029fa:	bb09      	cbnz	r1, 8002a40 <HAL_SD_ConfigWideBusOperation+0xc8>
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80029fc:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 80029fe:	9104      	str	r1, [sp, #16]
 8002a00:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002a02:	f000 fb66 	bl	80030d2 <SDIO_GetResponse>
 8002a06:	0182      	lsls	r2, r0, #6
 8002a08:	d414      	bmi.n	8002a34 <HAL_SD_ConfigWideBusOperation+0xbc>
  errorstate = SD_FindSCR(hsd, scr);
 8002a0a:	a904      	add	r1, sp, #16
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7ff fb85 	bl	800211c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a12:	b960      	cbnz	r0, 8002a2e <HAL_SD_ConfigWideBusOperation+0xb6>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002a14:	9b05      	ldr	r3, [sp, #20]
 8002a16:	03db      	lsls	r3, r3, #15
 8002a18:	d50f      	bpl.n	8002a3a <HAL_SD_ConfigWideBusOperation+0xc2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a1a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002a1c:	6820      	ldr	r0, [r4, #0]
 8002a1e:	0409      	lsls	r1, r1, #16
 8002a20:	f000 fc7e 	bl	8003320 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a24:	b918      	cbnz	r0, 8002a2e <HAL_SD_ConfigWideBusOperation+0xb6>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002a26:	4601      	mov	r1, r0
 8002a28:	6820      	ldr	r0, [r4, #0]
 8002a2a:	f000 fd6d 	bl	8003508 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002a2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002a30:	4308      	orrs	r0, r1
 8002a32:	e7d1      	b.n	80029d8 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002a34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a38:	e7f9      	b.n	8002a2e <HAL_SD_ConfigWideBusOperation+0xb6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002a3a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002a3e:	e7f6      	b.n	8002a2e <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a40:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a46:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a48:	e7c7      	b.n	80029da <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002a4a:	6863      	ldr	r3, [r4, #4]
 8002a4c:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002a4e:	68a3      	ldr	r3, [r4, #8]
 8002a50:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002a52:	68e3      	ldr	r3, [r4, #12]
 8002a54:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002a56:	6963      	ldr	r3, [r4, #20]
 8002a58:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002a5a:	69a3      	ldr	r3, [r4, #24]
 8002a5c:	9309      	str	r3, [sp, #36]	; 0x24
    Init.BusWide             = WideMode;
 8002a5e:	9607      	str	r6, [sp, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002a60:	ab0a      	add	r3, sp, #40	; 0x28
 8002a62:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002a66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002a6a:	ab04      	add	r3, sp, #16
 8002a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a6e:	6820      	ldr	r0, [r4, #0]
 8002a70:	f000 faec 	bl	800304c <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	e7b6      	b.n	80029ec <HAL_SD_ConfigWideBusOperation+0x74>
 8002a7e:	bf00      	nop
 8002a80:	004005ff 	.word	0x004005ff

08002a84 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a84:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002a86:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a88:	0409      	lsls	r1, r1, #16
{
 8002a8a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a8c:	6800      	ldr	r0, [r0, #0]
 8002a8e:	f000 fd0b 	bl	80034a8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a92:	4601      	mov	r1, r0
 8002a94:	b928      	cbnz	r0, 8002aa2 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a96:	6820      	ldr	r0, [r4, #0]
 8002a98:	f000 fb1b 	bl	80030d2 <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002a9c:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8002aa0:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8002aa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002aa4:	4319      	orrs	r1, r3
 8002aa6:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	e7f7      	b.n	8002a9c <HAL_SD_GetCardState+0x18>

08002aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aac:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aae:	4604      	mov	r4, r0
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	d036      	beq.n	8002b22 <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ab8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002abc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ac0:	b91b      	cbnz	r3, 8002aca <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ac2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ac6:	f003 f933 	bl	8005d30 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aca:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002acc:	68a0      	ldr	r0, [r4, #8]
 8002ace:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002ad6:	680b      	ldr	r3, [r1, #0]
 8002ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002adc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ade:	6863      	ldr	r3, [r4, #4]
 8002ae0:	4303      	orrs	r3, r0
 8002ae2:	68e0      	ldr	r0, [r4, #12]
 8002ae4:	4303      	orrs	r3, r0
 8002ae6:	6920      	ldr	r0, [r4, #16]
 8002ae8:	4303      	orrs	r3, r0
 8002aea:	6960      	ldr	r0, [r4, #20]
 8002aec:	4303      	orrs	r3, r0
 8002aee:	69e0      	ldr	r0, [r4, #28]
 8002af0:	4303      	orrs	r3, r0
 8002af2:	6a20      	ldr	r0, [r4, #32]
 8002af4:	4303      	orrs	r3, r0
 8002af6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002af8:	4303      	orrs	r3, r0
 8002afa:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002afe:	4303      	orrs	r3, r0
 8002b00:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b02:	0c12      	lsrs	r2, r2, #16
 8002b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b06:	f002 0204 	and.w	r2, r2, #4
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b0e:	69cb      	ldr	r3, [r1, #28]
 8002b10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b14:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b16:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002b18:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b1a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b1c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002b20:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b22:	2001      	movs	r0, #1
}
 8002b24:	bd10      	pop	{r4, pc}

08002b26 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b26:	6803      	ldr	r3, [r0, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002b3e:	4770      	bx	lr

08002b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b40:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b42:	6803      	ldr	r3, [r0, #0]
 8002b44:	68c1      	ldr	r1, [r0, #12]
 8002b46:	691a      	ldr	r2, [r3, #16]
{
 8002b48:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b52:	6925      	ldr	r5, [r4, #16]
 8002b54:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b56:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b58:	69c0      	ldr	r0, [r0, #28]
 8002b5a:	432a      	orrs	r2, r5
 8002b5c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002b5e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b62:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002b64:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b68:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	69a1      	ldr	r1, [r4, #24]
 8002b72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b76:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b78:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b7c:	615a      	str	r2, [r3, #20]
 8002b7e:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b80:	d129      	bne.n	8002bd6 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <UART_SetConfig+0x4e>
 8002b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d120      	bne.n	8002bd0 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b8e:	f7ff fab5 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b92:	6862      	ldr	r2, [r4, #4]
 8002b94:	6825      	ldr	r5, [r4, #0]
 8002b96:	1892      	adds	r2, r2, r2
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	f04f 0119 	mov.w	r1, #25
 8002ba0:	415b      	adcs	r3, r3
 8002ba2:	fba0 0101 	umull	r0, r1, r0, r1
 8002ba6:	f7fe f89b 	bl	8000ce0 <__aeabi_uldivmod>
 8002baa:	2164      	movs	r1, #100	; 0x64
 8002bac:	fbb0 f4f1 	udiv	r4, r0, r1
 8002bb0:	fb01 0314 	mls	r3, r1, r4, r0
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	3332      	adds	r3, #50	; 0x32
 8002bb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bbc:	f003 0207 	and.w	r2, r3, #7
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002bc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bca:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bcc:	60ab      	str	r3, [r5, #8]
 8002bce:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bd0:	f7ff fa84 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8002bd4:	e7dd      	b.n	8002b92 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d002      	beq.n	8002be0 <UART_SetConfig+0xa0>
 8002bda:	4a0f      	ldr	r2, [pc, #60]	; (8002c18 <UART_SetConfig+0xd8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d116      	bne.n	8002c0e <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002be0:	f7ff fa8c 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002be4:	6863      	ldr	r3, [r4, #4]
 8002be6:	6825      	ldr	r5, [r4, #0]
 8002be8:	2119      	movs	r1, #25
 8002bea:	009a      	lsls	r2, r3, #2
 8002bec:	fba0 0101 	umull	r0, r1, r0, r1
 8002bf0:	0f9b      	lsrs	r3, r3, #30
 8002bf2:	f7fe f875 	bl	8000ce0 <__aeabi_uldivmod>
 8002bf6:	2264      	movs	r2, #100	; 0x64
 8002bf8:	fbb0 f1f2 	udiv	r1, r0, r2
 8002bfc:	fb02 0311 	mls	r3, r2, r1, r0
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	; 0x32
 8002c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c08:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002c0c:	e7de      	b.n	8002bcc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c0e:	f7ff fa65 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8002c12:	e7e7      	b.n	8002be4 <UART_SetConfig+0xa4>
 8002c14:	40011000 	.word	0x40011000
 8002c18:	40011400 	.word	0x40011400

08002c1c <HAL_UART_Init>:
{
 8002c1c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002c1e:	4604      	mov	r4, r0
 8002c20:	b340      	cbz	r0, 8002c74 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c2a:	b91b      	cbnz	r3, 8002c34 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c2c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002c30:	f003 f938 	bl	8005ea4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c34:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c36:	2324      	movs	r3, #36	; 0x24
 8002c38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002c3c:	68d3      	ldr	r3, [r2, #12]
 8002c3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c42:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7ff ff7b 	bl	8002b40 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c5a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c62:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c66:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c68:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002c72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c74:	2001      	movs	r0, #1
}
 8002c76:	bd10      	pop	{r4, pc}

08002c78 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c78:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d120      	bne.n	8002cc2 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8002c80:	b1e9      	cbz	r1, 8002cbe <HAL_UART_Receive_IT+0x46>
 8002c82:	b1e2      	cbz	r2, 8002cbe <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8002c84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d01a      	beq.n	8002cc2 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8002c8c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8002c8e:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c92:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c96:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c9a:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8002c9c:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c9e:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8002ca0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ca4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002ca8:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002caa:	6951      	ldr	r1, [r2, #20]
 8002cac:	f041 0101 	orr.w	r1, r1, #1
 8002cb0:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cb2:	68d1      	ldr	r1, [r2, #12]
 8002cb4:	f041 0120 	orr.w	r1, r1, #32
 8002cb8:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002cba:	4618      	mov	r0, r3
 8002cbc:	4770      	bx	lr
      return HAL_ERROR;
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	4770      	bx	lr
    return HAL_BUSY;
 8002cc2:	2002      	movs	r0, #2
}
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_UART_TxCpltCallback>:
 8002cc6:	4770      	bx	lr

08002cc8 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cc8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002ccc:	2b22      	cmp	r3, #34	; 0x22
{
 8002cce:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cd0:	d136      	bne.n	8002d40 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cd2:	6883      	ldr	r3, [r0, #8]
 8002cd4:	6901      	ldr	r1, [r0, #16]
 8002cd6:	6802      	ldr	r2, [r0, #0]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cdc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cde:	d123      	bne.n	8002d28 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ce0:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ce2:	b9e9      	cbnz	r1, 8002d20 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002cec:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002cee:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002cf0:	3c01      	subs	r4, #1
 8002cf2:	b2a4      	uxth	r4, r4
 8002cf4:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002cf6:	b98c      	cbnz	r4, 8002d1c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cf8:	6803      	ldr	r3, [r0, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	f022 0220 	bic.w	r2, r2, #32
 8002d00:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d08:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002d12:	2320      	movs	r3, #32
 8002d14:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002d18:	f002 fd44 	bl	80057a4 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002d1c:	2000      	movs	r0, #0
}
 8002d1e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f823 2b01 	strh.w	r2, [r3], #1
 8002d26:	e7e1      	b.n	8002cec <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d28:	b921      	cbnz	r1, 8002d34 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d2a:	1c59      	adds	r1, r3, #1
 8002d2c:	6852      	ldr	r2, [r2, #4]
 8002d2e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e7dc      	b.n	8002cee <UART_Receive_IT+0x26>
 8002d34:	6852      	ldr	r2, [r2, #4]
 8002d36:	1c59      	adds	r1, r3, #1
 8002d38:	6281      	str	r1, [r0, #40]	; 0x28
 8002d3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d3e:	e7f7      	b.n	8002d30 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002d40:	2002      	movs	r0, #2
 8002d42:	bd10      	pop	{r4, pc}

08002d44 <HAL_UART_ErrorCallback>:
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d48:	6803      	ldr	r3, [r0, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d4c:	68d9      	ldr	r1, [r3, #12]
{
 8002d4e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002d50:	0716      	lsls	r6, r2, #28
{
 8002d52:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d54:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002d56:	d107      	bne.n	8002d68 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d58:	0696      	lsls	r6, r2, #26
 8002d5a:	d55c      	bpl.n	8002e16 <HAL_UART_IRQHandler+0xce>
 8002d5c:	068d      	lsls	r5, r1, #26
 8002d5e:	d55a      	bpl.n	8002e16 <HAL_UART_IRQHandler+0xce>
}
 8002d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002d64:	f7ff bfb0 	b.w	8002cc8 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d68:	f015 0501 	ands.w	r5, r5, #1
 8002d6c:	d102      	bne.n	8002d74 <HAL_UART_IRQHandler+0x2c>
 8002d6e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002d72:	d050      	beq.n	8002e16 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d74:	07d0      	lsls	r0, r2, #31
 8002d76:	d505      	bpl.n	8002d84 <HAL_UART_IRQHandler+0x3c>
 8002d78:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d7a:	bf42      	ittt	mi
 8002d7c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002d7e:	f043 0301 	orrmi.w	r3, r3, #1
 8002d82:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d84:	0756      	lsls	r6, r2, #29
 8002d86:	d504      	bpl.n	8002d92 <HAL_UART_IRQHandler+0x4a>
 8002d88:	b11d      	cbz	r5, 8002d92 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d92:	0790      	lsls	r0, r2, #30
 8002d94:	d504      	bpl.n	8002da0 <HAL_UART_IRQHandler+0x58>
 8002d96:	b11d      	cbz	r5, 8002da0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002da0:	0713      	lsls	r3, r2, #28
 8002da2:	d506      	bpl.n	8002db2 <HAL_UART_IRQHandler+0x6a>
 8002da4:	068e      	lsls	r6, r1, #26
 8002da6:	d400      	bmi.n	8002daa <HAL_UART_IRQHandler+0x62>
 8002da8:	b11d      	cbz	r5, 8002db2 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002daa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002dac:	f043 0308 	orr.w	r3, r3, #8
 8002db0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002db2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d066      	beq.n	8002e86 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db8:	0695      	lsls	r5, r2, #26
 8002dba:	d504      	bpl.n	8002dc6 <HAL_UART_IRQHandler+0x7e>
 8002dbc:	0688      	lsls	r0, r1, #26
 8002dbe:	d502      	bpl.n	8002dc6 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f7ff ff81 	bl	8002cc8 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002dcc:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8002dce:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dd0:	d402      	bmi.n	8002dd8 <HAL_UART_IRQHandler+0x90>
 8002dd2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002dd6:	d01a      	beq.n	8002e0e <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8002dd8:	f7ff fea5 	bl	8002b26 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	0652      	lsls	r2, r2, #25
 8002de2:	d510      	bpl.n	8002e06 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de4:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002de6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dec:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002dee:	b150      	cbz	r0, 8002e06 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002df0:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <HAL_UART_IRQHandler+0x140>)
 8002df2:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002df4:	f7fe f9db 	bl	80011ae <HAL_DMA_Abort_IT>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d044      	beq.n	8002e86 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dfc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e02:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002e04:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7ff ff9c 	bl	8002d44 <HAL_UART_ErrorCallback>
 8002e0c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002e0e:	f7ff ff99 	bl	8002d44 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e12:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002e14:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e16:	0616      	lsls	r6, r2, #24
 8002e18:	d527      	bpl.n	8002e6a <HAL_UART_IRQHandler+0x122>
 8002e1a:	060d      	lsls	r5, r1, #24
 8002e1c:	d525      	bpl.n	8002e6a <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e1e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002e22:	2a21      	cmp	r2, #33	; 0x21
 8002e24:	d12f      	bne.n	8002e86 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e26:	68a2      	ldr	r2, [r4, #8]
 8002e28:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002e2c:	6a22      	ldr	r2, [r4, #32]
 8002e2e:	d117      	bne.n	8002e60 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e30:	8811      	ldrh	r1, [r2, #0]
 8002e32:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002e36:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e38:	6921      	ldr	r1, [r4, #16]
 8002e3a:	b979      	cbnz	r1, 8002e5c <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8002e3c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002e3e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002e40:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002e42:	3a01      	subs	r2, #1
 8002e44:	b292      	uxth	r2, r2
 8002e46:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002e48:	b9ea      	cbnz	r2, 8002e86 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e50:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002e5c:	3201      	adds	r2, #1
 8002e5e:	e7ee      	b.n	8002e3e <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e60:	1c51      	adds	r1, r2, #1
 8002e62:	6221      	str	r1, [r4, #32]
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	e7ea      	b.n	8002e40 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e6a:	0650      	lsls	r0, r2, #25
 8002e6c:	d50b      	bpl.n	8002e86 <HAL_UART_IRQHandler+0x13e>
 8002e6e:	064a      	lsls	r2, r1, #25
 8002e70:	d509      	bpl.n	8002e86 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e78:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002e80:	4620      	mov	r0, r4
 8002e82:	f7ff ff20 	bl	8002cc6 <HAL_UART_TxCpltCallback>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	08002e8d 	.word	0x08002e8d

08002e8c <UART_DMAAbortOnError>:
{
 8002e8c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e8e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e94:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002e96:	f7ff ff55 	bl	8002d44 <HAL_UART_ErrorCallback>
 8002e9a:	bd08      	pop	{r3, pc}

08002e9c <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <SDMMC_GetCmdResp2+0x4c>)
 8002e9e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ea8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eac:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002eae:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002eb2:	d315      	bcc.n	8002ee0 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002eb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002eb6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002eba:	d0f8      	beq.n	8002eae <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ebc:	0512      	lsls	r2, r2, #20
 8002ebe:	d4f6      	bmi.n	8002eae <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002ec0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ec2:	075b      	lsls	r3, r3, #29
 8002ec4:	d503      	bpl.n	8002ece <SDMMC_GetCmdResp2+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ec6:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ec8:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002ece:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ed0:	f013 0301 	ands.w	r3, r3, #1
 8002ed4:	d001      	beq.n	8002eda <SDMMC_GetCmdResp2+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e7f6      	b.n	8002ec8 <SDMMC_GetCmdResp2+0x2c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002eda:	22c5      	movs	r2, #197	; 0xc5
 8002edc:	6382      	str	r2, [r0, #56]	; 0x38
 8002ede:	e7f4      	b.n	8002eca <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8002ee0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ee4:	e7f1      	b.n	8002eca <SDMMC_GetCmdResp2+0x2e>
 8002ee6:	bf00      	nop
 8002ee8:	2000000c 	.word	0x2000000c

08002eec <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <SDMMC_GetCmdResp3+0x40>)
 8002eee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ef8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002efc:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002efe:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002f02:	d30f      	bcc.n	8002f24 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002f04:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f06:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002f0a:	d0f8      	beq.n	8002efe <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f0c:	0512      	lsls	r2, r2, #20
 8002f0e:	d4f6      	bmi.n	8002efe <SDMMC_GetCmdResp3+0x12>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f12:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f16:	bf15      	itete	ne
 8002f18:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f1a:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f1c:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f1e:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002f20:	4618      	mov	r0, r3
 8002f22:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002f24:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	2000000c 	.word	0x2000000c

08002f30 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f30:	4b44      	ldr	r3, [pc, #272]	; (8003044 <SDMMC_GetCmdResp1+0x114>)
{
 8002f32:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8002f3a:	fbb3 f3f4 	udiv	r3, r3, r4
 8002f3e:	435a      	muls	r2, r3
    if (count-- == 0U)
 8002f40:	2a00      	cmp	r2, #0
 8002f42:	d04a      	beq.n	8002fda <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 8002f44:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f46:	f013 0f45 	tst.w	r3, #69	; 0x45
 8002f4a:	d008      	beq.n	8002f5e <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f4c:	051c      	lsls	r4, r3, #20
 8002f4e:	d406      	bmi.n	8002f5e <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f52:	075b      	lsls	r3, r3, #29
 8002f54:	d505      	bpl.n	8002f62 <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f56:	2304      	movs	r3, #4
 8002f58:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	e7ee      	b.n	8002f40 <SDMMC_GetCmdResp1+0x10>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002f62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f64:	07dc      	lsls	r4, r3, #31
 8002f66:	d503      	bpl.n	8002f70 <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f68:	2301      	movs	r3, #1
 8002f6a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	bd10      	pop	{r4, pc}
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f70:	23c5      	movs	r3, #197	; 0xc5
 8002f72:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002f74:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	4299      	cmp	r1, r3
 8002f7a:	d1f7      	bne.n	8002f6c <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8002f7c:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002f7e:	4832      	ldr	r0, [pc, #200]	; (8003048 <SDMMC_GetCmdResp1+0x118>)
 8002f80:	4018      	ands	r0, r3
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d05c      	beq.n	8003040 <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	db2a      	blt.n	8002fe0 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002f8a:	005a      	lsls	r2, r3, #1
 8002f8c:	d42b      	bmi.n	8002fe6 <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002f8e:	009c      	lsls	r4, r3, #2
 8002f90:	d42b      	bmi.n	8002fea <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002f92:	00d9      	lsls	r1, r3, #3
 8002f94:	d42b      	bmi.n	8002fee <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002f96:	011a      	lsls	r2, r3, #4
 8002f98:	d42c      	bmi.n	8002ff4 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002f9a:	015c      	lsls	r4, r3, #5
 8002f9c:	d42d      	bmi.n	8002ffa <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002f9e:	01d9      	lsls	r1, r3, #7
 8002fa0:	d42e      	bmi.n	8003000 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002fa2:	021a      	lsls	r2, r3, #8
 8002fa4:	d42f      	bmi.n	8003006 <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002fa6:	025c      	lsls	r4, r3, #9
 8002fa8:	d430      	bmi.n	800300c <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002faa:	0299      	lsls	r1, r3, #10
 8002fac:	d431      	bmi.n	8003012 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002fae:	02da      	lsls	r2, r3, #11
 8002fb0:	d432      	bmi.n	8003018 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002fb2:	035c      	lsls	r4, r3, #13
 8002fb4:	d433      	bmi.n	800301e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002fb6:	0399      	lsls	r1, r3, #14
 8002fb8:	d434      	bmi.n	8003024 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002fba:	03da      	lsls	r2, r3, #15
 8002fbc:	d435      	bmi.n	800302a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002fbe:	041c      	lsls	r4, r3, #16
 8002fc0:	d436      	bmi.n	8003030 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002fc2:	0459      	lsls	r1, r3, #17
 8002fc4:	d437      	bmi.n	8003036 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002fc6:	049a      	lsls	r2, r3, #18
 8002fc8:	d438      	bmi.n	800303c <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002fca:	f013 0f08 	tst.w	r3, #8
 8002fce:	bf0c      	ite	eq
 8002fd0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002fd4:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8002fd8:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8002fda:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002fde:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002fe0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002fe4:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002fe6:	2040      	movs	r0, #64	; 0x40
 8002fe8:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002fea:	2080      	movs	r0, #128	; 0x80
 8002fec:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002fee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ff2:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002ff4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ff8:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002ffa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ffe:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003000:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003004:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003006:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800300a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800300c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003010:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003012:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003016:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CC_ERR;
 8003018:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800301c:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800301e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003022:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003024:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003028:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800302a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800302e:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003030:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003034:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003036:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800303a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_RESET;
 800303c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8003040:	bd10      	pop	{r4, pc}
 8003042:	bf00      	nop
 8003044:	2000000c 	.word	0x2000000c
 8003048:	fdffe008 	.word	0xfdffe008

0800304c <SDIO_Init>:
{
 800304c:	b084      	sub	sp, #16
 800304e:	b510      	push	{r4, lr}
 8003050:	ac03      	add	r4, sp, #12
 8003052:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8003056:	9904      	ldr	r1, [sp, #16]
 8003058:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800305a:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800305c:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 800305e:	9905      	ldr	r1, [sp, #20]
 8003060:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8003062:	9906      	ldr	r1, [sp, #24]
 8003064:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8003066:	9907      	ldr	r1, [sp, #28]
 8003068:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800306a:	9908      	ldr	r1, [sp, #32]
}
 800306c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003070:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8003074:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003076:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800307a:	4313      	orrs	r3, r2
 800307c:	6043      	str	r3, [r0, #4]
}
 800307e:	b004      	add	sp, #16
 8003080:	2000      	movs	r0, #0
 8003082:	4770      	bx	lr

08003084 <SDIO_ReadFIFO>:
 8003084:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8003088:	4770      	bx	lr

0800308a <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 800308a:	680b      	ldr	r3, [r1, #0]
 800308c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8003090:	2000      	movs	r0, #0
 8003092:	4770      	bx	lr

08003094 <SDIO_PowerState_ON>:
{  
 8003094:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003096:	2303      	movs	r3, #3
 8003098:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 800309a:	2002      	movs	r0, #2
 800309c:	f7fd fff8 	bl	8001090 <HAL_Delay>
}
 80030a0:	2000      	movs	r0, #0
 80030a2:	bd08      	pop	{r3, pc}

080030a4 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80030a4:	6800      	ldr	r0, [r0, #0]
}
 80030a6:	f000 0003 	and.w	r0, r0, #3
 80030aa:	4770      	bx	lr

080030ac <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 80030ac:	680b      	ldr	r3, [r1, #0]
{
 80030ae:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 80030b0:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80030b2:	688c      	ldr	r4, [r1, #8]
 80030b4:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80030b6:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80030b8:	4323      	orrs	r3, r4
                       Command->Response         |\
 80030ba:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 80030bc:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 80030be:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80030c0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 80030c4:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80030c6:	f022 020f 	bic.w	r2, r2, #15
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60c3      	str	r3, [r0, #12]
}
 80030ce:	2000      	movs	r0, #0
 80030d0:	bd10      	pop	{r4, pc}

080030d2 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80030d2:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80030d4:	5840      	ldr	r0, [r0, r1]
}  
 80030d6:	4770      	bx	lr

080030d8 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 80030d8:	680b      	ldr	r3, [r1, #0]
{
 80030da:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 80030dc:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 80030de:	684b      	ldr	r3, [r1, #4]
 80030e0:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80030e2:	68cc      	ldr	r4, [r1, #12]
 80030e4:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80030e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80030e8:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80030ea:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 80030ec:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 80030ee:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80030f0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80030f2:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 80030f6:	4313      	orrs	r3, r2
 80030f8:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80030fa:	2000      	movs	r0, #0
 80030fc:	bd10      	pop	{r4, pc}

080030fe <SDMMC_CmdBlockLength>:
{
 80030fe:	b530      	push	{r4, r5, lr}
 8003100:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003102:	2340      	movs	r3, #64	; 0x40
 8003104:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003106:	2300      	movs	r3, #0
{
 8003108:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800310a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800310c:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800310e:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003110:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003116:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003118:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800311a:	f7ff ffc7 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800311e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003122:	4621      	mov	r1, r4
 8003124:	4628      	mov	r0, r5
 8003126:	f7ff ff03 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 800312a:	b007      	add	sp, #28
 800312c:	bd30      	pop	{r4, r5, pc}

0800312e <SDMMC_CmdReadSingleBlock>:
{
 800312e:	b530      	push	{r4, r5, lr}
 8003130:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003132:	2340      	movs	r3, #64	; 0x40
 8003134:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003136:	2300      	movs	r3, #0
{
 8003138:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800313a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800313c:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800313e:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003140:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003146:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003148:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800314a:	f7ff ffaf 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4621      	mov	r1, r4
 8003154:	4628      	mov	r0, r5
 8003156:	f7ff feeb 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 800315a:	b007      	add	sp, #28
 800315c:	bd30      	pop	{r4, r5, pc}

0800315e <SDMMC_CmdReadMultiBlock>:
{
 800315e:	b530      	push	{r4, r5, lr}
 8003160:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003162:	2340      	movs	r3, #64	; 0x40
 8003164:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003166:	2300      	movs	r3, #0
{
 8003168:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800316a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800316c:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800316e:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003170:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003176:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003178:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800317a:	f7ff ff97 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4621      	mov	r1, r4
 8003184:	4628      	mov	r0, r5
 8003186:	f7ff fed3 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 800318a:	b007      	add	sp, #28
 800318c:	bd30      	pop	{r4, r5, pc}

0800318e <SDMMC_CmdWriteSingleBlock>:
{
 800318e:	b530      	push	{r4, r5, lr}
 8003190:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003192:	2340      	movs	r3, #64	; 0x40
 8003194:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003196:	2300      	movs	r3, #0
{
 8003198:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800319a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800319c:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800319e:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031a0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80031a8:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031aa:	f7ff ff7f 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4621      	mov	r1, r4
 80031b4:	4628      	mov	r0, r5
 80031b6:	f7ff febb 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 80031ba:	b007      	add	sp, #28
 80031bc:	bd30      	pop	{r4, r5, pc}

080031be <SDMMC_CmdWriteMultiBlock>:
{
 80031be:	b530      	push	{r4, r5, lr}
 80031c0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031c2:	2340      	movs	r3, #64	; 0x40
 80031c4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031c6:	2300      	movs	r3, #0
{
 80031c8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80031ca:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80031cc:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031ce:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031d0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031d6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80031d8:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031da:	f7ff ff67 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4621      	mov	r1, r4
 80031e4:	4628      	mov	r0, r5
 80031e6:	f7ff fea3 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 80031ea:	b007      	add	sp, #28
 80031ec:	bd30      	pop	{r4, r5, pc}
	...

080031f0 <SDMMC_CmdStopTransfer>:
{
 80031f0:	b530      	push	{r4, r5, lr}
 80031f2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 80031f4:	2300      	movs	r3, #0
{
 80031f6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80031f8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80031fa:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031fc:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031fe:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003200:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003202:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003206:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003208:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800320a:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800320c:	f7ff ff4e 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003210:	4a03      	ldr	r2, [pc, #12]	; (8003220 <SDMMC_CmdStopTransfer+0x30>)
 8003212:	4621      	mov	r1, r4
 8003214:	4628      	mov	r0, r5
 8003216:	f7ff fe8b 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 800321a:	b007      	add	sp, #28
 800321c:	bd30      	pop	{r4, r5, pc}
 800321e:	bf00      	nop
 8003220:	05f5e100 	.word	0x05f5e100

08003224 <SDMMC_CmdSelDesel>:
{
 8003224:	b530      	push	{r4, r5, lr}
 8003226:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003228:	2340      	movs	r3, #64	; 0x40
 800322a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800322c:	2300      	movs	r3, #0
{
 800322e:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003230:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003232:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003234:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003236:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800323a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800323c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800323e:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003240:	f7ff ff34 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4621      	mov	r1, r4
 800324a:	4628      	mov	r0, r5
 800324c:	f7ff fe70 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 8003250:	b007      	add	sp, #28
 8003252:	bd30      	pop	{r4, r5, pc}

08003254 <SDMMC_CmdGoIdleState>:
{
 8003254:	b510      	push	{r4, lr}
 8003256:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800325c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800325e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003260:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003262:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003268:	9305      	str	r3, [sp, #20]
{
 800326a:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800326c:	f7ff ff1e 	bl	80030ac <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <SDMMC_CmdGoIdleState+0x4c>)
 8003272:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fbb3 f2f2 	udiv	r2, r3, r2
 800327c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003280:	4353      	muls	r3, r2
    if (count-- == 0U)
 8003282:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003286:	d307      	bcc.n	8003298 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003288:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800328a:	0612      	lsls	r2, r2, #24
 800328c:	d5f9      	bpl.n	8003282 <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800328e:	23c5      	movs	r3, #197	; 0xc5
 8003290:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8003292:	2000      	movs	r0, #0
}
 8003294:	b006      	add	sp, #24
 8003296:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8003298:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800329c:	e7fa      	b.n	8003294 <SDMMC_CmdGoIdleState+0x40>
 800329e:	bf00      	nop
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <SDMMC_CmdOperCond>:
{
 80032a4:	b510      	push	{r4, lr}
 80032a6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80032a8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80032ac:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80032ae:	2308      	movs	r3, #8
 80032b0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032b2:	2340      	movs	r3, #64	; 0x40
 80032b4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032b6:	2300      	movs	r3, #0
 80032b8:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032ba:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c0:	9305      	str	r3, [sp, #20]
{
 80032c2:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032c4:	f7ff fef2 	bl	80030ac <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <SDMMC_CmdOperCond+0x78>)
 80032ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80032d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80032d8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80032da:	f113 33ff 	adds.w	r3, r3, #4294967295
 80032de:	d31a      	bcc.n	8003316 <SDMMC_CmdOperCond+0x72>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80032e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80032e2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80032e6:	d0f8      	beq.n	80032da <SDMMC_CmdOperCond+0x36>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80032e8:	0512      	lsls	r2, r2, #20
 80032ea:	d4f6      	bmi.n	80032da <SDMMC_CmdOperCond+0x36>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80032ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032ee:	075b      	lsls	r3, r3, #29
 80032f0:	d503      	bpl.n	80032fa <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80032f2:	2004      	movs	r0, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80032f4:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80032f6:	b006      	add	sp, #24
 80032f8:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80032fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80032fc:	f012 0201 	ands.w	r2, r2, #1
 8003300:	d001      	beq.n	8003306 <SDMMC_CmdOperCond+0x62>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003302:	2001      	movs	r0, #1
 8003304:	e7f6      	b.n	80032f4 <SDMMC_CmdOperCond+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003306:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003308:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800330c:	d0f3      	beq.n	80032f6 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800330e:	2340      	movs	r3, #64	; 0x40
 8003310:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003312:	4610      	mov	r0, r2
 8003314:	e7ef      	b.n	80032f6 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8003316:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800331a:	e7ec      	b.n	80032f6 <SDMMC_CmdOperCond+0x52>
 800331c:	2000000c 	.word	0x2000000c

08003320 <SDMMC_CmdAppCommand>:
{
 8003320:	b530      	push	{r4, r5, lr}
 8003322:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003324:	2340      	movs	r3, #64	; 0x40
 8003326:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003328:	2300      	movs	r3, #0
{
 800332a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800332c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800332e:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003330:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003332:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003338:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800333a:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800333c:	f7ff feb6 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003340:	f241 3288 	movw	r2, #5000	; 0x1388
 8003344:	4621      	mov	r1, r4
 8003346:	4628      	mov	r0, r5
 8003348:	f7ff fdf2 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 800334c:	b007      	add	sp, #28
 800334e:	bd30      	pop	{r4, r5, pc}

08003350 <SDMMC_CmdAppOperCommand>:
{
 8003350:	b510      	push	{r4, lr}
 8003352:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003354:	2329      	movs	r3, #41	; 0x29
 8003356:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003358:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800335c:	2340      	movs	r3, #64	; 0x40
 800335e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003360:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003364:	2300      	movs	r3, #0
{
 8003366:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003368:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800336a:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800336c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800336e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003372:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003374:	f7ff fe9a 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003378:	4620      	mov	r0, r4
 800337a:	f7ff fdb7 	bl	8002eec <SDMMC_GetCmdResp3>
}
 800337e:	b006      	add	sp, #24
 8003380:	bd10      	pop	{r4, pc}

08003382 <SDMMC_CmdSendSCR>:
{
 8003382:	b530      	push	{r4, r5, lr}
 8003384:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003386:	2300      	movs	r3, #0
{
 8003388:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 800338a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800338c:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800338e:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003390:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003392:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003394:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003398:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800339a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800339c:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800339e:	f7ff fe85 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4621      	mov	r1, r4
 80033a8:	4628      	mov	r0, r5
 80033aa:	f7ff fdc1 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 80033ae:	b007      	add	sp, #28
 80033b0:	bd30      	pop	{r4, r5, pc}

080033b2 <SDMMC_CmdSendCID>:
{
 80033b2:	b510      	push	{r4, lr}
 80033b4:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 80033b6:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80033b8:	2202      	movs	r2, #2
{
 80033ba:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80033bc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80033be:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033c0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80033c2:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033c8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80033ca:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033cc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033ce:	f7ff fe6d 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7ff fd62 	bl	8002e9c <SDMMC_GetCmdResp2>
}
 80033d8:	b006      	add	sp, #24
 80033da:	bd10      	pop	{r4, pc}

080033dc <SDMMC_CmdSendCSD>:
{
 80033dc:	b510      	push	{r4, lr}
 80033de:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80033e0:	2309      	movs	r3, #9
 80033e2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80033e4:	23c0      	movs	r3, #192	; 0xc0
 80033e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033e8:	2300      	movs	r3, #0
{
 80033ea:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80033ec:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033ee:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033f0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033f8:	f7ff fe58 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7ff fd4d 	bl	8002e9c <SDMMC_GetCmdResp2>
}
 8003402:	b006      	add	sp, #24
 8003404:	bd10      	pop	{r4, pc}
	...

08003408 <SDMMC_CmdSetRelAdd>:
{
 8003408:	b530      	push	{r4, r5, lr}
 800340a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 800340c:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800340e:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8003410:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003412:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003414:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003416:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003418:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 800341c:	460d      	mov	r5, r1
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800341e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003420:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003422:	9305      	str	r3, [sp, #20]
{
 8003424:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003426:	f7ff fe41 	bl	80030ac <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800342a:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <SDMMC_CmdSetRelAdd+0x9c>)
 800342c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	fbb3 f2f2 	udiv	r2, r3, r2
 8003436:	f241 3388 	movw	r3, #5000	; 0x1388
 800343a:	4353      	muls	r3, r2
    if (count-- == 0U)
 800343c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003440:	d328      	bcc.n	8003494 <SDMMC_CmdSetRelAdd+0x8c>
    sta_reg = SDIOx->STA;
 8003442:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003444:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003448:	d0f8      	beq.n	800343c <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800344a:	0512      	lsls	r2, r2, #20
 800344c:	d4f6      	bmi.n	800343c <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800344e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003450:	0758      	lsls	r0, r3, #29
 8003452:	d503      	bpl.n	800345c <SDMMC_CmdSetRelAdd+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003454:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003456:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8003458:	b007      	add	sp, #28
 800345a:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800345c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800345e:	07d9      	lsls	r1, r3, #31
 8003460:	d501      	bpl.n	8003466 <SDMMC_CmdSetRelAdd+0x5e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003462:	2001      	movs	r0, #1
 8003464:	e7f7      	b.n	8003456 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDIOx->RESPCMD);
 8003466:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b03      	cmp	r3, #3
 800346c:	d115      	bne.n	800349a <SDMMC_CmdSetRelAdd+0x92>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800346e:	23c5      	movs	r3, #197	; 0xc5
 8003470:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8003472:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003474:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8003478:	d102      	bne.n	8003480 <SDMMC_CmdSetRelAdd+0x78>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800347a:	0c1b      	lsrs	r3, r3, #16
 800347c:	802b      	strh	r3, [r5, #0]
 800347e:	e7eb      	b.n	8003458 <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003480:	045a      	lsls	r2, r3, #17
 8003482:	d40c      	bmi.n	800349e <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003484:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003488:	bf0c      	ite	eq
 800348a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800348e:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8003492:	e7e1      	b.n	8003458 <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 8003494:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003498:	e7de      	b.n	8003458 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800349a:	2001      	movs	r0, #1
 800349c:	e7dc      	b.n	8003458 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800349e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80034a2:	e7d9      	b.n	8003458 <SDMMC_CmdSetRelAdd+0x50>
 80034a4:	2000000c 	.word	0x2000000c

080034a8 <SDMMC_CmdSendStatus>:
{
 80034a8:	b530      	push	{r4, r5, lr}
 80034aa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034ac:	2340      	movs	r3, #64	; 0x40
 80034ae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034b0:	2300      	movs	r3, #0
{
 80034b2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80034b4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80034b6:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034b8:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034ba:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c0:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80034c2:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034c4:	f7ff fdf2 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80034c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034cc:	4621      	mov	r1, r4
 80034ce:	4628      	mov	r0, r5
 80034d0:	f7ff fd2e 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 80034d4:	b007      	add	sp, #28
 80034d6:	bd30      	pop	{r4, r5, pc}

080034d8 <SDMMC_CmdSwitch>:
{
 80034d8:	b530      	push	{r4, r5, lr}
 80034da:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034dc:	2340      	movs	r3, #64	; 0x40
 80034de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034e0:	2300      	movs	r3, #0
{
 80034e2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN */
 80034e4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80034e6:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034e8:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034ea:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f0:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80034f2:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034f4:	f7ff fdda 	bl	80030ac <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4621      	mov	r1, r4
 80034fe:	4628      	mov	r0, r5
 8003500:	f7ff fd16 	bl	8002f30 <SDMMC_GetCmdResp1>
}
 8003504:	b007      	add	sp, #28
 8003506:	bd30      	pop	{r4, r5, pc}

08003508 <SDMMC_CmdBusWidth>:
 8003508:	f7ff bfe6 	b.w	80034d8 <SDMMC_CmdSwitch>

0800350c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <disk_status+0x10>)
 800350e:	181a      	adds	r2, r3, r0
 8003510:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003514:	7a10      	ldrb	r0, [r2, #8]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4718      	bx	r3
 800351c:	20000228 	.word	0x20000228

08003520 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <disk_initialize+0x1c>)
 8003522:	5c1a      	ldrb	r2, [r3, r0]
 8003524:	b942      	cbnz	r2, 8003538 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8003526:	2201      	movs	r2, #1
 8003528:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800352a:	181a      	adds	r2, r3, r0
 800352c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003530:	7a10      	ldrb	r0, [r2, #8]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4718      	bx	r3
  }
  return stat;
}
 8003538:	2000      	movs	r0, #0
 800353a:	4770      	bx	lr
 800353c:	20000228 	.word	0x20000228

08003540 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003540:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003542:	4c05      	ldr	r4, [pc, #20]	; (8003558 <disk_read+0x18>)
 8003544:	1825      	adds	r5, r4, r0
 8003546:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800354a:	6860      	ldr	r0, [r4, #4]
 800354c:	6884      	ldr	r4, [r0, #8]
 800354e:	7a28      	ldrb	r0, [r5, #8]
 8003550:	46a4      	mov	ip, r4
  return res;
}
 8003552:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003554:	4760      	bx	ip
 8003556:	bf00      	nop
 8003558:	20000228 	.word	0x20000228

0800355c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800355c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800355e:	4c05      	ldr	r4, [pc, #20]	; (8003574 <disk_write+0x18>)
 8003560:	1825      	adds	r5, r4, r0
 8003562:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003566:	6860      	ldr	r0, [r4, #4]
 8003568:	68c4      	ldr	r4, [r0, #12]
 800356a:	7a28      	ldrb	r0, [r5, #8]
 800356c:	46a4      	mov	ip, r4
  return res;
}
 800356e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003570:	4760      	bx	ip
 8003572:	bf00      	nop
 8003574:	20000228 	.word	0x20000228

08003578 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <disk_ioctl+0x18>)
{
 800357a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800357c:	181c      	adds	r4, r3, r0
 800357e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003582:	7a20      	ldrb	r0, [r4, #8]
 8003584:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8003586:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	4718      	bx	r3
 800358e:	bf00      	nop
 8003590:	20000228 	.word	0x20000228

08003594 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8003594:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8003596:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8003598:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 800359a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800359e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80035a2:	4770      	bx	lr

080035a4 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80035a4:	0a0b      	lsrs	r3, r1, #8
 80035a6:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035a8:	7043      	strb	r3, [r0, #1]
 80035aa:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80035ac:	0e09      	lsrs	r1, r1, #24
 80035ae:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80035b0:	70c1      	strb	r1, [r0, #3]
 80035b2:	4770      	bx	lr

080035b4 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80035b4:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80035b6:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80035ba:	4290      	cmp	r0, r2
 80035bc:	d1fb      	bne.n	80035b6 <mem_set+0x2>
}
 80035be:	4770      	bx	lr

080035c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80035c0:	4b15      	ldr	r3, [pc, #84]	; (8003618 <chk_lock+0x58>)
 80035c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80035c4:	2500      	movs	r5, #0
 80035c6:	462a      	mov	r2, r5
 80035c8:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 80035ca:	681e      	ldr	r6, [r3, #0]
 80035cc:	b1a6      	cbz	r6, 80035f8 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80035ce:	6807      	ldr	r7, [r0, #0]
 80035d0:	42be      	cmp	r6, r7
 80035d2:	d112      	bne.n	80035fa <chk_lock+0x3a>
 80035d4:	685f      	ldr	r7, [r3, #4]
 80035d6:	6886      	ldr	r6, [r0, #8]
 80035d8:	42b7      	cmp	r7, r6
 80035da:	d10e      	bne.n	80035fa <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80035dc:	689f      	ldr	r7, [r3, #8]
 80035de:	6946      	ldr	r6, [r0, #20]
 80035e0:	42b7      	cmp	r7, r6
 80035e2:	d10a      	bne.n	80035fa <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80035e4:	b9b1      	cbnz	r1, 8003614 <chk_lock+0x54>
 80035e6:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80035ea:	8993      	ldrh	r3, [r2, #12]
 80035ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f0:	bf14      	ite	ne
 80035f2:	2000      	movne	r0, #0
 80035f4:	2010      	moveq	r0, #16
 80035f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 80035f8:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80035fa:	3201      	adds	r2, #1
 80035fc:	2a02      	cmp	r2, #2
 80035fe:	f103 0310 	add.w	r3, r3, #16
 8003602:	d1e2      	bne.n	80035ca <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003604:	b10d      	cbz	r5, 800360a <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003606:	2000      	movs	r0, #0
 8003608:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800360a:	2902      	cmp	r1, #2
 800360c:	bf0c      	ite	eq
 800360e:	2000      	moveq	r0, #0
 8003610:	2012      	movne	r0, #18
 8003612:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003614:	2010      	movs	r0, #16
 8003616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003618:	20000204 	.word	0x20000204

0800361c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800361c:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <inc_lock+0x74>)
 800361e:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8003620:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003622:	2300      	movs	r3, #0
 8003624:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8003626:	6814      	ldr	r4, [r2, #0]
 8003628:	42ac      	cmp	r4, r5
 800362a:	d107      	bne.n	800363c <inc_lock+0x20>
 800362c:	6857      	ldr	r7, [r2, #4]
 800362e:	6884      	ldr	r4, [r0, #8]
 8003630:	42a7      	cmp	r7, r4
 8003632:	d103      	bne.n	800363c <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8003634:	6897      	ldr	r7, [r2, #8]
 8003636:	6944      	ldr	r4, [r0, #20]
 8003638:	42a7      	cmp	r7, r4
 800363a:	d01d      	beq.n	8003678 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800363c:	3301      	adds	r3, #1
 800363e:	2b02      	cmp	r3, #2
 8003640:	f102 0210 	add.w	r2, r2, #16
 8003644:	d1ef      	bne.n	8003626 <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003646:	6833      	ldr	r3, [r6, #0]
 8003648:	b113      	cbz	r3, 8003650 <inc_lock+0x34>
 800364a:	6933      	ldr	r3, [r6, #16]
 800364c:	b9eb      	cbnz	r3, 800368a <inc_lock+0x6e>
 800364e:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8003650:	011c      	lsls	r4, r3, #4
 8003652:	1932      	adds	r2, r6, r4
 8003654:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8003656:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8003658:	6940      	ldr	r0, [r0, #20]
 800365a:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800365c:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 800365e:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8003660:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003662:	b979      	cbnz	r1, 8003684 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003664:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8003668:	8992      	ldrh	r2, [r2, #12]
 800366a:	3201      	adds	r2, #1
 800366c:	b292      	uxth	r2, r2
 800366e:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8003672:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003674:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8003676:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003678:	2900      	cmp	r1, #0
 800367a:	d0f3      	beq.n	8003664 <inc_lock+0x48>
 800367c:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8003680:	8992      	ldrh	r2, [r2, #12]
 8003682:	b912      	cbnz	r2, 800368a <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003688:	e7f1      	b.n	800366e <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800368a:	2000      	movs	r0, #0
 800368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800368e:	bf00      	nop
 8003690:	20000204 	.word	0x20000204

08003694 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003694:	3801      	subs	r0, #1
 8003696:	2801      	cmp	r0, #1
 8003698:	d80e      	bhi.n	80036b8 <dec_lock+0x24>
		n = Files[i].ctr;
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <dec_lock+0x2c>)
 800369c:	0103      	lsls	r3, r0, #4
 800369e:	18d1      	adds	r1, r2, r3
 80036a0:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 80036a2:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80036a6:	b280      	uxth	r0, r0
 80036a8:	b108      	cbz	r0, 80036ae <dec_lock+0x1a>
 80036aa:	1e48      	subs	r0, r1, #1
 80036ac:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 80036ae:	18d1      	adds	r1, r2, r3
 80036b0:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80036b2:	b918      	cbnz	r0, 80036bc <dec_lock+0x28>
 80036b4:	50d0      	str	r0, [r2, r3]
 80036b6:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80036b8:	2002      	movs	r0, #2
 80036ba:	4770      	bx	lr
		res = FR_OK;
 80036bc:	2000      	movs	r0, #0
	}
	return res;
}
 80036be:	4770      	bx	lr
 80036c0:	20000204 	.word	0x20000204

080036c4 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80036c4:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 80036c6:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80036c8:	3b02      	subs	r3, #2
 80036ca:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80036cc:	bf3d      	ittte	cc
 80036ce:	8943      	ldrhcc	r3, [r0, #10]
 80036d0:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 80036d2:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80036d6:	2000      	movcs	r0, #0
}
 80036d8:	4770      	bx	lr

080036da <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80036da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80036dc:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80036de:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80036e0:	0a49      	lsrs	r1, r1, #9
 80036e2:	8952      	ldrh	r2, [r2, #10]
 80036e4:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80036e8:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80036ea:	b130      	cbz	r0, 80036fa <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 80036ec:	4281      	cmp	r1, r0
 80036ee:	d302      	bcc.n	80036f6 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 80036f0:	1a09      	subs	r1, r1, r0
 80036f2:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80036f4:	e7f8      	b.n	80036e8 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 80036f6:	6858      	ldr	r0, [r3, #4]
 80036f8:	4408      	add	r0, r1
}
 80036fa:	4770      	bx	lr

080036fc <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80036fc:	6802      	ldr	r2, [r0, #0]
{
 80036fe:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8003700:	b152      	cbz	r2, 8003718 <get_ldnumber+0x1c>
 8003702:	4611      	mov	r1, r2
 8003704:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800370a:	2c20      	cmp	r4, #32
 800370c:	d90c      	bls.n	8003728 <get_ldnumber+0x2c>
 800370e:	2c3a      	cmp	r4, #58	; 0x3a
 8003710:	d1f8      	bne.n	8003704 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8003712:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003714:	428b      	cmp	r3, r1
 8003716:	d002      	beq.n	800371e <get_ldnumber+0x22>
	int vol = -1;
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 800371c:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800371e:	7812      	ldrb	r2, [r2, #0]
 8003720:	2a30      	cmp	r2, #48	; 0x30
 8003722:	d1f9      	bne.n	8003718 <get_ldnumber+0x1c>
					*path = ++tt;
 8003724:	3301      	adds	r3, #1
 8003726:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8003728:	2000      	movs	r0, #0
 800372a:	bd10      	pop	{r4, pc}

0800372c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003730:	4604      	mov	r4, r0
 8003732:	b918      	cbnz	r0, 800373c <validate+0x10>
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
 8003734:	2009      	movs	r0, #9
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003736:	2300      	movs	r3, #0
 8003738:	602b      	str	r3, [r5, #0]
	return res;
}
 800373a:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800373c:	6803      	ldr	r3, [r0, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f8      	beq.n	8003734 <validate+0x8>
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	2a00      	cmp	r2, #0
 8003746:	d0f5      	beq.n	8003734 <validate+0x8>
 8003748:	8881      	ldrh	r1, [r0, #4]
 800374a:	88da      	ldrh	r2, [r3, #6]
 800374c:	4291      	cmp	r1, r2
 800374e:	d1f1      	bne.n	8003734 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003750:	7858      	ldrb	r0, [r3, #1]
 8003752:	f7ff fedb 	bl	800350c <disk_status>
 8003756:	f010 0001 	ands.w	r0, r0, #1
 800375a:	d1eb      	bne.n	8003734 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	e7eb      	b.n	8003738 <validate+0xc>

08003760 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003760:	3801      	subs	r0, #1
 8003762:	440a      	add	r2, r1
			*d++ = *s++;
 8003764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003768:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800376c:	4291      	cmp	r1, r2
 800376e:	d1f9      	bne.n	8003764 <mem_cpy.part.0+0x4>
}
 8003770:	4770      	bx	lr

08003772 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8003772:	7eca      	ldrb	r2, [r1, #27]
 8003774:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8003776:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8003778:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800377c:	bf01      	itttt	eq
 800377e:	7d48      	ldrbeq	r0, [r1, #21]
 8003780:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003782:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8003786:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800378a:	4618      	mov	r0, r3
 800378c:	4770      	bx	lr

0800378e <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800378e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003792:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8003794:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8003796:	7803      	ldrb	r3, [r0, #0]
 8003798:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800379a:	bf01      	itttt	eq
 800379c:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800379e:	750a      	strbeq	r2, [r1, #20]
 80037a0:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 80037a2:	754a      	strbeq	r2, [r1, #21]
 80037a4:	4770      	bx	lr

080037a6 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80037a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 80037a8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80037aa:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80037ae:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80037b0:	2301      	movs	r3, #1
 80037b2:	462a      	mov	r2, r5
 80037b4:	4639      	mov	r1, r7
 80037b6:	7840      	ldrb	r0, [r0, #1]
 80037b8:	f7ff fed0 	bl	800355c <disk_write>
 80037bc:	b9a0      	cbnz	r0, 80037e8 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80037be:	6a23      	ldr	r3, [r4, #32]
 80037c0:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 80037c2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80037c4:	1aeb      	subs	r3, r5, r3
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d301      	bcc.n	80037ce <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 80037ca:	2000      	movs	r0, #0
 80037cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80037ce:	78a6      	ldrb	r6, [r4, #2]
 80037d0:	2e01      	cmp	r6, #1
 80037d2:	d9fa      	bls.n	80037ca <sync_window.part.4+0x24>
					wsect += fs->fsize;
 80037d4:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 80037d6:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80037d8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80037da:	462a      	mov	r2, r5
 80037dc:	2301      	movs	r3, #1
 80037de:	4639      	mov	r1, r7
 80037e0:	f7ff febc 	bl	800355c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80037e4:	3e01      	subs	r6, #1
 80037e6:	e7f3      	b.n	80037d0 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 80037e8:	2001      	movs	r0, #1
}
 80037ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037ec <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80037ec:	78c3      	ldrb	r3, [r0, #3]
 80037ee:	b10b      	cbz	r3, 80037f4 <sync_window+0x8>
 80037f0:	f7ff bfd9 	b.w	80037a6 <sync_window.part.4>
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	4770      	bx	lr

080037f8 <sync_fs>:
{
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	4604      	mov	r4, r0
	res = sync_window(fs);
 80037fc:	f7ff fff6 	bl	80037ec <sync_window>
 8003800:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8003802:	2800      	cmp	r0, #0
 8003804:	d142      	bne.n	800388c <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003806:	7823      	ldrb	r3, [r4, #0]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d137      	bne.n	800387c <sync_fs+0x84>
 800380c:	7927      	ldrb	r7, [r4, #4]
 800380e:	2f01      	cmp	r7, #1
 8003810:	d134      	bne.n	800387c <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8003812:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003816:	4601      	mov	r1, r0
 8003818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800381c:	4630      	mov	r0, r6
 800381e:	f7ff fec9 	bl	80035b4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8003822:	2355      	movs	r3, #85	; 0x55
 8003824:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 8003828:	23aa      	movs	r3, #170	; 0xaa
 800382a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 800382e:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8003830:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8003832:	2172      	movs	r1, #114	; 0x72
 8003834:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8003838:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 800383c:	2361      	movs	r3, #97	; 0x61
 800383e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 8003842:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8003846:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
 800384a:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 800384e:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8003852:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003856:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800385a:	6921      	ldr	r1, [r4, #16]
 800385c:	f7ff fea2 	bl	80035a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003860:	68e1      	ldr	r1, [r4, #12]
 8003862:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003866:	f7ff fe9d 	bl	80035a4 <st_dword>
			fs->winsect = fs->volbase + 1;
 800386a:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800386c:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800386e:	3201      	adds	r2, #1
 8003870:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003872:	463b      	mov	r3, r7
 8003874:	4631      	mov	r1, r6
 8003876:	f7ff fe71 	bl	800355c <disk_write>
			fs->fsi_flag = 0;
 800387a:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800387c:	2200      	movs	r2, #0
 800387e:	4611      	mov	r1, r2
 8003880:	7860      	ldrb	r0, [r4, #1]
 8003882:	f7ff fe79 	bl	8003578 <disk_ioctl>
 8003886:	3000      	adds	r0, #0
 8003888:	bf18      	it	ne
 800388a:	2001      	movne	r0, #1
}
 800388c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800388e <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800388e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003890:	428b      	cmp	r3, r1
{
 8003892:	b570      	push	{r4, r5, r6, lr}
 8003894:	4606      	mov	r6, r0
 8003896:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003898:	d012      	beq.n	80038c0 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800389a:	f7ff ffa7 	bl	80037ec <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800389e:	4604      	mov	r4, r0
 80038a0:	b960      	cbnz	r0, 80038bc <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80038a2:	462a      	mov	r2, r5
 80038a4:	2301      	movs	r3, #1
 80038a6:	f106 0130 	add.w	r1, r6, #48	; 0x30
 80038aa:	7870      	ldrb	r0, [r6, #1]
 80038ac:	f7ff fe48 	bl	8003540 <disk_read>
 80038b0:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80038b2:	bf1c      	itt	ne
 80038b4:	f04f 35ff 	movne.w	r5, #4294967295
 80038b8:	2401      	movne	r4, #1
			fs->winsect = sector;
 80038ba:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 80038bc:	4620      	mov	r0, r4
 80038be:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80038c0:	2400      	movs	r4, #0
 80038c2:	e7fb      	b.n	80038bc <move_window+0x2e>

080038c4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80038c4:	2300      	movs	r3, #0
{
 80038c6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80038c8:	70c3      	strb	r3, [r0, #3]
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
 80038ce:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 80038d0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80038d2:	f7ff ffdc 	bl	800388e <move_window>
 80038d6:	bb30      	cbnz	r0, 8003926 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 80038d8:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80038dc:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80038e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80038e4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d11e      	bne.n	800392a <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80038ec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80038f0:	2be9      	cmp	r3, #233	; 0xe9
 80038f2:	d005      	beq.n	8003900 <check_fs+0x3c>
 80038f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <check_fs+0x74>)
 80038f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d116      	bne.n	800392e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003900:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8003904:	f7ff fe46 	bl	8003594 <ld_dword>
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <check_fs+0x78>)
 800390a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800390e:	4298      	cmp	r0, r3
 8003910:	d00f      	beq.n	8003932 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003912:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8003916:	f7ff fe3d 	bl	8003594 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <check_fs+0x7c>)
 800391c:	4298      	cmp	r0, r3
 800391e:	bf14      	ite	ne
 8003920:	2002      	movne	r0, #2
 8003922:	2000      	moveq	r0, #0
 8003924:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003926:	2004      	movs	r0, #4
 8003928:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800392a:	2003      	movs	r0, #3
 800392c:	bd10      	pop	{r4, pc}
	return 2;
 800392e:	2002      	movs	r0, #2
 8003930:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003932:	2000      	movs	r0, #0
}
 8003934:	bd10      	pop	{r4, pc}
 8003936:	bf00      	nop
 8003938:	009000eb 	.word	0x009000eb
 800393c:	00544146 	.word	0x00544146
 8003940:	33544146 	.word	0x33544146

08003944 <find_volume>:
{
 8003944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 8003948:	2300      	movs	r3, #0
{
 800394a:	b085      	sub	sp, #20
	*rfs = 0;
 800394c:	600b      	str	r3, [r1, #0]
{
 800394e:	460f      	mov	r7, r1
 8003950:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8003952:	f7ff fed3 	bl	80036fc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003956:	1e06      	subs	r6, r0, #0
 8003958:	f2c0 8140 	blt.w	8003bdc <find_volume+0x298>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800395c:	4ba3      	ldr	r3, [pc, #652]	; (8003bec <find_volume+0x2a8>)
 800395e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003962:	2c00      	cmp	r4, #0
 8003964:	f000 813c 	beq.w	8003be0 <find_volume+0x29c>
	*rfs = fs;							/* Return pointer to the file system object */
 8003968:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800396a:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800396c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003970:	b173      	cbz	r3, 8003990 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8003972:	7860      	ldrb	r0, [r4, #1]
 8003974:	f7ff fdca 	bl	800350c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003978:	07c1      	lsls	r1, r0, #31
 800397a:	d409      	bmi.n	8003990 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800397c:	2d00      	cmp	r5, #0
 800397e:	f000 8131 	beq.w	8003be4 <find_volume+0x2a0>
 8003982:	f010 0004 	ands.w	r0, r0, #4
 8003986:	d000      	beq.n	800398a <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8003988:	200a      	movs	r0, #10
}
 800398a:	b005      	add	sp, #20
 800398c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8003990:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003992:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8003994:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003996:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003998:	f7ff fdc2 	bl	8003520 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800399c:	07c2      	lsls	r2, r0, #31
 800399e:	f100 8123 	bmi.w	8003be8 <find_volume+0x2a4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80039a2:	b10d      	cbz	r5, 80039a8 <find_volume+0x64>
 80039a4:	0743      	lsls	r3, r0, #29
 80039a6:	d4ef      	bmi.n	8003988 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80039a8:	2100      	movs	r1, #0
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7ff ff8a 	bl	80038c4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80039b0:	2802      	cmp	r0, #2
 80039b2:	f040 80f7 	bne.w	8003ba4 <find_volume+0x260>
 80039b6:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 80039ba:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80039bc:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80039c0:	b110      	cbz	r0, 80039c8 <find_volume+0x84>
 80039c2:	4628      	mov	r0, r5
 80039c4:	f7ff fde6 	bl	8003594 <ld_dword>
 80039c8:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80039cc:	3101      	adds	r1, #1
 80039ce:	2904      	cmp	r1, #4
 80039d0:	f105 0510 	add.w	r5, r5, #16
 80039d4:	d1f2      	bne.n	80039bc <find_volume+0x78>
 80039d6:	2500      	movs	r5, #0
			bsect = br[i];
 80039d8:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80039dc:	2e00      	cmp	r6, #0
 80039de:	f000 80d8 	beq.w	8003b92 <find_volume+0x24e>
 80039e2:	4631      	mov	r1, r6
 80039e4:	4620      	mov	r0, r4
 80039e6:	f7ff ff6d 	bl	80038c4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80039ea:	2801      	cmp	r0, #1
 80039ec:	f200 80d2 	bhi.w	8003b94 <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 80039f0:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80039f4:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80039f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a00:	f040 80d4 	bne.w	8003bac <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8003a04:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8003a08:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003a0c:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 8003a10:	d104      	bne.n	8003a1c <find_volume+0xd8>
 8003a12:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8003a16:	f7ff fdbd 	bl	8003594 <ld_dword>
 8003a1a:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003a1c:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
		fs->fsize = fasize;
 8003a20:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003a22:	f109 33ff 	add.w	r3, r9, #4294967295
 8003a26:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003a28:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003a2c:	f200 80be 	bhi.w	8003bac <find_volume+0x268>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003a30:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 8003a34:	b2bb      	uxth	r3, r7
 8003a36:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80b7 	beq.w	8003bac <find_volume+0x268>
 8003a3e:	1e7b      	subs	r3, r7, #1
 8003a40:	423b      	tst	r3, r7
 8003a42:	f040 80b3 	bne.w	8003bac <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8003a46:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003a4a:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 8003a4e:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003a52:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003a56:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003a5a:	f040 80a7 	bne.w	8003bac <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8003a5e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8003a62:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003a66:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8003a6a:	d103      	bne.n	8003a74 <find_volume+0x130>
 8003a6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a70:	f7ff fd90 	bl	8003594 <ld_dword>
	rv = rv << 8 | ptr[0];
 8003a74:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8003a78:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003a7c:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8003a80:	f000 8094 	beq.w	8003bac <find_volume+0x268>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003a84:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003a88:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 8003a8c:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003a8e:	4570      	cmp	r0, lr
 8003a90:	f0c0 808c 	bcc.w	8003bac <find_volume+0x268>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003a94:	eba0 010e 	sub.w	r1, r0, lr
 8003a98:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003a9c:	2900      	cmp	r1, #0
 8003a9e:	f000 8085 	beq.w	8003bac <find_volume+0x268>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003aa2:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8003aa6:	4281      	cmp	r1, r0
 8003aa8:	f200 8084 	bhi.w	8003bb4 <find_volume+0x270>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003aac:	f640 77f5 	movw	r7, #4085	; 0xff5
 8003ab0:	42b9      	cmp	r1, r7
 8003ab2:	bf8c      	ite	hi
 8003ab4:	2702      	movhi	r7, #2
 8003ab6:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003ab8:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003aba:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8003abc:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 8003ac0:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003ac2:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003ac4:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003ac6:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8003ac8:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8003aca:	d175      	bne.n	8003bb8 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 8003acc:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 8003ad0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003ad4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8003ad8:	d168      	bne.n	8003bac <find_volume+0x268>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003ada:	f1b8 0f00 	cmp.w	r8, #0
 8003ade:	d165      	bne.n	8003bac <find_volume+0x268>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ae4:	f7ff fd56 	bl	8003594 <ld_dword>
 8003ae8:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003aea:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003aec:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8003af0:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8003af4:	d35a      	bcc.n	8003bac <find_volume+0x268>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295
 8003afa:	6123      	str	r3, [r4, #16]
 8003afc:	60e3      	str	r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003afe:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8003b00:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003b04:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003b06:	d12f      	bne.n	8003b68 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 8003b08:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8003b0c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8003b10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d127      	bne.n	8003b68 <find_volume+0x224>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003b18:	1c71      	adds	r1, r6, #1
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f7ff feb7 	bl	800388e <move_window>
 8003b20:	bb10      	cbnz	r0, 8003b68 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 8003b22:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8003b26:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 8003b2a:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8003b2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003b30:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d117      	bne.n	8003b68 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003b38:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003b3c:	f7ff fd2a 	bl	8003594 <ld_dword>
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <find_volume+0x2ac>)
 8003b42:	4298      	cmp	r0, r3
 8003b44:	d110      	bne.n	8003b68 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003b46:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8003b4a:	f7ff fd23 	bl	8003594 <ld_dword>
 8003b4e:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <find_volume+0x2b0>)
 8003b50:	4298      	cmp	r0, r3
 8003b52:	d109      	bne.n	8003b68 <find_volume+0x224>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003b54:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8003b58:	f7ff fd1c 	bl	8003594 <ld_dword>
 8003b5c:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003b5e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003b62:	f7ff fd17 	bl	8003594 <ld_dword>
 8003b66:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 8003b68:	4a23      	ldr	r2, [pc, #140]	; (8003bf8 <find_volume+0x2b4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8003b6a:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8003b6c:	8813      	ldrh	r3, [r2, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	8013      	strh	r3, [r2, #0]
 8003b74:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003b76:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <find_volume+0x2b8>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4294      	cmp	r4, r2
 8003b7c:	bf04      	itt	eq
 8003b7e:	2200      	moveq	r2, #0
 8003b80:	601a      	streq	r2, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	4294      	cmp	r4, r2
 8003b86:	f04f 0000 	mov.w	r0, #0
 8003b8a:	f47f aefe 	bne.w	800398a <find_volume+0x46>
 8003b8e:	6118      	str	r0, [r3, #16]
 8003b90:	e6fb      	b.n	800398a <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003b92:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003b94:	3501      	adds	r5, #1
 8003b96:	2d04      	cmp	r5, #4
 8003b98:	f47f af1e 	bne.w	80039d8 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003b9c:	2804      	cmp	r0, #4
 8003b9e:	d105      	bne.n	8003bac <find_volume+0x268>
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	e6f2      	b.n	800398a <find_volume+0x46>
 8003ba4:	2804      	cmp	r0, #4
 8003ba6:	d0fb      	beq.n	8003ba0 <find_volume+0x25c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003ba8:	2801      	cmp	r0, #1
 8003baa:	d901      	bls.n	8003bb0 <find_volume+0x26c>
 8003bac:	200d      	movs	r0, #13
 8003bae:	e6ec      	b.n	800398a <find_volume+0x46>
	bsect = 0;
 8003bb0:	2600      	movs	r6, #0
 8003bb2:	e71d      	b.n	80039f0 <find_volume+0xac>
		fmt = FS_FAT32;
 8003bb4:	2703      	movs	r7, #3
 8003bb6:	e77f      	b.n	8003ab8 <find_volume+0x174>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003bb8:	f1b8 0f00 	cmp.w	r8, #0
 8003bbc:	d0f6      	beq.n	8003bac <find_volume+0x268>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003bbe:	2f02      	cmp	r7, #2
 8003bc0:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8003bc4:	bf18      	it	ne
 8003bc6:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003bc8:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003bca:	bf18      	it	ne
 8003bcc:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003bd0:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003bd2:	bf0c      	ite	eq
 8003bd4:	4601      	moveq	r1, r0
 8003bd6:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 8003bda:	e787      	b.n	8003aec <find_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003bdc:	200b      	movs	r0, #11
 8003bde:	e6d4      	b.n	800398a <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003be0:	200c      	movs	r0, #12
 8003be2:	e6d2      	b.n	800398a <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8003be4:	4628      	mov	r0, r5
 8003be6:	e6d0      	b.n	800398a <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003be8:	2003      	movs	r0, #3
 8003bea:	e6ce      	b.n	800398a <find_volume+0x46>
 8003bec:	20000200 	.word	0x20000200
 8003bf0:	41615252 	.word	0x41615252
 8003bf4:	61417272 	.word	0x61417272
 8003bf8:	20000224 	.word	0x20000224
 8003bfc:	20000204 	.word	0x20000204

08003c00 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003c00:	2901      	cmp	r1, #1
{
 8003c02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c06:	4605      	mov	r5, r0
 8003c08:	460c      	mov	r4, r1
 8003c0a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003c0c:	d972      	bls.n	8003cf4 <put_fat+0xf4>
 8003c0e:	6943      	ldr	r3, [r0, #20]
 8003c10:	4299      	cmp	r1, r3
 8003c12:	d26f      	bcs.n	8003cf4 <put_fat+0xf4>
		switch (fs->fs_type) {
 8003c14:	7803      	ldrb	r3, [r0, #0]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d03f      	beq.n	8003c9a <put_fat+0x9a>
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d050      	beq.n	8003cc0 <put_fat+0xc0>
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d168      	bne.n	8003cf4 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 8003c22:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003c26:	6a01      	ldr	r1, [r0, #32]
 8003c28:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8003c2c:	f7ff fe2f 	bl	800388e <move_window>
 8003c30:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8003c32:	bb38      	cbnz	r0, 8003c84 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8003c34:	f105 0930 	add.w	r9, r5, #48	; 0x30
 8003c38:	f108 0a01 	add.w	sl, r8, #1
 8003c3c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003c40:	f014 0401 	ands.w	r4, r4, #1
 8003c44:	bf1f      	itttt	ne
 8003c46:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8003c4a:	f003 020f 	andne.w	r2, r3, #15
 8003c4e:	013b      	lslne	r3, r7, #4
 8003c50:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8003c54:	bf14      	ite	ne
 8003c56:	4313      	orrne	r3, r2
 8003c58:	b2fb      	uxtbeq	r3, r7
 8003c5a:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003c5e:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 8003c60:	2301      	movs	r3, #1
 8003c62:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003c64:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f7ff fe10 	bl	800388e <move_window>
			if (res != FR_OK) break;
 8003c6e:	4606      	mov	r6, r0
 8003c70:	b940      	cbnz	r0, 8003c84 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8003c72:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003c76:	b144      	cbz	r4, 8003c8a <put_fat+0x8a>
 8003c78:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8003c7c:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8003c80:	2301      	movs	r3, #1
 8003c82:	70eb      	strb	r3, [r5, #3]
}
 8003c84:	4630      	mov	r0, r6
 8003c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003c8a:	f819 300a 	ldrb.w	r3, [r9, sl]
 8003c8e:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8003c92:	f023 030f 	bic.w	r3, r3, #15
 8003c96:	431f      	orrs	r7, r3
 8003c98:	e7f0      	b.n	8003c7c <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003c9a:	6a01      	ldr	r1, [r0, #32]
 8003c9c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003ca0:	f7ff fdf5 	bl	800388e <move_window>
			if (res != FR_OK) break;
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d1ec      	bne.n	8003c84 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003caa:	0064      	lsls	r4, r4, #1
 8003cac:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003cb0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8003cb4:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8003cb6:	551f      	strb	r7, [r3, r4]
 8003cb8:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8003cbc:	7057      	strb	r7, [r2, #1]
 8003cbe:	e7df      	b.n	8003c80 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003cc0:	6a01      	ldr	r1, [r0, #32]
 8003cc2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003cc6:	f7ff fde2 	bl	800388e <move_window>
			if (res != FR_OK) break;
 8003cca:	4606      	mov	r6, r0
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d1d9      	bne.n	8003c84 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003cd0:	00a4      	lsls	r4, r4, #2
 8003cd2:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003cd6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003cda:	441c      	add	r4, r3
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f7ff fc59 	bl	8003594 <ld_dword>
 8003ce2:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8003ce6:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003cea:	4339      	orrs	r1, r7
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7ff fc59 	bl	80035a4 <st_dword>
 8003cf2:	e7c5      	b.n	8003c80 <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 8003cf4:	2602      	movs	r6, #2
 8003cf6:	e7c5      	b.n	8003c84 <put_fat+0x84>

08003cf8 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003cf8:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8003cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfc:	4605      	mov	r5, r0
 8003cfe:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003d00:	d952      	bls.n	8003da8 <get_fat.isra.8+0xb0>
 8003d02:	6943      	ldr	r3, [r0, #20]
 8003d04:	4299      	cmp	r1, r3
 8003d06:	d24f      	bcs.n	8003da8 <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 8003d08:	7803      	ldrb	r3, [r0, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d029      	beq.n	8003d62 <get_fat.isra.8+0x6a>
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d038      	beq.n	8003d84 <get_fat.isra.8+0x8c>
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d148      	bne.n	8003da8 <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8003d16:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d1a:	6a01      	ldr	r1, [r0, #32]
 8003d1c:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8003d20:	f7ff fdb5 	bl	800388e <move_window>
 8003d24:	b110      	cbz	r0, 8003d2c <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003d26:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8003d2c:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d2e:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 8003d30:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8003d34:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d36:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8003d3a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8003d3c:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d40:	f7ff fda5 	bl	800388e <move_window>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d1ee      	bne.n	8003d26 <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003d48:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8003d4c:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003d4e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8003d50:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8003d54:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003d58:	bf4c      	ite	mi
 8003d5a:	0900      	lsrmi	r0, r0, #4
 8003d5c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8003d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d62:	6a01      	ldr	r1, [r0, #32]
 8003d64:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003d68:	f7ff fd91 	bl	800388e <move_window>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d1da      	bne.n	8003d26 <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003d70:	0064      	lsls	r4, r4, #1
 8003d72:	3530      	adds	r5, #48	; 0x30
 8003d74:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8003d78:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8003d7a:	5d28      	ldrb	r0, [r5, r4]
 8003d7c:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003d7e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d84:	6a01      	ldr	r1, [r0, #32]
 8003d86:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003d8a:	f7ff fd80 	bl	800388e <move_window>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d1c9      	bne.n	8003d26 <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003d92:	00a4      	lsls	r4, r4, #2
 8003d94:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8003d98:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003d9c:	4420      	add	r0, r4
 8003d9e:	f7ff fbf9 	bl	8003594 <ld_dword>
 8003da2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8003da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8003da8:	2001      	movs	r0, #1
}
 8003daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dac <create_chain>:
{
 8003dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db0:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8003db2:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8003db4:	460f      	mov	r7, r1
 8003db6:	b971      	cbnz	r1, 8003dd6 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003db8:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003dba:	b1f6      	cbz	r6, 8003dfa <create_chain+0x4e>
 8003dbc:	696b      	ldr	r3, [r5, #20]
 8003dbe:	429e      	cmp	r6, r3
 8003dc0:	bf28      	it	cs
 8003dc2:	2601      	movcs	r6, #1
 8003dc4:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003dc6:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 8003dc8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003dca:	429c      	cmp	r4, r3
 8003dcc:	d318      	bcc.n	8003e00 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8003dce:	2e01      	cmp	r6, #1
 8003dd0:	d815      	bhi.n	8003dfe <create_chain+0x52>
 8003dd2:	2400      	movs	r4, #0
 8003dd4:	e009      	b.n	8003dea <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f7ff ff8e 	bl	8003cf8 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003ddc:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003dde:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003de0:	d937      	bls.n	8003e52 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	d104      	bne.n	8003df0 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003de6:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003dea:	4620      	mov	r0, r4
 8003dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003df0:	696b      	ldr	r3, [r5, #20]
 8003df2:	4298      	cmp	r0, r3
 8003df4:	d3f9      	bcc.n	8003dea <create_chain+0x3e>
 8003df6:	463e      	mov	r6, r7
 8003df8:	e7e4      	b.n	8003dc4 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003dfa:	2601      	movs	r6, #1
 8003dfc:	e7e2      	b.n	8003dc4 <create_chain+0x18>
				ncl = 2;
 8003dfe:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003e00:	4621      	mov	r1, r4
 8003e02:	f8d8 0000 	ldr.w	r0, [r8]
 8003e06:	f7ff ff77 	bl	8003cf8 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8003e0a:	b130      	cbz	r0, 8003e1a <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003e0c:	2801      	cmp	r0, #1
 8003e0e:	d020      	beq.n	8003e52 <create_chain+0xa6>
 8003e10:	3001      	adds	r0, #1
 8003e12:	d0e8      	beq.n	8003de6 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8003e14:	42b4      	cmp	r4, r6
 8003e16:	d1d6      	bne.n	8003dc6 <create_chain+0x1a>
 8003e18:	e7db      	b.n	8003dd2 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1e:	4621      	mov	r1, r4
 8003e20:	4628      	mov	r0, r5
 8003e22:	f7ff feed 	bl	8003c00 <put_fat>
		if (res == FR_OK && clst != 0) {
 8003e26:	b990      	cbnz	r0, 8003e4e <create_chain+0xa2>
 8003e28:	b957      	cbnz	r7, 8003e40 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003e2a:	696a      	ldr	r2, [r5, #20]
 8003e2c:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 8003e2e:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003e30:	3a02      	subs	r2, #2
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d90f      	bls.n	8003e56 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8003e36:	792b      	ldrb	r3, [r5, #4]
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	712b      	strb	r3, [r5, #4]
 8003e3e:	e7d4      	b.n	8003dea <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003e40:	4622      	mov	r2, r4
 8003e42:	4639      	mov	r1, r7
 8003e44:	4628      	mov	r0, r5
 8003e46:	f7ff fedb 	bl	8003c00 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d0ed      	beq.n	8003e2a <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003e4e:	2801      	cmp	r0, #1
 8003e50:	d0c9      	beq.n	8003de6 <create_chain+0x3a>
 8003e52:	2401      	movs	r4, #1
 8003e54:	e7c9      	b.n	8003dea <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003e56:	3b01      	subs	r3, #1
 8003e58:	612b      	str	r3, [r5, #16]
 8003e5a:	e7ec      	b.n	8003e36 <create_chain+0x8a>

08003e5c <remove_chain>:
{
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003e60:	2d01      	cmp	r5, #1
{
 8003e62:	4607      	mov	r7, r0
 8003e64:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003e66:	d801      	bhi.n	8003e6c <remove_chain+0x10>
 8003e68:	2002      	movs	r0, #2
 8003e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8003e6c:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003e6e:	6963      	ldr	r3, [r4, #20]
 8003e70:	429d      	cmp	r5, r3
 8003e72:	d2f9      	bcs.n	8003e68 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003e74:	b12a      	cbz	r2, 8003e82 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7ff fec0 	bl	8003c00 <put_fat>
		if (res != FR_OK) return res;
 8003e80:	bb08      	cbnz	r0, 8003ec6 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003e82:	4629      	mov	r1, r5
 8003e84:	6838      	ldr	r0, [r7, #0]
 8003e86:	f7ff ff37 	bl	8003cf8 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	b908      	cbnz	r0, 8003e92 <remove_chain+0x36>
	return FR_OK;
 8003e8e:	2000      	movs	r0, #0
 8003e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003e92:	2801      	cmp	r0, #1
 8003e94:	d0e8      	beq.n	8003e68 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d014      	beq.n	8003ec4 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f7ff feae 	bl	8003c00 <put_fat>
			if (res != FR_OK) return res;
 8003ea4:	b978      	cbnz	r0, 8003ec6 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003ea6:	6962      	ldr	r2, [r4, #20]
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	1e91      	subs	r1, r2, #2
 8003eac:	428b      	cmp	r3, r1
 8003eae:	d205      	bcs.n	8003ebc <remove_chain+0x60>
			fs->free_clst++;
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8003eb4:	7923      	ldrb	r3, [r4, #4]
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003ebc:	4296      	cmp	r6, r2
 8003ebe:	4635      	mov	r5, r6
 8003ec0:	d3df      	bcc.n	8003e82 <remove_chain+0x26>
 8003ec2:	e7e4      	b.n	8003e8e <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003ec4:	2001      	movs	r0, #1
}
 8003ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ec8 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003ec8:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003eca:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8003ecc:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003ece:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003ed0:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8003ed2:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003ed4:	b992      	cbnz	r2, 8003efc <dir_sdi.constprop.11+0x34>
 8003ed6:	7823      	ldrb	r3, [r4, #0]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8003edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003ede:	b973      	cbnz	r3, 8003efe <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003ee0:	8923      	ldrh	r3, [r4, #8]
 8003ee2:	b90b      	cbnz	r3, 8003ee8 <dir_sdi.constprop.11+0x20>
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8003ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eea:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8003eec:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8003eee:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f7      	beq.n	8003ee4 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003ef4:	3430      	adds	r4, #48	; 0x30
 8003ef6:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003ef8:	2000      	movs	r0, #0
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003efc:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003efe:	8961      	ldrh	r1, [r4, #10]
 8003f00:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8003f02:	b961      	cbnz	r1, 8003f1e <dir_sdi.constprop.11+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003f04:	4611      	mov	r1, r2
 8003f06:	6828      	ldr	r0, [r5, #0]
 8003f08:	f7ff fef6 	bl	8003cf8 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f0c:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003f0e:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f10:	d00b      	beq.n	8003f2a <dir_sdi.constprop.11+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003f12:	2801      	cmp	r0, #1
 8003f14:	d9e6      	bls.n	8003ee4 <dir_sdi.constprop.11+0x1c>
 8003f16:	6963      	ldr	r3, [r4, #20]
 8003f18:	4298      	cmp	r0, r3
 8003f1a:	d3f3      	bcc.n	8003f04 <dir_sdi.constprop.11+0x3c>
 8003f1c:	e7e2      	b.n	8003ee4 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4620      	mov	r0, r4
 8003f22:	f7ff fbcf 	bl	80036c4 <clust2sect>
 8003f26:	61e8      	str	r0, [r5, #28]
 8003f28:	e7e0      	b.n	8003eec <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f2a:	2001      	movs	r0, #1
}
 8003f2c:	bd38      	pop	{r3, r4, r5, pc}

08003f2e <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003f2e:	69c3      	ldr	r3, [r0, #28]
{
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	4605      	mov	r5, r0
 8003f36:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003f38:	b1ab      	cbz	r3, 8003f66 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003f3a:	6942      	ldr	r2, [r0, #20]
 8003f3c:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003f40:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8003f44:	d20f      	bcs.n	8003f66 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003f46:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8003f4a:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003f4c:	f1b9 0f00 	cmp.w	r9, #0
 8003f50:	d14f      	bne.n	8003ff2 <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 8003f52:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8003f54:	3301      	adds	r3, #1
 8003f56:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8003f58:	b941      	cbnz	r1, 8003f6c <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003f5a:	8923      	ldrh	r3, [r4, #8]
 8003f5c:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8003f60:	d847      	bhi.n	8003ff2 <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003f66:	2004      	movs	r0, #4
 8003f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003f6c:	8963      	ldrh	r3, [r4, #10]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8003f74:	d13d      	bne.n	8003ff2 <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003f76:	4620      	mov	r0, r4
 8003f78:	f7ff febe 	bl	8003cf8 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003f7c:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003f7e:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003f80:	d802      	bhi.n	8003f88 <dir_next+0x5a>
 8003f82:	2002      	movs	r0, #2
 8003f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003f88:	1c42      	adds	r2, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <dir_next+0x64>
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003f92:	6963      	ldr	r3, [r4, #20]
 8003f94:	4298      	cmp	r0, r3
 8003f96:	d326      	bcc.n	8003fe6 <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 8003f98:	2f00      	cmp	r7, #0
 8003f9a:	d0e2      	beq.n	8003f62 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003f9c:	69a9      	ldr	r1, [r5, #24]
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f7ff ff04 	bl	8003dac <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d037      	beq.n	800401a <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003faa:	2801      	cmp	r0, #1
 8003fac:	d0e9      	beq.n	8003f82 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	d0ec      	beq.n	8003f8c <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7ff fc1a 	bl	80037ec <sync_window>
 8003fb8:	4607      	mov	r7, r0
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d1e6      	bne.n	8003f8c <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003fc8:	f7ff faf4 	bl	80035b4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003fcc:	4631      	mov	r1, r6
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f7ff fb78 	bl	80036c4 <clust2sect>
						fs->wflag = 1;
 8003fd4:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003fd8:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003fda:	8963      	ldrh	r3, [r4, #10]
 8003fdc:	429f      	cmp	r7, r3
 8003fde:	d310      	bcc.n	8004002 <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8003fe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fe2:	1bdf      	subs	r7, r3, r7
 8003fe4:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8003fe6:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8003fe8:	4631      	mov	r1, r6
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff fb6a 	bl	80036c4 <clust2sect>
 8003ff0:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003ff2:	3430      	adds	r4, #48	; 0x30
 8003ff4:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8003ff6:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003ffa:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8004002:	f884 a003 	strb.w	sl, [r4, #3]
 8004006:	4620      	mov	r0, r4
 8004008:	f7ff fbcd 	bl	80037a6 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800400c:	2800      	cmp	r0, #0
 800400e:	d1bd      	bne.n	8003f8c <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004010:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004012:	3301      	adds	r3, #1
 8004014:	3701      	adds	r7, #1
 8004016:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004018:	e7df      	b.n	8003fda <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800401a:	2007      	movs	r0, #7
}
 800401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004020 <follow_path>:
{
 8004020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8004024:	6807      	ldr	r7, [r0, #0]
{
 8004026:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004028:	780b      	ldrb	r3, [r1, #0]
 800402a:	2b2f      	cmp	r3, #47	; 0x2f
 800402c:	460d      	mov	r5, r1
 800402e:	f101 0101 	add.w	r1, r1, #1
 8004032:	d0f9      	beq.n	8004028 <follow_path+0x8>
 8004034:	2b5c      	cmp	r3, #92	; 0x5c
 8004036:	d0f7      	beq.n	8004028 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8004038:	2300      	movs	r3, #0
 800403a:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800403c:	782b      	ldrb	r3, [r5, #0]
 800403e:	2b1f      	cmp	r3, #31
 8004040:	d959      	bls.n	80040f6 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004042:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80041a0 <follow_path+0x180>
	p = *path; sfn = dp->fn;
 8004046:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800404a:	220b      	movs	r2, #11
 800404c:	2120      	movs	r1, #32
 800404e:	4630      	mov	r0, r6
 8004050:	f7ff fab0 	bl	80035b4 <mem_set>
	si = i = 0; ni = 8;
 8004054:	2200      	movs	r2, #0
 8004056:	f105 3eff 	add.w	lr, r5, #4294967295
 800405a:	4611      	mov	r1, r2
 800405c:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 800405e:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004062:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8004064:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004068:	d90b      	bls.n	8004082 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800406a:	2b2f      	cmp	r3, #47	; 0x2f
 800406c:	d14b      	bne.n	8004106 <follow_path+0xe6>
 800406e:	1868      	adds	r0, r5, r1
 8004070:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004072:	f810 eb01 	ldrb.w	lr, [r0], #1
 8004076:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 800407a:	d0f9      	beq.n	8004070 <follow_path+0x50>
 800407c:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8004080:	d0f6      	beq.n	8004070 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8004082:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004084:	2a00      	cmp	r2, #0
 8004086:	d054      	beq.n	8004132 <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004088:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 800408c:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004090:	2ae5      	cmp	r2, #229	; 0xe5
 8004092:	bf04      	itt	eq
 8004094:	2205      	moveq	r2, #5
 8004096:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800409a:	2b21      	cmp	r3, #33	; 0x21
 800409c:	bf34      	ite	cc
 800409e:	2304      	movcc	r3, #4
 80040a0:	2300      	movcs	r3, #0
 80040a2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7ff ff0e 	bl	8003ec8 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d145      	bne.n	800413c <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 80040b0:	69e1      	ldr	r1, [r4, #28]
 80040b2:	4648      	mov	r0, r9
 80040b4:	f7ff fbeb 	bl	800388e <move_window>
		if (res != FR_OK) break;
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d13f      	bne.n	800413c <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 80040bc:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	2a00      	cmp	r2, #0
 80040c2:	d046      	beq.n	8004152 <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80040c4:	7ada      	ldrb	r2, [r3, #11]
 80040c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80040ca:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80040cc:	7ada      	ldrb	r2, [r3, #11]
 80040ce:	0711      	lsls	r1, r2, #28
 80040d0:	d40c      	bmi.n	80040ec <follow_path+0xcc>
 80040d2:	f103 0e0b 	add.w	lr, r3, #11
 80040d6:	4631      	mov	r1, r6
		r = *d++ - *s++;
 80040d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040dc:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 80040e0:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 80040e2:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 80040e6:	d027      	beq.n	8004138 <follow_path+0x118>
 80040e8:	2a00      	cmp	r2, #0
 80040ea:	d0f5      	beq.n	80040d8 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 80040ec:	2100      	movs	r1, #0
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7ff ff1d 	bl	8003f2e <dir_next>
 80040f4:	e7da      	b.n	80040ac <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80040fc:	4620      	mov	r0, r4
}
 80040fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8004102:	f7ff bee1 	b.w	8003ec8 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004106:	2b5c      	cmp	r3, #92	; 0x5c
 8004108:	d0b1      	beq.n	800406e <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800410a:	2b2e      	cmp	r3, #46	; 0x2e
 800410c:	d036      	beq.n	800417c <follow_path+0x15c>
 800410e:	4290      	cmp	r0, r2
 8004110:	d90f      	bls.n	8004132 <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8004112:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004116:	bf18      	it	ne
 8004118:	3b80      	subne	r3, #128	; 0x80
 800411a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80041a4 <follow_path+0x184>
 800411e:	bf18      	it	ne
 8004120:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8004124:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8004128:	f1bc 0f00 	cmp.w	ip, #0
 800412c:	d02b      	beq.n	8004186 <follow_path+0x166>
 800412e:	4563      	cmp	r3, ip
 8004130:	d1f8      	bne.n	8004124 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004132:	2006      	movs	r0, #6
	return res;
 8004134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004138:	2a00      	cmp	r2, #0
 800413a:	d1d7      	bne.n	80040ec <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 800413c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8004140:	b148      	cbz	r0, 8004156 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004142:	2804      	cmp	r0, #4
 8004144:	d129      	bne.n	800419a <follow_path+0x17a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004146:	f013 0f04 	tst.w	r3, #4
 800414a:	bf08      	it	eq
 800414c:	2005      	moveq	r0, #5
 800414e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004152:	2004      	movs	r0, #4
 8004154:	e7f2      	b.n	800413c <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004156:	075a      	lsls	r2, r3, #29
 8004158:	d41f      	bmi.n	800419a <follow_path+0x17a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800415a:	79a3      	ldrb	r3, [r4, #6]
 800415c:	06db      	lsls	r3, r3, #27
 800415e:	d50a      	bpl.n	8004176 <follow_path+0x156>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004160:	6963      	ldr	r3, [r4, #20]
 8004162:	7838      	ldrb	r0, [r7, #0]
 8004164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004168:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800416c:	4419      	add	r1, r3
 800416e:	f7ff fb00 	bl	8003772 <ld_clust.isra.1>
 8004172:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004174:	e767      	b.n	8004046 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004176:	2005      	movs	r0, #5
 8004178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800417c:	280b      	cmp	r0, #11
 800417e:	d0d8      	beq.n	8004132 <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8004180:	2208      	movs	r2, #8
 8004182:	200b      	movs	r0, #11
 8004184:	e76b      	b.n	800405e <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004186:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 800418a:	f1bc 0f19 	cmp.w	ip, #25
 800418e:	d801      	bhi.n	8004194 <follow_path+0x174>
 8004190:	3b20      	subs	r3, #32
 8004192:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8004194:	54b3      	strb	r3, [r6, r2]
 8004196:	3201      	adds	r2, #1
 8004198:	e761      	b.n	800405e <follow_path+0x3e>
}
 800419a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800419e:	bf00      	nop
 80041a0:	08008c18 	.word	0x08008c18
 80041a4:	08008c97 	.word	0x08008c97

080041a8 <dir_register>:
{
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80041ac:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80041ae:	f7ff fe8b 	bl	8003ec8 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 80041b2:	4604      	mov	r4, r0
 80041b4:	bb28      	cbnz	r0, 8004202 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 80041b6:	69e9      	ldr	r1, [r5, #28]
 80041b8:	4630      	mov	r0, r6
 80041ba:	f7ff fb68 	bl	800388e <move_window>
			if (res != FR_OK) break;
 80041be:	4604      	mov	r4, r0
 80041c0:	b9f8      	cbnz	r0, 8004202 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80041c2:	6a2b      	ldr	r3, [r5, #32]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2be5      	cmp	r3, #229	; 0xe5
 80041c8:	d114      	bne.n	80041f4 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 80041ca:	69e9      	ldr	r1, [r5, #28]
 80041cc:	4630      	mov	r0, r6
 80041ce:	f7ff fb5e 	bl	800388e <move_window>
		if (res == FR_OK) {
 80041d2:	4604      	mov	r4, r0
 80041d4:	b960      	cbnz	r0, 80041f0 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80041d6:	4601      	mov	r1, r0
 80041d8:	2220      	movs	r2, #32
 80041da:	6a28      	ldr	r0, [r5, #32]
 80041dc:	f7ff f9ea 	bl	80035b4 <mem_set>
 80041e0:	220b      	movs	r2, #11
 80041e2:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80041e6:	6a28      	ldr	r0, [r5, #32]
 80041e8:	f7ff faba 	bl	8003760 <mem_cpy.part.0>
			fs->wflag = 1;
 80041ec:	2301      	movs	r3, #1
 80041ee:	70f3      	strb	r3, [r6, #3]
}
 80041f0:	4620      	mov	r0, r4
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0e8      	beq.n	80041ca <dir_register+0x22>
			res = dir_next(dp, 1);
 80041f8:	2101      	movs	r1, #1
 80041fa:	4628      	mov	r0, r5
 80041fc:	f7ff fe97 	bl	8003f2e <dir_next>
 8004200:	e7d7      	b.n	80041b2 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004202:	2c04      	cmp	r4, #4
 8004204:	bf08      	it	eq
 8004206:	2407      	moveq	r4, #7
 8004208:	e7f2      	b.n	80041f0 <dir_register+0x48>
	...

0800420c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800420c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800420e:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004210:	a804      	add	r0, sp, #16
{
 8004212:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8004214:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8004218:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800421a:	f7ff fa6f 	bl	80036fc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800421e:	1e05      	subs	r5, r0, #0
 8004220:	db1f      	blt.n	8004262 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004222:	4912      	ldr	r1, [pc, #72]	; (800426c <f_mount+0x60>)
 8004224:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8004228:	b15c      	cbz	r4, 8004242 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <f_mount+0x64>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4294      	cmp	r4, r2
 8004230:	bf04      	itt	eq
 8004232:	2200      	moveq	r2, #0
 8004234:	601a      	streq	r2, [r3, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	2000      	movs	r0, #0
 800423a:	4294      	cmp	r4, r2
 800423c:	bf08      	it	eq
 800423e:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004240:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8004242:	9801      	ldr	r0, [sp, #4]
 8004244:	b108      	cbz	r0, 800424a <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8004246:	2300      	movs	r3, #0
 8004248:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800424a:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800424e:	b130      	cbz	r0, 800425e <f_mount+0x52>
 8004250:	2e01      	cmp	r6, #1
 8004252:	d108      	bne.n	8004266 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004254:	2200      	movs	r2, #0
 8004256:	a901      	add	r1, sp, #4
 8004258:	4668      	mov	r0, sp
 800425a:	f7ff fb73 	bl	8003944 <find_volume>
	LEAVE_FF(fs, res);
}
 800425e:	b004      	add	sp, #16
 8004260:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8004262:	200b      	movs	r0, #11
 8004264:	e7fb      	b.n	800425e <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004266:	2000      	movs	r0, #0
 8004268:	e7f9      	b.n	800425e <f_mount+0x52>
 800426a:	bf00      	nop
 800426c:	20000200 	.word	0x20000200
 8004270:	20000204 	.word	0x20000204

08004274 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004278:	b090      	sub	sp, #64	; 0x40
 800427a:	4690      	mov	r8, r2
 800427c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800427e:	4604      	mov	r4, r0
 8004280:	2800      	cmp	r0, #0
 8004282:	f000 80ce 	beq.w	8004422 <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004286:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800428a:	462a      	mov	r2, r5
 800428c:	a903      	add	r1, sp, #12
 800428e:	a801      	add	r0, sp, #4
 8004290:	f7ff fb58 	bl	8003944 <find_volume>
	if (res == FR_OK) {
 8004294:	4607      	mov	r7, r0
 8004296:	bb38      	cbnz	r0, 80042e8 <f_open+0x74>
		dj.obj.fs = fs;
 8004298:	ae10      	add	r6, sp, #64	; 0x40
 800429a:	9b03      	ldr	r3, [sp, #12]
 800429c:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80042a0:	9901      	ldr	r1, [sp, #4]
 80042a2:	4630      	mov	r0, r6
 80042a4:	f7ff febc 	bl	8004020 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80042a8:	b958      	cbnz	r0, 80042c2 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80042aa:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	db1e      	blt.n	80042f0 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80042b2:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 80042b6:	bf14      	ite	ne
 80042b8:	2101      	movne	r1, #1
 80042ba:	2100      	moveq	r1, #0
 80042bc:	4630      	mov	r0, r6
 80042be:	f7ff f97f 	bl	80035c0 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80042c2:	f018 0f1c 	tst.w	r8, #28
 80042c6:	d073      	beq.n	80043b0 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 80042c8:	b1a0      	cbz	r0, 80042f4 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80042ca:	2804      	cmp	r0, #4
 80042cc:	d109      	bne.n	80042e2 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042ce:	4b71      	ldr	r3, [pc, #452]	; (8004494 <f_open+0x220>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	2a00      	cmp	r2, #0
 80042d4:	f000 80da 	beq.w	800448c <f_open+0x218>
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80d6 	beq.w	800448c <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80042e0:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80042e2:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80042e6:	b170      	cbz	r0, 8004306 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80042e8:	2300      	movs	r3, #0
 80042ea:	6023      	str	r3, [r4, #0]
 80042ec:	4607      	mov	r7, r0
 80042ee:	e092      	b.n	8004416 <f_open+0x1a2>
				res = FR_INVALID_NAME;
 80042f0:	2006      	movs	r0, #6
 80042f2:	e7e6      	b.n	80042c2 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80042f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80042f8:	f013 0f11 	tst.w	r3, #17
 80042fc:	d163      	bne.n	80043c6 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80042fe:	f018 0f04 	tst.w	r8, #4
 8004302:	f040 80bd 	bne.w	8004480 <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004306:	0728      	lsls	r0, r5, #28
 8004308:	d53c      	bpl.n	8004384 <f_open+0x110>
				dw = GET_FATTIME();
 800430a:	f001 f97b 	bl	8005604 <get_fattime>
 800430e:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004310:	4601      	mov	r1, r0
 8004312:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004314:	300e      	adds	r0, #14
 8004316:	f7ff f945 	bl	80035a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800431a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800431c:	4611      	mov	r1, r2
 800431e:	3016      	adds	r0, #22
 8004320:	f7ff f940 	bl	80035a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004326:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800432a:	2220      	movs	r2, #32
 800432c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800432e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004332:	f899 0000 	ldrb.w	r0, [r9]
 8004336:	4651      	mov	r1, sl
 8004338:	f7ff fa1b 	bl	8003772 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800433c:	2200      	movs	r2, #0
 800433e:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004340:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004342:	4648      	mov	r0, r9
 8004344:	f7ff fa23 	bl	800378e <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800434a:	2200      	movs	r2, #0
 800434c:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800434e:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8004350:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8004352:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8004354:	9b03      	ldr	r3, [sp, #12]
 8004356:	2101      	movs	r1, #1
 8004358:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800435a:	f1b8 0f00 	cmp.w	r8, #0
 800435e:	d011      	beq.n	8004384 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8004360:	4641      	mov	r1, r8
 8004362:	4630      	mov	r0, r6
						dw = fs->winsect;
 8004364:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8004368:	f7ff fd78 	bl	8003e5c <remove_chain>
						if (res == FR_OK) {
 800436c:	2800      	cmp	r0, #0
 800436e:	d1bb      	bne.n	80042e8 <f_open+0x74>
							res = move_window(fs, dw);
 8004370:	4649      	mov	r1, r9
 8004372:	9803      	ldr	r0, [sp, #12]
 8004374:	f7ff fa8b 	bl	800388e <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004378:	9a03      	ldr	r2, [sp, #12]
 800437a:	f108 33ff 	add.w	r3, r8, #4294967295
 800437e:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 8004380:	2800      	cmp	r0, #0
 8004382:	d1b1      	bne.n	80042e8 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004384:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004386:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 800438c:	bf48      	it	mi
 800438e:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004392:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8004396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004398:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800439a:	bf14      	ite	ne
 800439c:	2101      	movne	r1, #1
 800439e:	2100      	moveq	r1, #0
 80043a0:	4630      	mov	r0, r6
 80043a2:	f7ff f93b 	bl	800361c <inc_lock>
 80043a6:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d13c      	bne.n	8004426 <f_open+0x1b2>
 80043ac:	2002      	movs	r0, #2
 80043ae:	e79b      	b.n	80042e8 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d199      	bne.n	80042e8 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80043b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80043b8:	06da      	lsls	r2, r3, #27
 80043ba:	d463      	bmi.n	8004484 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80043bc:	f018 0f02 	tst.w	r8, #2
 80043c0:	d0e0      	beq.n	8004384 <f_open+0x110>
 80043c2:	07db      	lsls	r3, r3, #31
 80043c4:	d5de      	bpl.n	8004384 <f_open+0x110>
					res = FR_DENIED;
 80043c6:	2007      	movs	r0, #7
 80043c8:	e78e      	b.n	80042e8 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 80043ca:	6820      	ldr	r0, [r4, #0]
 80043cc:	f7ff fc94 	bl	8003cf8 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 80043d0:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80043d2:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80043d4:	d923      	bls.n	800441e <f_open+0x1aa>
 80043d6:	1c42      	adds	r2, r0, #1
 80043d8:	4250      	negs	r0, r2
 80043da:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80043dc:	eba5 0508 	sub.w	r5, r5, r8
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d049      	beq.n	8004478 <f_open+0x204>
				fp->clust = clst;
 80043e4:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80043e6:	2800      	cmp	r0, #0
 80043e8:	f47f af7e 	bne.w	80042e8 <f_open+0x74>
 80043ec:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80043f0:	b18b      	cbz	r3, 8004416 <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80043f2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80043f6:	4640      	mov	r0, r8
 80043f8:	f7ff f964 	bl	80036c4 <clust2sect>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d0d5      	beq.n	80043ac <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004400:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8004404:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004406:	2301      	movs	r3, #1
 8004408:	4631      	mov	r1, r6
 800440a:	f898 0001 	ldrb.w	r0, [r8, #1]
 800440e:	f7ff f897 	bl	8003540 <disk_read>
 8004412:	2800      	cmp	r0, #0
 8004414:	d138      	bne.n	8004488 <f_open+0x214>

	LEAVE_FF(fs, res);
}
 8004416:	4638      	mov	r0, r7
 8004418:	b010      	add	sp, #64	; 0x40
 800441a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 800441e:	2002      	movs	r0, #2
 8004420:	e7dc      	b.n	80043dc <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8004422:	2709      	movs	r7, #9
 8004424:	e7f7      	b.n	8004416 <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004426:	9e03      	ldr	r6, [sp, #12]
 8004428:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800442c:	7830      	ldrb	r0, [r6, #0]
 800442e:	4641      	mov	r1, r8
 8004430:	f7ff f99f 	bl	8003772 <ld_clust.isra.1>
 8004434:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004436:	f108 001c 	add.w	r0, r8, #28
 800443a:	f7ff f8ab 	bl	8003594 <ld_dword>
			fp->obj.id = fs->id;
 800443e:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004440:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004442:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004444:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004448:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 800444a:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800444c:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 800444e:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8004450:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004452:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004454:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800445a:	4630      	mov	r0, r6
 800445c:	f7ff f8aa 	bl	80035b4 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004460:	06ab      	lsls	r3, r5, #26
 8004462:	d5d8      	bpl.n	8004416 <f_open+0x1a2>
 8004464:	68e5      	ldr	r5, [r4, #12]
 8004466:	2d00      	cmp	r5, #0
 8004468:	d0d5      	beq.n	8004416 <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800446a:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800446c:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800446e:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004472:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004474:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004478:	45a8      	cmp	r8, r5
 800447a:	d3a6      	bcc.n	80043ca <f_open+0x156>
 800447c:	2000      	movs	r0, #0
 800447e:	e7b1      	b.n	80043e4 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004480:	2008      	movs	r0, #8
 8004482:	e731      	b.n	80042e8 <f_open+0x74>
					res = FR_NO_FILE;
 8004484:	2004      	movs	r0, #4
 8004486:	e72f      	b.n	80042e8 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004488:	2001      	movs	r0, #1
 800448a:	e72d      	b.n	80042e8 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800448c:	4630      	mov	r0, r6
 800448e:	f7ff fe8b 	bl	80041a8 <dir_register>
 8004492:	e726      	b.n	80042e2 <f_open+0x6e>
 8004494:	20000204 	.word	0x20000204

08004498 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449c:	469b      	mov	fp, r3
 800449e:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80044a0:	2300      	movs	r3, #0
{
 80044a2:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 80044a4:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80044a8:	a903      	add	r1, sp, #12
{
 80044aa:	4604      	mov	r4, r0
 80044ac:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80044ae:	f7ff f93d 	bl	800372c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80044b2:	4606      	mov	r6, r0
 80044b4:	bb58      	cbnz	r0, 800450e <f_write+0x76>
 80044b6:	7d66      	ldrb	r6, [r4, #21]
 80044b8:	bb4e      	cbnz	r6, 800450e <f_write+0x76>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80044ba:	7d23      	ldrb	r3, [r4, #20]
 80044bc:	079a      	lsls	r2, r3, #30
 80044be:	f140 80ae 	bpl.w	800461e <f_write+0x186>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80044c2:	69a3      	ldr	r3, [r4, #24]
 80044c4:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80044c6:	bf28      	it	cs
 80044c8:	43df      	mvncs	r7, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80044ca:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 80044ce:	b1d7      	cbz	r7, 8004506 <f_write+0x6e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80044d0:	69a1      	ldr	r1, [r4, #24]
 80044d2:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f040 808f 	bne.w	80045fa <f_write+0x162>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80044dc:	9b03      	ldr	r3, [sp, #12]
 80044de:	895b      	ldrh	r3, [r3, #10]
 80044e0:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 80044e2:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 80044e6:	9301      	str	r3, [sp, #4]
 80044e8:	d124      	bne.n	8004534 <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80044ea:	b931      	cbnz	r1, 80044fa <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80044ec:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80044ee:	b9a0      	cbnz	r0, 800451a <f_write+0x82>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80044f0:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80044f2:	4620      	mov	r0, r4
 80044f4:	f7ff fc5a 	bl	8003dac <create_chain>
 80044f8:	e004      	b.n	8004504 <f_write+0x6c>
					if (fp->cltbl) {
 80044fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044fc:	b15b      	cbz	r3, 8004516 <f_write+0x7e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80044fe:	4620      	mov	r0, r4
 8004500:	f7ff f8eb 	bl	80036da <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004504:	b948      	cbnz	r0, 800451a <f_write+0x82>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004506:	7d23      	ldrb	r3, [r4, #20]
 8004508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450c:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 800450e:	4630      	mov	r0, r6
 8004510:	b005      	add	sp, #20
 8004512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004516:	69e1      	ldr	r1, [r4, #28]
 8004518:	e7eb      	b.n	80044f2 <f_write+0x5a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800451a:	2801      	cmp	r0, #1
 800451c:	d102      	bne.n	8004524 <f_write+0x8c>
 800451e:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004520:	7566      	strb	r6, [r4, #21]
 8004522:	e7f4      	b.n	800450e <f_write+0x76>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d101      	bne.n	800452c <f_write+0x94>
 8004528:	2601      	movs	r6, #1
 800452a:	e7f9      	b.n	8004520 <f_write+0x88>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800452c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800452e:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004530:	b903      	cbnz	r3, 8004534 <f_write+0x9c>
 8004532:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004534:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	da0c      	bge.n	8004556 <f_write+0xbe>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800453c:	9803      	ldr	r0, [sp, #12]
 800453e:	6a22      	ldr	r2, [r4, #32]
 8004540:	7840      	ldrb	r0, [r0, #1]
 8004542:	2301      	movs	r3, #1
 8004544:	4651      	mov	r1, sl
 8004546:	f7ff f809 	bl	800355c <disk_write>
 800454a:	2800      	cmp	r0, #0
 800454c:	d1ec      	bne.n	8004528 <f_write+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 800454e:	7d23      	ldrb	r3, [r4, #20]
 8004550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004554:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	69e1      	ldr	r1, [r4, #28]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff f8b1 	bl	80036c4 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004562:	2800      	cmp	r0, #0
 8004564:	d0db      	beq.n	800451e <f_write+0x86>
			sect += csect;
 8004566:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004568:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800456a:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800456e:	d032      	beq.n	80045d6 <f_write+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004570:	9b00      	ldr	r3, [sp, #0]
 8004572:	9a01      	ldr	r2, [sp, #4]
 8004574:	895b      	ldrh	r3, [r3, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004576:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004578:	442a      	add	r2, r5
 800457a:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800457c:	bf88      	it	hi
 800457e:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004580:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 8004582:	bf88      	it	hi
 8004584:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004586:	462b      	mov	r3, r5
 8004588:	4642      	mov	r2, r8
 800458a:	4649      	mov	r1, r9
 800458c:	f7fe ffe6 	bl	800355c <disk_write>
 8004590:	2800      	cmp	r0, #0
 8004592:	d1c9      	bne.n	8004528 <f_write+0x90>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004594:	6a21      	ldr	r1, [r4, #32]
 8004596:	eba1 0108 	sub.w	r1, r1, r8
 800459a:	428d      	cmp	r5, r1
 800459c:	d90a      	bls.n	80045b4 <f_write+0x11c>
 800459e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a2:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80045a6:	4650      	mov	r0, sl
 80045a8:	f7ff f8da 	bl	8003760 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80045ac:	7d23      	ldrb	r3, [r4, #20]
 80045ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b2:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80045b4:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80045b6:	69a3      	ldr	r3, [r4, #24]
 80045b8:	68e2      	ldr	r2, [r4, #12]
 80045ba:	442b      	add	r3, r5
 80045bc:	61a3      	str	r3, [r4, #24]
 80045be:	429a      	cmp	r2, r3
 80045c0:	bf2c      	ite	cs
 80045c2:	60e2      	strcs	r2, [r4, #12]
 80045c4:	60e3      	strcc	r3, [r4, #12]
 80045c6:	f8db 3000 	ldr.w	r3, [fp]
 80045ca:	442b      	add	r3, r5
 80045cc:	44a9      	add	r9, r5
 80045ce:	f8cb 3000 	str.w	r3, [fp]
 80045d2:	1b7f      	subs	r7, r7, r5
 80045d4:	e77b      	b.n	80044ce <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80045d6:	6a23      	ldr	r3, [r4, #32]
 80045d8:	4598      	cmp	r8, r3
 80045da:	d00c      	beq.n	80045f6 <f_write+0x15e>
 80045dc:	69a2      	ldr	r2, [r4, #24]
 80045de:	68e3      	ldr	r3, [r4, #12]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d208      	bcs.n	80045f6 <f_write+0x15e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80045e4:	9800      	ldr	r0, [sp, #0]
 80045e6:	2301      	movs	r3, #1
 80045e8:	4642      	mov	r2, r8
 80045ea:	4651      	mov	r1, sl
 80045ec:	7840      	ldrb	r0, [r0, #1]
 80045ee:	f7fe ffa7 	bl	8003540 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d198      	bne.n	8004528 <f_write+0x90>
			fp->sect = sect;
 80045f6:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80045fa:	69a0      	ldr	r0, [r4, #24]
 80045fc:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8004600:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8004604:	42bd      	cmp	r5, r7
 8004606:	bf28      	it	cs
 8004608:	463d      	movcs	r5, r7
 800460a:	462a      	mov	r2, r5
 800460c:	4649      	mov	r1, r9
 800460e:	4450      	add	r0, sl
 8004610:	f7ff f8a6 	bl	8003760 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8004614:	7d23      	ldrb	r3, [r4, #20]
 8004616:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800461a:	7523      	strb	r3, [r4, #20]
 800461c:	e7cb      	b.n	80045b6 <f_write+0x11e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800461e:	2607      	movs	r6, #7
 8004620:	e775      	b.n	800450e <f_write+0x76>

08004622 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004622:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004624:	a901      	add	r1, sp, #4
{
 8004626:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004628:	f7ff f880 	bl	800372c <validate>
	if (res == FR_OK) {
 800462c:	4605      	mov	r5, r0
 800462e:	2800      	cmp	r0, #0
 8004630:	d13a      	bne.n	80046a8 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004632:	7d23      	ldrb	r3, [r4, #20]
 8004634:	065a      	lsls	r2, r3, #25
 8004636:	d537      	bpl.n	80046a8 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	d50c      	bpl.n	8004656 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800463c:	9801      	ldr	r0, [sp, #4]
 800463e:	6a22      	ldr	r2, [r4, #32]
 8004640:	7840      	ldrb	r0, [r0, #1]
 8004642:	2301      	movs	r3, #1
 8004644:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004648:	f7fe ff88 	bl	800355c <disk_write>
 800464c:	bb78      	cbnz	r0, 80046ae <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800464e:	7d23      	ldrb	r3, [r4, #20]
 8004650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004654:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004656:	f000 ffd5 	bl	8005604 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800465a:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800465c:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800465e:	9801      	ldr	r0, [sp, #4]
 8004660:	f7ff f915 	bl	800388e <move_window>
				if (res == FR_OK) {
 8004664:	4605      	mov	r5, r0
 8004666:	b9f8      	cbnz	r0, 80046a8 <f_sync+0x86>
					dir = fp->dir_ptr;
 8004668:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800466a:	7af3      	ldrb	r3, [r6, #11]
 800466c:	f043 0320 	orr.w	r3, r3, #32
 8004670:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004672:	68a2      	ldr	r2, [r4, #8]
 8004674:	6820      	ldr	r0, [r4, #0]
 8004676:	4631      	mov	r1, r6
 8004678:	f7ff f889 	bl	800378e <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800467c:	68e1      	ldr	r1, [r4, #12]
 800467e:	f106 001c 	add.w	r0, r6, #28
 8004682:	f7fe ff8f 	bl	80035a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004686:	4639      	mov	r1, r7
 8004688:	f106 0016 	add.w	r0, r6, #22
 800468c:	f7fe ff8a 	bl	80035a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8004690:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004692:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8004694:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8004696:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8004698:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800469a:	f7ff f8ad 	bl	80037f8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800469e:	7d23      	ldrb	r3, [r4, #20]
 80046a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80046a4:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80046a6:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80046a8:	4628      	mov	r0, r5
 80046aa:	b003      	add	sp, #12
 80046ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80046ae:	2501      	movs	r5, #1
 80046b0:	e7fa      	b.n	80046a8 <f_sync+0x86>

080046b2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80046b2:	b513      	push	{r0, r1, r4, lr}
 80046b4:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80046b6:	f7ff ffb4 	bl	8004622 <f_sync>
	if (res == FR_OK)
 80046ba:	b948      	cbnz	r0, 80046d0 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80046bc:	a901      	add	r1, sp, #4
 80046be:	4620      	mov	r0, r4
 80046c0:	f7ff f834 	bl	800372c <validate>
		if (res == FR_OK) {
 80046c4:	b920      	cbnz	r0, 80046d0 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80046c6:	6920      	ldr	r0, [r4, #16]
 80046c8:	f7fe ffe4 	bl	8003694 <dec_lock>
			if (res == FR_OK)
 80046cc:	b900      	cbnz	r0, 80046d0 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80046ce:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80046d0:	b002      	add	sp, #8
 80046d2:	bd10      	pop	{r4, pc}

080046d4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80046d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80046da:	a901      	add	r1, sp, #4
{
 80046dc:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80046de:	f7ff f825 	bl	800372c <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80046e2:	4606      	mov	r6, r0
 80046e4:	b9e0      	cbnz	r0, 8004720 <f_lseek+0x4c>
 80046e6:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80046e8:	b9d6      	cbnz	r6, 8004720 <f_lseek+0x4c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80046ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d078      	beq.n	80047e2 <f_lseek+0x10e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80046f0:	1c6a      	adds	r2, r5, #1
 80046f2:	d139      	bne.n	8004768 <f_lseek+0x94>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->obj.sclust;		/* Origin of the chain */
 80046f4:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80046f8:	f8d3 b000 	ldr.w	fp, [r3]
 80046fc:	1d1f      	adds	r7, r3, #4
 80046fe:	2502      	movs	r5, #2
			if (cl) {
 8004700:	f1b8 0f00 	cmp.w	r8, #0
 8004704:	d028      	beq.n	8004758 <f_lseek+0x84>
 8004706:	46c1      	mov	r9, r8
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004708:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 800470c:	4649      	mov	r1, r9
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	f7ff faf2 	bl	8003cf8 <get_fat.isra.8>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8004714:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8004716:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800471a:	d807      	bhi.n	800472c <f_lseek+0x58>
 800471c:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800471e:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8004720:	4630      	mov	r0, r6
 8004722:	b003      	add	sp, #12
 8004724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004728:	4680      	mov	r8, r0
 800472a:	e7ec      	b.n	8004706 <f_lseek+0x32>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d101      	bne.n	8004734 <f_lseek+0x60>
 8004730:	2601      	movs	r6, #1
 8004732:	e7f4      	b.n	800471e <f_lseek+0x4a>
					} while (cl == pcl + 1);
 8004734:	f109 0301 	add.w	r3, r9, #1
 8004738:	4298      	cmp	r0, r3
 800473a:	4681      	mov	r9, r0
 800473c:	d0e6      	beq.n	800470c <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800473e:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8004740:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8004742:	bf21      	itttt	cs
 8004744:	463b      	movcs	r3, r7
 8004746:	f843 ab08 	strcs.w	sl, [r3], #8
 800474a:	f8c7 8004 	strcs.w	r8, [r7, #4]
 800474e:	461f      	movcs	r7, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8004750:	9b01      	ldr	r3, [sp, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	4298      	cmp	r0, r3
 8004756:	d3e7      	bcc.n	8004728 <f_lseek+0x54>
			*fp->cltbl = ulen;	/* Number of items used */
 8004758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
 800475a:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 800475c:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen) {
 800475e:	f200 80d4 	bhi.w	800490a <f_lseek+0x236>
				*tbl = 0;		/* Terminate table */
 8004762:	2300      	movs	r3, #0
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	e7db      	b.n	8004720 <f_lseek+0x4c>
 8004768:	68e0      	ldr	r0, [r4, #12]
 800476a:	4285      	cmp	r5, r0
 800476c:	bf28      	it	cs
 800476e:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 8004770:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 8004772:	2d00      	cmp	r5, #0
 8004774:	d0d4      	beq.n	8004720 <f_lseek+0x4c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8004776:	f105 38ff 	add.w	r8, r5, #4294967295
 800477a:	4641      	mov	r1, r8
 800477c:	4620      	mov	r0, r4
 800477e:	f7fe ffac 	bl	80036da <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 8004782:	9f01      	ldr	r7, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 8004784:	61e0      	str	r0, [r4, #28]
 8004786:	4601      	mov	r1, r0
				dsc = clust2sect(fs, fp->clust);
 8004788:	4638      	mov	r0, r7
 800478a:	f7fe ff9b 	bl	80036c4 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800478e:	2800      	cmp	r0, #0
 8004790:	d0c4      	beq.n	800471c <f_lseek+0x48>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8004792:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8004796:	2d00      	cmp	r5, #0
 8004798:	d0c2      	beq.n	8004720 <f_lseek+0x4c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800479a:	897d      	ldrh	r5, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800479c:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800479e:	3d01      	subs	r5, #1
 80047a0:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 80047a4:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80047a6:	4295      	cmp	r5, r2
 80047a8:	d0ba      	beq.n	8004720 <f_lseek+0x4c>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80047aa:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f104 0830 	add.w	r8, r4, #48	; 0x30
 80047b4:	da0a      	bge.n	80047cc <f_lseek+0xf8>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80047b6:	2301      	movs	r3, #1
 80047b8:	4641      	mov	r1, r8
 80047ba:	7878      	ldrb	r0, [r7, #1]
 80047bc:	f7fe fece 	bl	800355c <disk_write>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d1b5      	bne.n	8004730 <f_lseek+0x5c>
						fp->flag &= (BYTE)~FA_DIRTY;
 80047c4:	7d23      	ldrb	r3, [r4, #20]
 80047c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ca:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80047cc:	9801      	ldr	r0, [sp, #4]
 80047ce:	2301      	movs	r3, #1
 80047d0:	462a      	mov	r2, r5
 80047d2:	4641      	mov	r1, r8
 80047d4:	7840      	ldrb	r0, [r0, #1]
 80047d6:	f7fe feb3 	bl	8003540 <disk_read>
 80047da:	2800      	cmp	r0, #0
 80047dc:	d1a8      	bne.n	8004730 <f_lseek+0x5c>
					fp->sect = dsc;
 80047de:	6225      	str	r5, [r4, #32]
 80047e0:	e79e      	b.n	8004720 <f_lseek+0x4c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80047e2:	68e3      	ldr	r3, [r4, #12]
 80047e4:	429d      	cmp	r5, r3
 80047e6:	d904      	bls.n	80047f2 <f_lseek+0x11e>
 80047e8:	7d22      	ldrb	r2, [r4, #20]
 80047ea:	f012 0f02 	tst.w	r2, #2
 80047ee:	bf08      	it	eq
 80047f0:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 80047f2:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 80047f4:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 80047f6:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	d132      	bne.n	8004862 <f_lseek+0x18e>
		fp->fptr = nsect = 0;
 80047fc:	462f      	mov	r7, r5
 80047fe:	e009      	b.n	8004814 <f_lseek+0x140>
 8004800:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8004802:	68e3      	ldr	r3, [r4, #12]
 8004804:	69a5      	ldr	r5, [r4, #24]
 8004806:	429d      	cmp	r5, r3
			fp->flag |= FA_MODIFIED;
 8004808:	bf81      	itttt	hi
 800480a:	7d23      	ldrbhi	r3, [r4, #20]
			fp->obj.objsize = fp->fptr;
 800480c:	60e5      	strhi	r5, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800480e:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 8004812:	7523      	strbhi	r3, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8004814:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8004818:	2d00      	cmp	r5, #0
 800481a:	d081      	beq.n	8004720 <f_lseek+0x4c>
 800481c:	6a22      	ldr	r2, [r4, #32]
 800481e:	42ba      	cmp	r2, r7
 8004820:	f43f af7e 	beq.w	8004720 <f_lseek+0x4c>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8004824:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f104 0530 	add.w	r5, r4, #48	; 0x30
 800482e:	da0c      	bge.n	800484a <f_lseek+0x176>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004830:	9801      	ldr	r0, [sp, #4]
 8004832:	2301      	movs	r3, #1
 8004834:	4629      	mov	r1, r5
 8004836:	7840      	ldrb	r0, [r0, #1]
 8004838:	f7fe fe90 	bl	800355c <disk_write>
 800483c:	2800      	cmp	r0, #0
 800483e:	f47f af77 	bne.w	8004730 <f_lseek+0x5c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004842:	7d23      	ldrb	r3, [r4, #20]
 8004844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004848:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800484a:	9801      	ldr	r0, [sp, #4]
 800484c:	2301      	movs	r3, #1
 800484e:	463a      	mov	r2, r7
 8004850:	4629      	mov	r1, r5
 8004852:	7840      	ldrb	r0, [r0, #1]
 8004854:	f7fe fe74 	bl	8003540 <disk_read>
 8004858:	2800      	cmp	r0, #0
 800485a:	f47f af69 	bne.w	8004730 <f_lseek+0x5c>
			fp->sect = nsect;
 800485e:	6227      	str	r7, [r4, #32]
 8004860:	e75e      	b.n	8004720 <f_lseek+0x4c>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8004862:	9a01      	ldr	r2, [sp, #4]
 8004864:	8957      	ldrh	r7, [r2, #10]
 8004866:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8004868:	b303      	cbz	r3, 80048ac <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800486a:	3b01      	subs	r3, #1
 800486c:	1e6a      	subs	r2, r5, #1
 800486e:	fbb3 f1f7 	udiv	r1, r3, r7
 8004872:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8004876:	428a      	cmp	r2, r1
 8004878:	d318      	bcc.n	80048ac <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800487a:	427a      	negs	r2, r7
 800487c:	4013      	ands	r3, r2
				clst = fp->clust;
 800487e:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8004880:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 8004882:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8004884:	2900      	cmp	r1, #0
 8004886:	d0bb      	beq.n	8004800 <f_lseek+0x12c>
				while (ofs > bcs) {						/* Cluster following loop */
 8004888:	42bd      	cmp	r5, r7
 800488a:	d81e      	bhi.n	80048ca <f_lseek+0x1f6>
				fp->fptr += ofs;
 800488c:	69a3      	ldr	r3, [r4, #24]
 800488e:	442b      	add	r3, r5
 8004890:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8004892:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0b2      	beq.n	8004800 <f_lseek+0x12c>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800489a:	9801      	ldr	r0, [sp, #4]
 800489c:	f7fe ff12 	bl	80036c4 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80048a0:	2800      	cmp	r0, #0
 80048a2:	f43f af3b 	beq.w	800471c <f_lseek+0x48>
					nsect += (DWORD)(ofs / SS(fs));
 80048a6:	eb00 2755 	add.w	r7, r0, r5, lsr #9
 80048aa:	e7aa      	b.n	8004802 <f_lseek+0x12e>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80048ac:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80048ae:	b951      	cbnz	r1, 80048c6 <f_lseek+0x1f2>
					clst = create_chain(&fp->obj, 0);
 80048b0:	4620      	mov	r0, r4
 80048b2:	f7ff fa7b 	bl	8003dac <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80048b6:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 80048b8:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80048ba:	f43f af2f 	beq.w	800471c <f_lseek+0x48>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80048be:	3001      	adds	r0, #1
 80048c0:	f43f af36 	beq.w	8004730 <f_lseek+0x5c>
					fp->obj.sclust = clst;
 80048c4:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 80048c6:	61e1      	str	r1, [r4, #28]
 80048c8:	e7dc      	b.n	8004884 <f_lseek+0x1b0>
					ofs -= bcs; fp->fptr += bcs;
 80048ca:	69a3      	ldr	r3, [r4, #24]
 80048cc:	443b      	add	r3, r7
 80048ce:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80048d0:	7d23      	ldrb	r3, [r4, #20]
 80048d2:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 80048d4:	eba5 0507 	sub.w	r5, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80048d8:	d506      	bpl.n	80048e8 <f_lseek+0x214>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80048da:	4620      	mov	r0, r4
 80048dc:	f7ff fa66 	bl	8003dac <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80048e0:	4601      	mov	r1, r0
 80048e2:	b928      	cbnz	r0, 80048f0 <f_lseek+0x21c>
							ofs = 0; break;
 80048e4:	4605      	mov	r5, r0
 80048e6:	e7d1      	b.n	800488c <f_lseek+0x1b8>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	f7ff fa05 	bl	8003cf8 <get_fat.isra.8>
 80048ee:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80048f0:	1c4b      	adds	r3, r1, #1
 80048f2:	f43f af1d 	beq.w	8004730 <f_lseek+0x5c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80048f6:	2901      	cmp	r1, #1
 80048f8:	f67f af10 	bls.w	800471c <f_lseek+0x48>
 80048fc:	9b01      	ldr	r3, [sp, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	4299      	cmp	r1, r3
 8004902:	f4bf af0b 	bcs.w	800471c <f_lseek+0x48>
					fp->clust = clst;
 8004906:	61e1      	str	r1, [r4, #28]
 8004908:	e7be      	b.n	8004888 <f_lseek+0x1b4>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800490a:	2611      	movs	r6, #17
 800490c:	e708      	b.n	8004720 <f_lseek+0x4c>
	...

08004910 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004910:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <FATFS_LinkDriverEx+0x40>)
 8004914:	7a5d      	ldrb	r5, [r3, #9]
 8004916:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800491a:	b9b5      	cbnz	r5, 800494a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800491c:	7a5d      	ldrb	r5, [r3, #9]
 800491e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8004920:	7a5d      	ldrb	r5, [r3, #9]
 8004922:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004926:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8004928:	7a58      	ldrb	r0, [r3, #9]
 800492a:	4418      	add	r0, r3
 800492c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800492e:	7a5a      	ldrb	r2, [r3, #9]
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	1c50      	adds	r0, r2, #1
 8004934:	b2c0      	uxtb	r0, r0
 8004936:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8004938:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800493a:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800493c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800493e:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8004940:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8004942:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004944:	70cc      	strb	r4, [r1, #3]
 8004946:	4620      	mov	r0, r4
 8004948:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800494a:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 800494c:	bd30      	pop	{r4, r5, pc}
 800494e:	bf00      	nop
 8004950:	20000228 	.word	0x20000228

08004954 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8004954:	2200      	movs	r2, #0
 8004956:	f7ff bfdb 	b.w	8004910 <FATFS_LinkDriverEx>

0800495a <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800495a:	b148      	cbz	r0, 8004970 <null_ptr_check+0x16>
 800495c:	69c3      	ldr	r3, [r0, #28]
 800495e:	b13b      	cbz	r3, 8004970 <null_ptr_check+0x16>
 8004960:	6a03      	ldr	r3, [r0, #32]
 8004962:	b12b      	cbz	r3, 8004970 <null_ptr_check+0x16>
 8004964:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004966:	fab0 f080 	clz	r0, r0
 800496a:	0940      	lsrs	r0, r0, #5
 800496c:	4240      	negs	r0, r0
 800496e:	4770      	bx	lr
    {
        rslt = BMI160_E_NULL_PTR;
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
        /* Device structure is fine */
        rslt = BMI160_OK;
    }

    return rslt;
}
 8004974:	4770      	bx	lr

08004976 <bmi160_get_regs>:
{
 8004976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497a:	469e      	mov	lr, r3
    uint16_t temp_len = len + dev->dummy_byte;
 800497c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    if ((dev == NULL) || (dev->read == NULL))
 8004980:	f8de 801c 	ldr.w	r8, [lr, #28]
    uint16_t temp_len = len + dev->dummy_byte;
 8004984:	4413      	add	r3, r2
 8004986:	b29b      	uxth	r3, r3
{
 8004988:	4615      	mov	r5, r2
    uint8_t temp_buf[temp_len];
 800498a:	1dda      	adds	r2, r3, #7
 800498c:	f022 0207 	bic.w	r2, r2, #7
{
 8004990:	af00      	add	r7, sp, #0
    uint8_t temp_buf[temp_len];
 8004992:	ebad 0d02 	sub.w	sp, sp, r2
{
 8004996:	460e      	mov	r6, r1
    uint8_t temp_buf[temp_len];
 8004998:	466c      	mov	r4, sp
    if ((dev == NULL) || (dev->read == NULL))
 800499a:	f1b8 0f00 	cmp.w	r8, #0
 800499e:	d01b      	beq.n	80049d8 <bmi160_get_regs+0x62>
    else if (len == 0)
 80049a0:	b1ed      	cbz	r5, 80049de <bmi160_get_regs+0x68>
        if (dev->interface == BMI160_SPI_INTF)
 80049a2:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80049a6:	2a01      	cmp	r2, #1
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 80049a8:	bf08      	it	eq
 80049aa:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
        rslt = dev->read(dev->id, reg_addr, temp_buf, temp_len);
 80049ae:	4601      	mov	r1, r0
 80049b0:	466a      	mov	r2, sp
 80049b2:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80049b6:	47c0      	blx	r8
        if (rslt == BMI160_OK)
 80049b8:	b9a0      	cbnz	r0, 80049e4 <bmi160_get_regs+0x6e>
 80049ba:	3d01      	subs	r5, #1
 80049bc:	f10d 33ff 	add.w	r3, sp, #4294967295
 80049c0:	1e71      	subs	r1, r6, #1
 80049c2:	442c      	add	r4, r5
            while (indx < len)
 80049c4:	42a3      	cmp	r3, r4
 80049c6:	d102      	bne.n	80049ce <bmi160_get_regs+0x58>
}
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                data[indx] = temp_buf[indx];
 80049ce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80049d2:	f801 2f01 	strb.w	r2, [r1, #1]!
 80049d6:	e7f5      	b.n	80049c4 <bmi160_get_regs+0x4e>
        rslt = BMI160_E_NULL_PTR;
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	e7f4      	b.n	80049c8 <bmi160_get_regs+0x52>
        rslt = BMI160_READ_WRITE_LENGHT_INVALID;
 80049de:	f06f 000b 	mvn.w	r0, #11
 80049e2:	e7f1      	b.n	80049c8 <bmi160_get_regs+0x52>
            rslt = BMI160_E_COM_FAIL;
 80049e4:	f06f 0001 	mvn.w	r0, #1
 80049e8:	e7ee      	b.n	80049c8 <bmi160_get_regs+0x52>

080049ea <bmi160_set_regs>:
{
 80049ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ee:	4607      	mov	r7, r0
 80049f0:	4689      	mov	r9, r1
 80049f2:	4690      	mov	r8, r2
    if ((dev == NULL) || (dev->write == NULL))
 80049f4:	461c      	mov	r4, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d031      	beq.n	8004a5e <bmi160_set_regs+0x74>
 80049fa:	6a1d      	ldr	r5, [r3, #32]
 80049fc:	b37d      	cbz	r5, 8004a5e <bmi160_set_regs+0x74>
    else if (len == 0)
 80049fe:	b38a      	cbz	r2, 8004a64 <bmi160_set_regs+0x7a>
        if (dev->interface == BMI160_SPI_INTF)
 8004a00:	789b      	ldrb	r3, [r3, #2]
 8004a02:	2b01      	cmp	r3, #1
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8004a04:	7a23      	ldrb	r3, [r4, #8]
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8004a06:	bf08      	it	eq
 8004a08:	f000 077f 	andeq.w	r7, r0, #127	; 0x7f
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8004a0c:	2b11      	cmp	r3, #17
 8004a0e:	d016      	beq.n	8004a3e <bmi160_set_regs+0x54>
 8004a10:	7c23      	ldrb	r3, [r4, #16]
 8004a12:	2b15      	cmp	r3, #21
 8004a14:	d013      	beq.n	8004a3e <bmi160_set_regs+0x54>
 8004a16:	2300      	movs	r3, #0
 8004a18:	461d      	mov	r5, r3
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	18b9      	adds	r1, r7, r2
            for (; count < len; count++)
 8004a1e:	4590      	cmp	r8, r2
 8004a20:	b2c9      	uxtb	r1, r1
 8004a22:	f103 0601 	add.w	r6, r3, #1
 8004a26:	d913      	bls.n	8004a50 <bmi160_set_regs+0x66>
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8004a28:	6a25      	ldr	r5, [r4, #32]
 8004a2a:	7860      	ldrb	r0, [r4, #1]
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	444a      	add	r2, r9
 8004a30:	47a8      	blx	r5
                dev->delay_ms(1);
 8004a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8004a34:	4605      	mov	r5, r0
                dev->delay_ms(1);
 8004a36:	2001      	movs	r0, #1
 8004a38:	4798      	blx	r3
 8004a3a:	4633      	mov	r3, r6
 8004a3c:	e7ed      	b.n	8004a1a <bmi160_set_regs+0x30>
            rslt = dev->write(dev->id, reg_addr, data, len);
 8004a3e:	4643      	mov	r3, r8
 8004a40:	464a      	mov	r2, r9
 8004a42:	4639      	mov	r1, r7
 8004a44:	7860      	ldrb	r0, [r4, #1]
 8004a46:	47a8      	blx	r5
            dev->delay_ms(1);
 8004a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
            rslt = dev->write(dev->id, reg_addr, data, len);
 8004a4a:	4605      	mov	r5, r0
            dev->delay_ms(1);
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	4798      	blx	r3
            rslt = BMI160_E_COM_FAIL;
 8004a50:	2d00      	cmp	r5, #0
 8004a52:	bf18      	it	ne
 8004a54:	f06f 0501 	mvnne.w	r5, #1
}
 8004a58:	4628      	mov	r0, r5
 8004a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        rslt = BMI160_E_NULL_PTR;
 8004a5e:	f04f 35ff 	mov.w	r5, #4294967295
 8004a62:	e7f9      	b.n	8004a58 <bmi160_set_regs+0x6e>
        rslt = BMI160_READ_WRITE_LENGHT_INVALID;
 8004a64:	f06f 050b 	mvn.w	r5, #11
 8004a68:	e7f6      	b.n	8004a58 <bmi160_set_regs+0x6e>

08004a6a <bmi160_soft_reset>:
{
 8004a6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8004a6c:	23b6      	movs	r3, #182	; 0xb6
 8004a6e:	f88d 3007 	strb.w	r3, [sp, #7]
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004a72:	4604      	mov	r4, r0
 8004a74:	b378      	cbz	r0, 8004ad6 <bmi160_soft_reset+0x6c>
 8004a76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a78:	b36b      	cbz	r3, 8004ad6 <bmi160_soft_reset+0x6c>
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f10d 0107 	add.w	r1, sp, #7
 8004a82:	207e      	movs	r0, #126	; 0x7e
 8004a84:	f7ff ffb1 	bl	80049ea <bmi160_set_regs>
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8004a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8004a8a:	4605      	mov	r5, r0
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
 8004a90:	b9a5      	cbnz	r5, 8004abc <bmi160_soft_reset+0x52>
 8004a92:	78a2      	ldrb	r2, [r4, #2]
 8004a94:	2a01      	cmp	r2, #1
 8004a96:	d014      	beq.n	8004ac2 <bmi160_soft_reset+0x58>
static void default_param_settg(struct bmi160_dev *dev)
{
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8004a98:	2308      	movs	r3, #8
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8004a9a:	2110      	movs	r1, #16
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8004a9c:	2202      	movs	r2, #2
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8004a9e:	7163      	strb	r3, [r4, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8004aa0:	7121      	strb	r1, [r4, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8004aa2:	7363      	strb	r3, [r4, #13]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8004aa4:	2103      	movs	r1, #3
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8004aa6:	2314      	movs	r3, #20
 8004aa8:	7323      	strb	r3, [r4, #12]
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8004aaa:	71e2      	strb	r2, [r4, #7]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8004aac:	2300      	movs	r3, #0
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8004aae:	71a1      	strb	r1, [r4, #6]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8004ab0:	73a3      	strb	r3, [r4, #14]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8004ab2:	73e2      	strb	r2, [r4, #15]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	60a3      	str	r3, [r4, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8004ab8:	68e3      	ldr	r3, [r4, #12]
 8004aba:	6123      	str	r3, [r4, #16]
}
 8004abc:	4628      	mov	r0, r5
 8004abe:	b003      	add	sp, #12
 8004ac0:	bd30      	pop	{r4, r5, pc}
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8004ac2:	4623      	mov	r3, r4
 8004ac4:	f10d 0107 	add.w	r1, sp, #7
 8004ac8:	207f      	movs	r0, #127	; 0x7f
 8004aca:	f7ff ff54 	bl	8004976 <bmi160_get_regs>
        if (rslt == BMI160_OK)
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d0e2      	beq.n	8004a98 <bmi160_soft_reset+0x2e>
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	e7f2      	b.n	8004abc <bmi160_soft_reset+0x52>
        rslt = BMI160_E_NULL_PTR;
 8004ad6:	f04f 35ff 	mov.w	r5, #4294967295
 8004ada:	e7ef      	b.n	8004abc <bmi160_soft_reset+0x52>

08004adc <bmi160_init>:
{
 8004adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ade:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 8004ae0:	f7ff ff3b 	bl	800495a <null_ptr_check>
    if (dev->interface == BMI160_SPI_INTF)
 8004ae4:	78a2      	ldrb	r2, [r4, #2]
 8004ae6:	2a01      	cmp	r2, #1
 8004ae8:	d109      	bne.n	8004afe <bmi160_init+0x22>
        dev->dummy_byte = 1;
 8004aea:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
    if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
 8004aee:	bb48      	cbnz	r0, 8004b44 <bmi160_init+0x68>
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8004af0:	4623      	mov	r3, r4
 8004af2:	f10d 0107 	add.w	r1, sp, #7
 8004af6:	207f      	movs	r0, #127	; 0x7f
 8004af8:	f7ff ff3d 	bl	8004976 <bmi160_get_regs>
 8004afc:	e002      	b.n	8004b04 <bmi160_init+0x28>
        dev->dummy_byte = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
 8004b04:	b9f0      	cbnz	r0, 8004b44 <bmi160_init+0x68>
        dev->chip_id = 0;
 8004b06:	2000      	movs	r0, #0
 8004b08:	7020      	strb	r0, [r4, #0]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8004b0a:	2504      	movs	r5, #4
 8004b0c:	3d01      	subs	r5, #1
 8004b0e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8004b12:	d00d      	beq.n	8004b30 <bmi160_init+0x54>
 8004b14:	7823      	ldrb	r3, [r4, #0]
 8004b16:	2bd1      	cmp	r3, #209	; 0xd1
 8004b18:	d103      	bne.n	8004b22 <bmi160_init+0x46>
        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8004b1a:	b170      	cbz	r0, 8004b3a <bmi160_init+0x5e>
            rslt = BMI160_E_DEV_NOT_FOUND;
 8004b1c:	f06f 0002 	mvn.w	r0, #2
    return rslt;
 8004b20:	e010      	b.n	8004b44 <bmi160_init+0x68>
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8004b22:	4623      	mov	r3, r4
 8004b24:	2201      	movs	r2, #1
 8004b26:	4621      	mov	r1, r4
 8004b28:	2000      	movs	r0, #0
 8004b2a:	f7ff ff24 	bl	8004976 <bmi160_get_regs>
 8004b2e:	e7ed      	b.n	8004b0c <bmi160_init+0x30>
        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d1f3      	bne.n	8004b1c <bmi160_init+0x40>
 8004b34:	7823      	ldrb	r3, [r4, #0]
 8004b36:	2bd1      	cmp	r3, #209	; 0xd1
 8004b38:	d1f0      	bne.n	8004b1c <bmi160_init+0x40>
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8004b3a:	23ff      	movs	r3, #255	; 0xff
 8004b3c:	70e3      	strb	r3, [r4, #3]
            rslt = bmi160_soft_reset(dev);
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7ff ff93 	bl	8004a6a <bmi160_soft_reset>
}
 8004b44:	b003      	add	sp, #12
 8004b46:	bd30      	pop	{r4, r5, pc}

08004b48 <bmi160_set_power_mode>:
{
 8004b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d075      	beq.n	8004c3c <bmi160_set_power_mode+0xf4>
 8004b50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d072      	beq.n	8004c3c <bmi160_set_power_mode+0xf4>
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
    int8_t rslt = 0;
    uint8_t data = 0;

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8004b56:	7902      	ldrb	r2, [r0, #4]
 8004b58:	f1a2 0110 	sub.w	r1, r2, #16
    uint8_t data = 0;
 8004b5c:	2300      	movs	r3, #0
    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8004b5e:	2902      	cmp	r1, #2
    uint8_t data = 0;
 8004b60:	f88d 3006 	strb.w	r3, [sp, #6]
    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8004b64:	d86f      	bhi.n	8004c46 <bmi160_set_power_mode+0xfe>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8004b66:	7a01      	ldrb	r1, [r0, #8]
 8004b68:	4291      	cmp	r1, r2
 8004b6a:	d036      	beq.n	8004bda <bmi160_set_power_mode+0x92>
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
    int8_t rslt;
    uint8_t temp = 0;
    uint8_t pre_filter = 0;
 8004b6c:	f88d 3007 	strb.w	r3, [sp, #7]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004b70:	2201      	movs	r2, #1
 8004b72:	4603      	mov	r3, r0
 8004b74:	f10d 0106 	add.w	r1, sp, #6
 8004b78:	2040      	movs	r0, #64	; 0x40
 8004b7a:	f7ff fefc 	bl	8004976 <bmi160_get_regs>
    if (rslt == BMI160_OK)
 8004b7e:	4605      	mov	r5, r0
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d144      	bne.n	8004c0e <bmi160_set_power_mode+0xc6>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8004b84:	7923      	ldrb	r3, [r4, #4]
 8004b86:	2b12      	cmp	r3, #18
 8004b88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004b8c:	d142      	bne.n	8004c14 <bmi160_set_power_mode+0xcc>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8004b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b92:	f88d 3006 	strb.w	r3, [sp, #6]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004b96:	2201      	movs	r2, #1
 8004b98:	4623      	mov	r3, r4
 8004b9a:	f10d 0106 	add.w	r1, sp, #6
 8004b9e:	2040      	movs	r0, #64	; 0x40
 8004ba0:	f7ff ff23 	bl	80049ea <bmi160_set_regs>

            /* disable the pre-filter data in
             * low power mode */
            if (rslt == BMI160_OK)
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	bb90      	cbnz	r0, 8004c0e <bmi160_set_power_mode+0xc6>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &pre_filter, 2, dev);
 8004ba8:	4623      	mov	r3, r4
 8004baa:	2202      	movs	r2, #2
 8004bac:	f10d 0107 	add.w	r1, sp, #7
 8004bb0:	2058      	movs	r0, #88	; 0x58
            /* disable under-sampling parameter
             * if already enabled */
            *data = temp;

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004bb2:	f7ff ff1a 	bl	80049ea <bmi160_set_regs>
 8004bb6:	4605      	mov	r5, r0
            if (rslt == BMI160_OK)
 8004bb8:	bb48      	cbnz	r0, 8004c0e <bmi160_set_power_mode+0xc6>
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8004bba:	4623      	mov	r3, r4
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	1d21      	adds	r1, r4, #4
 8004bc0:	207e      	movs	r0, #126	; 0x7e
 8004bc2:	f7ff ff12 	bl	80049ea <bmi160_set_regs>
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8004bc6:	7a23      	ldrb	r3, [r4, #8]
 8004bc8:	2b10      	cmp	r3, #16
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8004bca:	4605      	mov	r5, r0
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8004bcc:	d102      	bne.n	8004bd4 <bmi160_set_power_mode+0x8c>
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8004bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bd0:	2005      	movs	r0, #5
 8004bd2:	4798      	blx	r3
                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8004bd4:	7923      	ldrb	r3, [r4, #4]
 8004bd6:	7223      	strb	r3, [r4, #8]
        if (rslt == BMI160_OK)
 8004bd8:	b9cd      	cbnz	r5, 8004c0e <bmi160_set_power_mode+0xc6>
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
    int8_t rslt = 0;

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8004bda:	7b23      	ldrb	r3, [r4, #12]
 8004bdc:	f1a3 0214 	sub.w	r2, r3, #20
 8004be0:	2a01      	cmp	r2, #1
 8004be2:	d901      	bls.n	8004be8 <bmi160_set_power_mode+0xa0>
 8004be4:	2b17      	cmp	r3, #23
 8004be6:	d12e      	bne.n	8004c46 <bmi160_set_power_mode+0xfe>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8004be8:	7c22      	ldrb	r2, [r4, #16]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d029      	beq.n	8004c42 <bmi160_set_power_mode+0xfa>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8004bee:	4623      	mov	r3, r4
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f104 010c 	add.w	r1, r4, #12
 8004bf6:	207e      	movs	r0, #126	; 0x7e
 8004bf8:	f7ff fef7 	bl	80049ea <bmi160_set_regs>
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8004bfc:	7c23      	ldrb	r3, [r4, #16]
 8004bfe:	2b14      	cmp	r3, #20
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8004c00:	4605      	mov	r5, r0
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8004c02:	d113      	bne.n	8004c2c <bmi160_set_power_mode+0xe4>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8004c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c06:	2051      	movs	r0, #81	; 0x51
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8004c08:	4798      	blx	r3
            }
            else
            {
                /* do nothing */
            }
            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8004c0a:	7b23      	ldrb	r3, [r4, #12]
 8004c0c:	7423      	strb	r3, [r4, #16]
}
 8004c0e:	4628      	mov	r0, r5
 8004c10:	b003      	add	sp, #12
 8004c12:	bd30      	pop	{r4, r5, pc}
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8004c14:	061a      	lsls	r2, r3, #24
 8004c16:	d5d0      	bpl.n	8004bba <bmi160_set_power_mode+0x72>
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8004c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            *data = temp;
 8004c1c:	f88d 3006 	strb.w	r3, [sp, #6]
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8004c20:	2201      	movs	r2, #1
 8004c22:	4623      	mov	r3, r4
 8004c24:	f10d 0106 	add.w	r1, sp, #6
 8004c28:	2040      	movs	r0, #64	; 0x40
 8004c2a:	e7c2      	b.n	8004bb2 <bmi160_set_power_mode+0x6a>
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8004c2c:	2b17      	cmp	r3, #23
 8004c2e:	d1ec      	bne.n	8004c0a <bmi160_set_power_mode+0xc2>
 8004c30:	7b23      	ldrb	r3, [r4, #12]
 8004c32:	2b15      	cmp	r3, #21
 8004c34:	d1e9      	bne.n	8004c0a <bmi160_set_power_mode+0xc2>
                dev->delay_ms(10);
 8004c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c38:	200a      	movs	r0, #10
 8004c3a:	e7e5      	b.n	8004c08 <bmi160_set_power_mode+0xc0>
        rslt = BMI160_E_NULL_PTR;
 8004c3c:	f04f 35ff 	mov.w	r5, #4294967295
 8004c40:	e7e5      	b.n	8004c0e <bmi160_set_power_mode+0xc6>
    int8_t rslt = 0;
 8004c42:	2500      	movs	r5, #0
 8004c44:	e7e3      	b.n	8004c0e <bmi160_set_power_mode+0xc6>
        rslt = BMI160_E_OUT_OF_RANGE;
 8004c46:	f06f 0503 	mvn.w	r5, #3
    return rslt;
 8004c4a:	e7e0      	b.n	8004c0e <bmi160_set_power_mode+0xc6>

08004c4c <bmi160_set_sens_conf>:
{
 8004c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004c4e:	4604      	mov	r4, r0
 8004c50:	2800      	cmp	r0, #0
 8004c52:	f000 80c7 	beq.w	8004de4 <bmi160_set_sens_conf+0x198>
 8004c56:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80c3 	beq.w	8004de4 <bmi160_set_sens_conf+0x198>
    uint8_t data[2] = { 0 };
 8004c5e:	ad02      	add	r5, sp, #8
 8004c60:	2300      	movs	r3, #0
 8004c62:	f825 3d04 	strh.w	r3, [r5, #-4]!
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8004c66:	2202      	movs	r2, #2
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	2040      	movs	r0, #64	; 0x40
 8004c6e:	f7ff fe82 	bl	8004976 <bmi160_get_regs>
    if (rslt == BMI160_OK)
 8004c72:	b920      	cbnz	r0, 8004c7e <bmi160_set_sens_conf+0x32>
    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_MAX)
 8004c74:	7962      	ldrb	r2, [r4, #5]
 8004c76:	2a0f      	cmp	r2, #15
 8004c78:	d903      	bls.n	8004c82 <bmi160_set_sens_conf+0x36>
        rslt = BMI160_E_OUT_OF_RANGE;
 8004c7a:	f06f 0003 	mvn.w	r0, #3
}
 8004c7e:	b003      	add	sp, #12
 8004c80:	bd30      	pop	{r4, r5, pc}
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8004c82:	7a63      	ldrb	r3, [r4, #9]
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d008      	beq.n	8004c9a <bmi160_set_sens_conf+0x4e>
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8004c88:	f89d 3004 	ldrb.w	r3, [sp, #4]
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8004c8c:	f002 020f 	and.w	r2, r2, #15
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8004c90:	f023 030f 	bic.w	r3, r3, #15
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f88d 3004 	strb.w	r3, [sp, #4]
    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_MAX)
 8004c9a:	79e3      	ldrb	r3, [r4, #7]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d8ec      	bhi.n	8004c7a <bmi160_set_sens_conf+0x2e>
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8004ca0:	7ae2      	ldrb	r2, [r4, #11]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d005      	beq.n	8004cb2 <bmi160_set_sens_conf+0x66>
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8004ca6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
            *data = temp | ((bw << 4) & BMI160_ACCEL_ODR_MASK);
 8004cae:	f88d 3004 	strb.w	r3, [sp, #4]
    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_MAX)
 8004cb2:	79a3      	ldrb	r3, [r4, #6]
 8004cb4:	2b0c      	cmp	r3, #12
 8004cb6:	d8e0      	bhi.n	8004c7a <bmi160_set_sens_conf+0x2e>
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8004cb8:	7aa2      	ldrb	r2, [r4, #10]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d008      	beq.n	8004cd0 <bmi160_set_sens_conf+0x84>
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8004cbe:	f89d 2005 	ldrb.w	r2, [sp, #5]
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8004cc2:	f003 030f 	and.w	r3, r3, #15
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8004cc6:	f022 020f 	bic.w	r2, r2, #15
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f88d 3005 	strb.w	r3, [sp, #5]
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8004cd0:	4623      	mov	r3, r4
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	2040      	movs	r0, #64	; 0x40
 8004cd8:	f7ff fe87 	bl	80049ea <bmi160_set_regs>
        if (rslt == BMI160_OK)
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d1ce      	bne.n	8004c7e <bmi160_set_sens_conf+0x32>
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8004ce0:	7963      	ldrb	r3, [r4, #5]
 8004ce2:	7263      	strb	r3, [r4, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8004ce4:	79e3      	ldrb	r3, [r4, #7]
 8004ce6:	72e3      	strb	r3, [r4, #11]
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8004ce8:	2201      	movs	r2, #1
 8004cea:	4623      	mov	r3, r4
 8004cec:	f10d 0105 	add.w	r1, sp, #5
 8004cf0:	2041      	movs	r0, #65	; 0x41
 8004cf2:	f7ff fe7a 	bl	80049ea <bmi160_set_regs>
            if (rslt == BMI160_OK)
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d1c1      	bne.n	8004c7e <bmi160_set_sens_conf+0x32>
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8004cfa:	79a2      	ldrb	r2, [r4, #6]
 8004cfc:	72a2      	strb	r2, [r4, #10]
    uint8_t data[2] = { 0 };
 8004cfe:	f8ad 0004 	strh.w	r0, [sp, #4]
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8004d02:	4623      	mov	r3, r4
 8004d04:	2202      	movs	r2, #2
 8004d06:	4629      	mov	r1, r5
 8004d08:	2042      	movs	r0, #66	; 0x42
 8004d0a:	f7ff fe34 	bl	8004976 <bmi160_get_regs>
    if (rslt == BMI160_OK)
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d1b5      	bne.n	8004c7e <bmi160_set_sens_conf+0x32>
    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_MAX)
 8004d12:	7b62      	ldrb	r2, [r4, #13]
 8004d14:	2a0d      	cmp	r2, #13
 8004d16:	d8b0      	bhi.n	8004c7a <bmi160_set_sens_conf+0x2e>
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8004d18:	7c63      	ldrb	r3, [r4, #17]
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d008      	beq.n	8004d30 <bmi160_set_sens_conf+0xe4>
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8004d1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8004d22:	f002 020f 	and.w	r2, r2, #15
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8004d26:	f023 030f 	bic.w	r3, r3, #15
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f88d 3004 	strb.w	r3, [sp, #4]
 8004d30:	7be3      	ldrb	r3, [r4, #15]
    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_MAX)
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d8a1      	bhi.n	8004c7a <bmi160_set_sens_conf+0x2e>
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8004d36:	f89d 2004 	ldrb.w	r2, [sp, #4]
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8004d3a:	011b      	lsls	r3, r3, #4
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8004d3c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8004d40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d44:	4313      	orrs	r3, r2
    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_MAX)
 8004d46:	7ba2      	ldrb	r2, [r4, #14]
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8004d48:	f88d 3004 	strb.w	r3, [sp, #4]
    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_MAX)
 8004d4c:	2a04      	cmp	r2, #4
 8004d4e:	d894      	bhi.n	8004c7a <bmi160_set_sens_conf+0x2e>
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8004d50:	7ca3      	ldrb	r3, [r4, #18]
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d008      	beq.n	8004d68 <bmi160_set_sens_conf+0x11c>
            temp = *data & ~BMI160_GYRO_RANGE_MSK;
 8004d56:	f89d 3005 	ldrb.w	r3, [sp, #5]
            *data = temp | (range & BMI160_GYRO_RANGE_MSK);
 8004d5a:	f002 0207 	and.w	r2, r2, #7
            temp = *data & ~BMI160_GYRO_RANGE_MSK;
 8004d5e:	f023 0307 	bic.w	r3, r3, #7
            *data = temp | (range & BMI160_GYRO_RANGE_MSK);
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f88d 3005 	strb.w	r3, [sp, #5]
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8004d68:	4623      	mov	r3, r4
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	2042      	movs	r0, #66	; 0x42
 8004d70:	f7ff fe3b 	bl	80049ea <bmi160_set_regs>
        if (rslt == BMI160_OK)
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d182      	bne.n	8004c7e <bmi160_set_sens_conf+0x32>
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8004d78:	7b63      	ldrb	r3, [r4, #13]
 8004d7a:	7463      	strb	r3, [r4, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8004d7c:	7be3      	ldrb	r3, [r4, #15]
 8004d7e:	74e3      	strb	r3, [r4, #19]
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8004d80:	2201      	movs	r2, #1
 8004d82:	4623      	mov	r3, r4
 8004d84:	f10d 0105 	add.w	r1, sp, #5
 8004d88:	2043      	movs	r0, #67	; 0x43
 8004d8a:	f7ff fe2e 	bl	80049ea <bmi160_set_regs>
            if (rslt == BMI160_OK)
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	f47f af75 	bne.w	8004c7e <bmi160_set_sens_conf+0x32>
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8004d94:	7ba3      	ldrb	r3, [r4, #14]
 8004d96:	74a3      	strb	r3, [r4, #18]
                rslt = bmi160_set_power_mode(dev);
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f7ff fed5 	bl	8004b48 <bmi160_set_power_mode>
                if (rslt == BMI160_OK)
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f47f af6d 	bne.w	8004c7e <bmi160_set_sens_conf+0x32>
    uint8_t data = 0;
 8004da4:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8004da8:	4623      	mov	r3, r4
 8004daa:	2201      	movs	r2, #1
 8004dac:	4629      	mov	r1, r5
 8004dae:	2002      	movs	r0, #2
 8004db0:	f7ff fde1 	bl	8004976 <bmi160_get_regs>
    data = data >> 1;
 8004db4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data = data & BMI160_ERR_REG_MASK;
 8004db8:	f3c3 0343 	ubfx	r3, r3, #1, #4
    if (data == 1)
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d008      	beq.n	8004dd2 <bmi160_set_sens_conf+0x186>
    else if (data == 2)
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d009      	beq.n	8004dd8 <bmi160_set_sens_conf+0x18c>
    else if (data == 3)
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d00a      	beq.n	8004dde <bmi160_set_sens_conf+0x192>
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8004dc8:	2b07      	cmp	r3, #7
 8004dca:	bf08      	it	eq
 8004dcc:	f06f 0008 	mvneq.w	r0, #8
 8004dd0:	e755      	b.n	8004c7e <bmi160_set_sens_conf+0x32>
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8004dd2:	f06f 0005 	mvn.w	r0, #5
 8004dd6:	e752      	b.n	8004c7e <bmi160_set_sens_conf+0x32>
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8004dd8:	f06f 0006 	mvn.w	r0, #6
 8004ddc:	e74f      	b.n	8004c7e <bmi160_set_sens_conf+0x32>
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8004dde:	f06f 0007 	mvn.w	r0, #7
 8004de2:	e74c      	b.n	8004c7e <bmi160_set_sens_conf+0x32>
        rslt = BMI160_E_NULL_PTR;
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	e749      	b.n	8004c7e <bmi160_set_sens_conf+0x32>

08004dea <bmi160_get_sensor_data>:
{
 8004dea:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (time_sel == 1)
 8004dec:	f010 0f04 	tst.w	r0, #4
{
 8004df0:	4614      	mov	r4, r2
 8004df2:	b085      	sub	sp, #20
 8004df4:	460d      	mov	r5, r1
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8004df6:	f000 0203 	and.w	r2, r0, #3
        len = 3;
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2600      	moveq	r6, #0
 8004dfe:	2603      	movne	r6, #3
    if (dev != NULL)
 8004e00:	461f      	mov	r7, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80df 	beq.w	8004fc6 <bmi160_get_sensor_data+0x1dc>
        switch (sen_sel)
 8004e08:	2a02      	cmp	r2, #2
 8004e0a:	d03a      	beq.n	8004e82 <bmi160_get_sensor_data+0x98>
 8004e0c:	2a03      	cmp	r2, #3
 8004e0e:	f000 808b 	beq.w	8004f28 <bmi160_get_sensor_data+0x13e>
 8004e12:	2a01      	cmp	r2, #1
 8004e14:	f040 80d4 	bne.w	8004fc0 <bmi160_get_sensor_data+0x1d6>
                if (accel == NULL)
 8004e18:	2900      	cmp	r1, #0
 8004e1a:	f000 80d4 	beq.w	8004fc6 <bmi160_get_sensor_data+0x1dc>
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
    int8_t rslt;
    uint8_t idx = 0;
    uint8_t data_array[9] = { 0 };
 8004e1e:	2200      	movs	r2, #0
 8004e20:	9200      	str	r2, [sp, #0]
 8004e22:	9201      	str	r2, [sp, #4]
 8004e24:	f88d 2008 	strb.w	r2, [sp, #8]
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8004e28:	4669      	mov	r1, sp
 8004e2a:	1db2      	adds	r2, r6, #6
 8004e2c:	2012      	movs	r0, #18
 8004e2e:	f7ff fda2 	bl	8004976 <bmi160_get_regs>
    if (rslt == BMI160_OK)
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d135      	bne.n	8004ea2 <bmi160_get_sensor_data+0xb8>
    {
        /* Accel Data */
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
 8004e36:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004e3a:	f89d 3000 	ldrb.w	r3, [sp]
 8004e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel->x = msblsb; /* Data in X axis */
 8004e42:	802b      	strh	r3, [r5, #0]
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
 8004e44:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004e48:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004e4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel->y = msblsb; /* Data in Y axis */
 8004e50:	806b      	strh	r3, [r5, #2]
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
 8004e52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004e56:	f89d 3004 	ldrb.w	r3, [sp, #4]
        accel->z = msblsb; /* Data in Z axis */
        if (len == 3)
 8004e5a:	2e03      	cmp	r6, #3
        msblsb = (int16_t)((msb << 8) | lsb);
 8004e5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel->z = msblsb; /* Data in Z axis */
 8004e60:	80ab      	strh	r3, [r5, #4]
        {
            time_0 = data_array[idx++];
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8004e62:	bf05      	ittet	eq
 8004e64:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8004e68:	f89d 2008 	ldrbeq.w	r2, [sp, #8]
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
        }
        else
        {
            accel->sensortime = 0;
 8004e6c:	60a8      	strne	r0, [r5, #8]
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8004e6e:	021b      	lsleq	r3, r3, #8
 8004e70:	bf01      	itttt	eq
 8004e72:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
 8004e76:	f89d 2006 	ldrbeq.w	r2, [sp, #6]
 8004e7a:	4313      	orreq	r3, r2
 8004e7c:	60ab      	streq	r3, [r5, #8]
}
 8004e7e:	b005      	add	sp, #20
 8004e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (gyro == NULL)
 8004e82:	2c00      	cmp	r4, #0
 8004e84:	f000 809f 	beq.w	8004fc6 <bmi160_get_sensor_data+0x1dc>
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
    int8_t rslt;
    uint8_t idx = 0;
    uint8_t data_array[15] = { 0 };
 8004e88:	220f      	movs	r2, #15
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4668      	mov	r0, sp
 8004e8e:	f001 f8b2 	bl	8005ff6 <memset>
    int16_t msblsb;

    if (len == 0)
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8004e92:	463b      	mov	r3, r7
    if (len == 0)
 8004e94:	b9fe      	cbnz	r6, 8004ed6 <bmi160_get_sensor_data+0xec>
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8004e96:	2206      	movs	r2, #6
 8004e98:	4669      	mov	r1, sp
 8004e9a:	200c      	movs	r0, #12
 8004e9c:	f7ff fd6b 	bl	8004976 <bmi160_get_regs>
        if (rslt == BMI160_OK)
 8004ea0:	b110      	cbz	r0, 8004ea8 <bmi160_get_sensor_data+0xbe>
            gyro->sensortime = 0;
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8004ea2:	f06f 0001 	mvn.w	r0, #1
 8004ea6:	e7ea      	b.n	8004e7e <bmi160_get_sensor_data+0x94>
            msblsb = (int16_t)((msb << 8) | lsb);
 8004ea8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004eac:	f89d 3000 	ldrb.w	r3, [sp]
 8004eb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            gyro->x = msblsb; /* Data in X axis */
 8004eb4:	8023      	strh	r3, [r4, #0]
            msblsb = (int16_t)((msb << 8) | lsb);
 8004eb6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004eba:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004ebe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            gyro->y = msblsb; /* Data in Y axis */
 8004ec2:	8063      	strh	r3, [r4, #2]
            msblsb = (int16_t)((msb << 8) | lsb);
 8004ec4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004ec8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            gyro->z = msblsb; /* Data in Z axis */
 8004ed0:	80a3      	strh	r3, [r4, #4]
            gyro->sensortime = 0;
 8004ed2:	60a0      	str	r0, [r4, #8]
 8004ed4:	e7d3      	b.n	8004e7e <bmi160_get_sensor_data+0x94>
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8004ed6:	f106 020c 	add.w	r2, r6, #12
 8004eda:	4669      	mov	r1, sp
 8004edc:	200c      	movs	r0, #12
 8004ede:	f7ff fd4a 	bl	8004976 <bmi160_get_regs>
        if (rslt == BMI160_OK)
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d1dd      	bne.n	8004ea2 <bmi160_get_sensor_data+0xb8>
            msblsb = (int16_t)((msb << 8) | lsb);
 8004ee6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004eea:	f89d 3000 	ldrb.w	r3, [sp]
 8004eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            gyro->x = msblsb; /* gyro X axis data */
 8004ef2:	8023      	strh	r3, [r4, #0]
            msblsb = (int16_t)((msb << 8) | lsb);
 8004ef4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004ef8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004efc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            gyro->y = msblsb; /* gyro Y axis data */
 8004f00:	8063      	strh	r3, [r4, #2]
            msblsb = (int16_t)((msb << 8) | lsb);
 8004f02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004f06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            gyro->z = msblsb; /* gyro Z axis data */
 8004f0e:	80a3      	strh	r3, [r4, #4]
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8004f10:	f89d 300d 	ldrb.w	r3, [sp, #13]
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8004f14:	f89d 200e 	ldrb.w	r2, [sp, #14]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f1e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8004f22:	4313      	orrs	r3, r2
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8004f24:	60a3      	str	r3, [r4, #8]
 8004f26:	e7aa      	b.n	8004e7e <bmi160_get_sensor_data+0x94>
                if ((gyro == NULL) || (accel == NULL))
 8004f28:	2c00      	cmp	r4, #0
 8004f2a:	d04c      	beq.n	8004fc6 <bmi160_get_sensor_data+0x1dc>
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	d04a      	beq.n	8004fc6 <bmi160_get_sensor_data+0x1dc>
    uint8_t data_array[15] = { 0 };
 8004f30:	220f      	movs	r2, #15
 8004f32:	2100      	movs	r1, #0
 8004f34:	4668      	mov	r0, sp
 8004f36:	f001 f85e 	bl	8005ff6 <memset>
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	f106 020c 	add.w	r2, r6, #12
 8004f40:	4669      	mov	r1, sp
 8004f42:	200c      	movs	r0, #12
 8004f44:	f7ff fd17 	bl	8004976 <bmi160_get_regs>
    if (rslt == BMI160_OK)
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d1aa      	bne.n	8004ea2 <bmi160_get_sensor_data+0xb8>
        msblsb = (int16_t)((msb << 8) | lsb);
 8004f4c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004f50:	f89d 3000 	ldrb.w	r3, [sp]
 8004f54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        gyro->x = msblsb; /* gyro X axis data */
 8004f58:	8023      	strh	r3, [r4, #0]
        msblsb = (int16_t)((msb << 8) | lsb);
 8004f5a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004f5e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004f62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        gyro->y = msblsb; /* gyro Y axis data */
 8004f66:	8063      	strh	r3, [r4, #2]
        msblsb = (int16_t)((msb << 8) | lsb);
 8004f68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004f6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        gyro->z = msblsb; /* gyro Z axis data */
 8004f74:	80a3      	strh	r3, [r4, #4]
        msblsb = (int16_t)((msb << 8) | lsb);
 8004f76:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004f7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004f7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8004f82:	802b      	strh	r3, [r5, #0]
        msblsb = (int16_t)((msb << 8) | lsb);
 8004f84:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8004f88:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004f8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8004f90:	806b      	strh	r3, [r5, #2]
        msblsb = (int16_t)((msb << 8) | lsb);
 8004f92:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8004f96:	f89d 300a 	ldrb.w	r3, [sp, #10]
        if (len == 3)
 8004f9a:	2e03      	cmp	r6, #3
        msblsb = (int16_t)((msb << 8) | lsb);
 8004f9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8004fa0:	80ab      	strh	r3, [r5, #4]
        if (len == 3)
 8004fa2:	d10b      	bne.n	8004fbc <bmi160_get_sensor_data+0x1d2>
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8004fa4:	f89d 300d 	ldrb.w	r3, [sp, #13]
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8004fa8:	f89d 200e 	ldrb.w	r2, [sp, #14]
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fb2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60ab      	str	r3, [r5, #8]
 8004fba:	e7b3      	b.n	8004f24 <bmi160_get_sensor_data+0x13a>
            accel->sensortime = 0;
 8004fbc:	60a8      	str	r0, [r5, #8]
 8004fbe:	e788      	b.n	8004ed2 <bmi160_get_sensor_data+0xe8>
                rslt = BMI160_E_INVALID_INPUT;
 8004fc0:	f06f 0004 	mvn.w	r0, #4
 8004fc4:	e75b      	b.n	8004e7e <bmi160_get_sensor_data+0x94>
        rslt = BMI160_E_NULL_PTR;
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fca:	e758      	b.n	8004e7e <bmi160_get_sensor_data+0x94>

08004fcc <read_data>:
		return false;

}

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8004fcc:	b530      	push	{r4, r5, lr}
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8004fce:	f241 3588 	movw	r5, #5000	; 0x1388
		uint8_t len) {
 8004fd2:	b085      	sub	sp, #20
	tx_buff = (dev->addr << 1);
 8004fd4:	8c84      	ldrh	r4, [r0, #36]	; 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8004fd6:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
	tx_buff = (dev->addr << 1);
 8004fda:	0064      	lsls	r4, r4, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8004fdc:	b2a4      	uxth	r4, r4
 8004fde:	460a      	mov	r2, r1
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004fe6:	f7fc fcf7 	bl	80019d8 <HAL_I2C_Mem_Read>
		return 0;
	else
		return 1;

}
 8004fea:	3000      	adds	r0, #0
 8004fec:	bf18      	it	ne
 8004fee:	2001      	movne	r0, #1
 8004ff0:	b005      	add	sp, #20
 8004ff2:	bd30      	pop	{r4, r5, pc}

08004ff4 <read_register16>:
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8004ff4:	b530      	push	{r4, r5, lr}
 8004ff6:	b087      	sub	sp, #28
	tx_buff = (dev->addr << 1);
 8004ff8:	8c84      	ldrh	r4, [r0, #36]	; 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8004ffa:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ffe:	9302      	str	r3, [sp, #8]
 8005000:	2302      	movs	r3, #2
 8005002:	9301      	str	r3, [sp, #4]
	tx_buff = (dev->addr << 1);
 8005004:	0064      	lsls	r4, r4, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8005006:	ab05      	add	r3, sp, #20
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	b2a4      	uxth	r4, r4
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800500c:	4615      	mov	r5, r2
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800500e:	2301      	movs	r3, #1
 8005010:	460a      	mov	r2, r1
 8005012:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005014:	4621      	mov	r1, r4
 8005016:	f7fc fcdf 	bl	80019d8 <HAL_I2C_Mem_Read>
 800501a:	b948      	cbnz	r0, 8005030 <read_register16+0x3c>
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800501c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005020:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005024:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005028:	802b      	strh	r3, [r5, #0]
		return true;
 800502a:	2001      	movs	r0, #1
}
 800502c:	b007      	add	sp, #28
 800502e:	bd30      	pop	{r4, r5, pc}
		return false;
 8005030:	2000      	movs	r0, #0
 8005032:	e7fb      	b.n	800502c <read_register16+0x38>

08005034 <write_register8>:
	}

	return false;
}

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8005034:	b530      	push	{r4, r5, lr}
 8005036:	b087      	sub	sp, #28
 8005038:	ad06      	add	r5, sp, #24
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800503a:	8c84      	ldrh	r4, [r0, #36]	; 0x24
static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800503c:	f805 2d01 	strb.w	r2, [r5, #-1]!

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8005040:	f242 7310 	movw	r3, #10000	; 0x2710
 8005044:	9302      	str	r3, [sp, #8]
	tx_buff = (dev->addr << 1);
 8005046:	0064      	lsls	r4, r4, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8005048:	2301      	movs	r3, #1
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	9500      	str	r5, [sp, #0]
 800504e:	b2a4      	uxth	r4, r4
 8005050:	460a      	mov	r2, r1
 8005052:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005054:	4621      	mov	r1, r4
 8005056:	f7fc fc2f 	bl	80018b8 <HAL_I2C_Mem_Write>
		return false;
	else
		return true;
}
 800505a:	3000      	adds	r0, #0
 800505c:	bf18      	it	ne
 800505e:	2001      	movne	r0, #1
 8005060:	b007      	add	sp, #28
 8005062:	bd30      	pop	{r4, r5, pc}

08005064 <bmp280_init_default_params>:
	params->mode = BMP280_MODE_NORMAL;
 8005064:	2303      	movs	r3, #3
	params->filter = BMP280_FILTER_OFF;
 8005066:	2200      	movs	r2, #0
	params->mode = BMP280_MODE_NORMAL;
 8005068:	7003      	strb	r3, [r0, #0]
	params->filter = BMP280_FILTER_OFF;
 800506a:	7042      	strb	r2, [r0, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800506c:	7083      	strb	r3, [r0, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800506e:	70c3      	strb	r3, [r0, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8005070:	7103      	strb	r3, [r0, #4]
	params->standby = BMP280_STANDBY_250;
 8005072:	7143      	strb	r3, [r0, #5]
 8005074:	4770      	bx	lr

08005076 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {

	if (dev->addr != BMP280_I2C_ADDRESS_0
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8005076:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8005078:	3b76      	subs	r3, #118	; 0x76
	if (dev->addr != BMP280_I2C_ADDRESS_0
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b01      	cmp	r3, #1
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800507e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005080:	4604      	mov	r4, r0
 8005082:	460e      	mov	r6, r1
	if (dev->addr != BMP280_I2C_ADDRESS_0
 8005084:	d901      	bls.n	800508a <bmp280_init+0x14>
	if (!read_calibration_data(dev)) {
		return false;
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
		return false;
 8005086:	2000      	movs	r0, #0
 8005088:	e0ed      	b.n	8005266 <bmp280_init+0x1f0>
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800508a:	2301      	movs	r3, #1
 800508c:	f100 0232 	add.w	r2, r0, #50	; 0x32
 8005090:	21d0      	movs	r1, #208	; 0xd0
 8005092:	f7ff ff9b 	bl	8004fcc <read_data>
 8005096:	2800      	cmp	r0, #0
 8005098:	d1f5      	bne.n	8005086 <bmp280_init+0x10>
	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800509a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800509e:	2b58      	cmp	r3, #88	; 0x58
 80050a0:	d001      	beq.n	80050a6 <bmp280_init+0x30>
 80050a2:	2b60      	cmp	r3, #96	; 0x60
 80050a4:	d1ef      	bne.n	8005086 <bmp280_init+0x10>
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80050a6:	22b6      	movs	r2, #182	; 0xb6
 80050a8:	21e0      	movs	r1, #224	; 0xe0
 80050aa:	4620      	mov	r0, r4
 80050ac:	f7ff ffc2 	bl	8005034 <write_register8>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d1e8      	bne.n	8005086 <bmp280_init+0x10>
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80050b4:	2301      	movs	r3, #1
 80050b6:	f10d 0206 	add.w	r2, sp, #6
 80050ba:	21f3      	movs	r1, #243	; 0xf3
 80050bc:	4620      	mov	r0, r4
 80050be:	f7ff ff85 	bl	8004fcc <read_data>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d1f6      	bne.n	80050b4 <bmp280_init+0x3e>
				&& (status & 1) == 0)
 80050c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80050ca:	07db      	lsls	r3, r3, #31
 80050cc:	d4f2      	bmi.n	80050b4 <bmp280_init+0x3e>
	if (read_register16(dev, 0x88, &dev->dig_T1)
 80050ce:	4622      	mov	r2, r4
 80050d0:	2188      	movs	r1, #136	; 0x88
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7ff ff8e 	bl	8004ff4 <read_register16>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d0d4      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80050dc:	1ca2      	adds	r2, r4, #2
 80050de:	218a      	movs	r1, #138	; 0x8a
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7ff ff87 	bl	8004ff4 <read_register16>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d0cd      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80050ea:	1d22      	adds	r2, r4, #4
 80050ec:	218c      	movs	r1, #140	; 0x8c
 80050ee:	4620      	mov	r0, r4
 80050f0:	f7ff ff80 	bl	8004ff4 <read_register16>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d0c6      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80050f8:	1da2      	adds	r2, r4, #6
 80050fa:	218e      	movs	r1, #142	; 0x8e
 80050fc:	4620      	mov	r0, r4
 80050fe:	f7ff ff79 	bl	8004ff4 <read_register16>
 8005102:	2800      	cmp	r0, #0
 8005104:	d0bf      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8005106:	f104 0208 	add.w	r2, r4, #8
 800510a:	2190      	movs	r1, #144	; 0x90
 800510c:	4620      	mov	r0, r4
 800510e:	f7ff ff71 	bl	8004ff4 <read_register16>
 8005112:	2800      	cmp	r0, #0
 8005114:	d0b7      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8005116:	f104 020a 	add.w	r2, r4, #10
 800511a:	2192      	movs	r1, #146	; 0x92
 800511c:	4620      	mov	r0, r4
 800511e:	f7ff ff69 	bl	8004ff4 <read_register16>
 8005122:	2800      	cmp	r0, #0
 8005124:	d0af      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8005126:	f104 020c 	add.w	r2, r4, #12
 800512a:	2194      	movs	r1, #148	; 0x94
 800512c:	4620      	mov	r0, r4
 800512e:	f7ff ff61 	bl	8004ff4 <read_register16>
 8005132:	2800      	cmp	r0, #0
 8005134:	d0a7      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8005136:	f104 020e 	add.w	r2, r4, #14
 800513a:	2196      	movs	r1, #150	; 0x96
 800513c:	4620      	mov	r0, r4
 800513e:	f7ff ff59 	bl	8004ff4 <read_register16>
 8005142:	2800      	cmp	r0, #0
 8005144:	d09f      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8005146:	f104 0210 	add.w	r2, r4, #16
 800514a:	2198      	movs	r1, #152	; 0x98
 800514c:	4620      	mov	r0, r4
 800514e:	f7ff ff51 	bl	8004ff4 <read_register16>
 8005152:	2800      	cmp	r0, #0
 8005154:	d097      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8005156:	f104 0212 	add.w	r2, r4, #18
 800515a:	219a      	movs	r1, #154	; 0x9a
 800515c:	4620      	mov	r0, r4
 800515e:	f7ff ff49 	bl	8004ff4 <read_register16>
 8005162:	2800      	cmp	r0, #0
 8005164:	d08f      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8005166:	f104 0214 	add.w	r2, r4, #20
 800516a:	219c      	movs	r1, #156	; 0x9c
 800516c:	4620      	mov	r0, r4
 800516e:	f7ff ff41 	bl	8004ff4 <read_register16>
 8005172:	2800      	cmp	r0, #0
 8005174:	d087      	beq.n	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0x9e,
 8005176:	f104 0216 	add.w	r2, r4, #22
 800517a:	219e      	movs	r1, #158	; 0x9e
 800517c:	4620      	mov	r0, r4
 800517e:	f7ff ff39 	bl	8004ff4 <read_register16>
 8005182:	2800      	cmp	r0, #0
 8005184:	f43f af7f 	beq.w	8005086 <bmp280_init+0x10>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8005188:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800518c:	2b60      	cmp	r3, #96	; 0x60
 800518e:	d144      	bne.n	800521a <bmp280_init+0x1a4>
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8005190:	2301      	movs	r3, #1
 8005192:	f104 0218 	add.w	r2, r4, #24
 8005196:	21a1      	movs	r1, #161	; 0xa1
 8005198:	4620      	mov	r0, r4
 800519a:	f7ff ff17 	bl	8004fcc <read_data>
 800519e:	2800      	cmp	r0, #0
 80051a0:	f47f af71 	bne.w	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80051a4:	f104 021a 	add.w	r2, r4, #26
 80051a8:	21e1      	movs	r1, #225	; 0xe1
 80051aa:	4620      	mov	r0, r4
 80051ac:	f7ff ff22 	bl	8004ff4 <read_register16>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f43f af68 	beq.w	8005086 <bmp280_init+0x10>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80051b6:	2301      	movs	r3, #1
 80051b8:	f104 021c 	add.w	r2, r4, #28
 80051bc:	21e3      	movs	r1, #227	; 0xe3
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff ff04 	bl	8004fcc <read_data>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	f47f af5e 	bne.w	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0xe4, &h4)
 80051ca:	aa01      	add	r2, sp, #4
 80051cc:	21e4      	movs	r1, #228	; 0xe4
 80051ce:	4620      	mov	r0, r4
 80051d0:	f7ff ff10 	bl	8004ff4 <read_register16>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	f43f af56 	beq.w	8005086 <bmp280_init+0x10>
			&& read_register16(dev, 0xe5, &h5)
 80051da:	f10d 0206 	add.w	r2, sp, #6
 80051de:	21e5      	movs	r1, #229	; 0xe5
 80051e0:	4620      	mov	r0, r4
 80051e2:	f7ff ff07 	bl	8004ff4 <read_register16>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	f43f af4d 	beq.w	8005086 <bmp280_init+0x10>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80051ec:	2301      	movs	r3, #1
 80051ee:	f104 0222 	add.w	r2, r4, #34	; 0x22
 80051f2:	21e7      	movs	r1, #231	; 0xe7
 80051f4:	4620      	mov	r0, r4
 80051f6:	f7ff fee9 	bl	8004fcc <read_data>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	f47f af43 	bne.w	8005086 <bmp280_init+0x10>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8005200:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005204:	0113      	lsls	r3, r2, #4
 8005206:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800520a:	f3c2 2203 	ubfx	r2, r2, #8, #4
 800520e:	4313      	orrs	r3, r2
 8005210:	83e3      	strh	r3, [r4, #30]
		dev->dig_H5 = h5 >> 4;
 8005212:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	8423      	strh	r3, [r4, #32]
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800521a:	7872      	ldrb	r2, [r6, #1]
 800521c:	7973      	ldrb	r3, [r6, #5]
 800521e:	0092      	lsls	r2, r2, #2
 8005220:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8005224:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8005228:	21f5      	movs	r1, #245	; 0xf5
 800522a:	4620      	mov	r0, r4
 800522c:	f7ff ff02 	bl	8005034 <write_register8>
 8005230:	2800      	cmp	r0, #0
 8005232:	f47f af28 	bne.w	8005086 <bmp280_init+0x10>
		return false;
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8005236:	7833      	ldrb	r3, [r6, #0]
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
			| (params->oversampling_pressure << 2) | (params->mode);
 8005238:	78b5      	ldrb	r5, [r6, #2]
	if (params->mode == BMP280_MODE_FORCED) {
 800523a:	2b01      	cmp	r3, #1
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800523c:	78f3      	ldrb	r3, [r6, #3]
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800523e:	bf08      	it	eq
 8005240:	7030      	strbeq	r0, [r6, #0]
			| (params->oversampling_pressure << 2) | (params->mode);
 8005242:	00ad      	lsls	r5, r5, #2
 8005244:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
 8005248:	7833      	ldrb	r3, [r6, #0]
 800524a:	431d      	orrs	r5, r3

	if (dev->id == BME280_CHIP_ID) {
 800524c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005250:	2b60      	cmp	r3, #96	; 0x60
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8005252:	b2ed      	uxtb	r5, r5
	if (dev->id == BME280_CHIP_ID) {
 8005254:	d009      	beq.n	800526a <bmp280_init+0x1f4>
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
			return false;
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8005256:	462a      	mov	r2, r5
 8005258:	21f4      	movs	r1, #244	; 0xf4
 800525a:	4620      	mov	r0, r4
 800525c:	f7ff feea 	bl	8005034 <write_register8>
 8005260:	fab0 f080 	clz	r0, r0
 8005264:	0940      	lsrs	r0, r0, #5
		return false;
	}

	return true;
}
 8005266:	b002      	add	sp, #8
 8005268:	bd70      	pop	{r4, r5, r6, pc}
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800526a:	7932      	ldrb	r2, [r6, #4]
 800526c:	21f2      	movs	r1, #242	; 0xf2
 800526e:	4620      	mov	r0, r4
 8005270:	f7ff fee0 	bl	8005034 <write_register8>
 8005274:	2800      	cmp	r0, #0
 8005276:	d0ee      	beq.n	8005256 <bmp280_init+0x1e0>
 8005278:	e705      	b.n	8005086 <bmp280_init+0x10>

0800527a <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800527a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527e:	461d      	mov	r5, r3
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8005280:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
		uint32_t *humidity) {
 8005284:	b089      	sub	sp, #36	; 0x24
	if (dev->id != BME280_CHIP_ID) {
 8005286:	2b60      	cmp	r3, #96	; 0x60
		uint32_t *humidity) {
 8005288:	4604      	mov	r4, r0
 800528a:	460e      	mov	r6, r1
 800528c:	9205      	str	r2, [sp, #20]
	if (dev->id != BME280_CHIP_ID) {
 800528e:	d005      	beq.n	800529c <bmp280_read_fixed+0x22>
		if (humidity)
 8005290:	b115      	cbz	r5, 8005298 <bmp280_read_fixed+0x1e>
			*humidity = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	602b      	str	r3, [r5, #0]
 8005296:	461d      	mov	r5, r3
		humidity = NULL;
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8005298:	2306      	movs	r3, #6
 800529a:	e003      	b.n	80052a4 <bmp280_read_fixed+0x2a>
 800529c:	2d00      	cmp	r5, #0
 800529e:	bf0c      	ite	eq
 80052a0:	2306      	moveq	r3, #6
 80052a2:	2308      	movne	r3, #8
	if (read_data(dev, 0xf7, data, size)) {
 80052a4:	aa06      	add	r2, sp, #24
 80052a6:	21f7      	movs	r1, #247	; 0xf7
 80052a8:	4620      	mov	r0, r4
 80052aa:	f7ff fe8f 	bl	8004fcc <read_data>
 80052ae:	4686      	mov	lr, r0
 80052b0:	2800      	cmp	r0, #0
 80052b2:	f040 8123 	bne.w	80054fc <bmp280_read_fixed+0x282>
		return false;
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80052b6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80052ba:	9303      	str	r3, [sp, #12]
 80052bc:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80052c0:	9304      	str	r3, [sp, #16]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80052c2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80052c6:	f89d 201b 	ldrb.w	r2, [sp, #27]
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80052ca:	8821      	ldrh	r1, [r4, #0]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80052cc:	f89d c01a 	ldrb.w	ip, [sp, #26]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80052d6:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80052da:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80052de:	ebc1 1213 	rsb	r2, r1, r3, lsr #4
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80052e2:	0049      	lsls	r1, r1, #1
 80052e4:	ebc1 03d3 	rsb	r3, r1, r3, lsr #3
			* (int32_t) dev->dig_T2) >> 11;
 80052e8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80052ec:	4352      	muls	r2, r2
			* (int32_t) dev->dig_T2) >> 11;
 80052ee:	434b      	muls	r3, r1
			* (int32_t) dev->dig_T3) >> 14;
 80052f0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80052f4:	1312      	asrs	r2, r2, #12
			* (int32_t) dev->dig_T3) >> 14;
 80052f6:	434a      	muls	r2, r1
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80052f8:	1392      	asrs	r2, r2, #14
	*fine_temp = var1 + var2;
 80052fa:	eb02 23e3 	add.w	r3, r2, r3, asr #11
 80052fe:	9302      	str	r3, [sp, #8]
	return (*fine_temp * 5 + 128) >> 8;
 8005300:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005304:	3380      	adds	r3, #128	; 0x80
 8005306:	121b      	asrs	r3, r3, #8

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8005308:	6033      	str	r3, [r6, #0]
	var1 = (int64_t) fine_temp - 128000;
 800530a:	9b02      	ldr	r3, [sp, #8]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800530c:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
	var1 = (int64_t) fine_temp - 128000;
 8005310:	f5b3 3afa 	subs.w	sl, r3, #128000	; 0x1f400
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8005314:	fbaa 120a 	umull	r1, r2, sl, sl
 8005318:	e88d 0006 	stmia.w	sp, {r1, r2}
	var1 = (int64_t) fine_temp - 128000;
 800531c:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8005320:	f14b 3bff 	adc.w	fp, fp, #4294967295
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8005324:	9a01      	ldr	r2, [sp, #4]
 8005326:	fb0a f30b 	mul.w	r3, sl, fp
 800532a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800532e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8005332:	9301      	str	r3, [sp, #4]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8005334:	fb02 f10b 	mul.w	r1, r2, fp
 8005338:	17d3      	asrs	r3, r2, #31
 800533a:	fb0a 1103 	mla	r1, sl, r3, r1
 800533e:	fba2 230a 	umull	r2, r3, r2, sl
 8005342:	440b      	add	r3, r1
 8005344:	ea4f 3903 	mov.w	r9, r3, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8005348:	9b01      	ldr	r3, [sp, #4]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800534a:	ea4f 3802 	mov.w	r8, r2, lsl #12
 800534e:	ea49 5912 	orr.w	r9, r9, r2, lsr #20
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8005352:	9a00      	ldr	r2, [sp, #0]
 8005354:	17f7      	asrs	r7, r6, #31
 8005356:	4373      	muls	r3, r6
 8005358:	fb02 3307 	mla	r3, r2, r7, r3
 800535c:	fba6 6702 	umull	r6, r7, r6, r2
 8005360:	441f      	add	r7, r3
 8005362:	0a32      	lsrs	r2, r6, #8
 8005364:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 8005368:	eb12 0208 	adds.w	r2, r2, r8
 800536c:	ea4f 2327 	mov.w	r3, r7, asr #8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8005370:	f8b4 8006 	ldrh.w	r8, [r4, #6]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8005374:	eb43 0309 	adc.w	r3, r3, r9
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8005378:	3200      	adds	r2, #0
 800537a:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 800537e:	fba2 6708 	umull	r6, r7, r2, r8
 8005382:	fb08 7703 	mla	r7, r8, r3, r7
 8005386:	1078      	asrs	r0, r7, #1
 8005388:	17f9      	asrs	r1, r7, #31
	if (var1 == 0) {
 800538a:	ea50 0301 	orrs.w	r3, r0, r1
 800538e:	d079      	beq.n	8005484 <bmp280_read_fixed+0x20a>
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8005390:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 8005394:	9b01      	ldr	r3, [sp, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8005396:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800539a:	9a00      	ldr	r2, [sp, #0]
 800539c:	4373      	muls	r3, r6
 800539e:	17f7      	asrs	r7, r6, #31
 80053a0:	fb02 3707 	mla	r7, r2, r7, r3
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80053a4:	ea4f 79e8 	mov.w	r9, r8, asr #31
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80053a8:	fba6 2302 	umull	r2, r3, r6, r2
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80053ac:	fb08 f60b 	mul.w	r6, r8, fp
 80053b0:	fb0a 6609 	mla	r6, sl, r9, r6
 80053b4:	fba8 890a 	umull	r8, r9, r8, sl
 80053b8:	44b1      	add	r9, r6
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80053ba:	443b      	add	r3, r7
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80053bc:	ea4f 4648 	mov.w	r6, r8, lsl #17
 80053c0:	ea4f 4749 	mov.w	r7, r9, lsl #17
 80053c4:	18b6      	adds	r6, r6, r2
 80053c6:	ea47 37d8 	orr.w	r7, r7, r8, lsr #15
 80053ca:	415f      	adcs	r7, r3
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80053cc:	9b04      	ldr	r3, [sp, #16]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80053ce:	f9b4 a00c 	ldrsh.w	sl, [r4, #12]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80053d2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80053d6:	ea4c 1c03 	orr.w	ip, ip, r3, lsl #4
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	ea4c 3c03 	orr.w	ip, ip, r3, lsl #12
	p = 1048576 - adc_press;
 80053e0:	f5cc 1c80 	rsb	ip, ip, #1048576	; 0x100000
 80053e4:	ea4f 79ec 	mov.w	r9, ip, asr #31
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80053e8:	eb16 060e 	adds.w	r6, r6, lr
	p = (((p << 31) - var2) * 3125) / var1;
 80053ec:	ea4f 72cc 	mov.w	r2, ip, lsl #31
 80053f0:	ea4f 73c9 	mov.w	r3, r9, lsl #31
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80053f4:	ea4f 09ca 	mov.w	r9, sl, lsl #3
	p = (((p << 31) - var2) * 3125) / var1;
 80053f8:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80053fc:	eb47 0709 	adc.w	r7, r7, r9
	p = (((p << 31) - var2) * 3125) / var1;
 8005400:	1b96      	subs	r6, r2, r6
 8005402:	eb63 0707 	sbc.w	r7, r3, r7
 8005406:	f640 4335 	movw	r3, #3125	; 0xc35
 800540a:	fba6 ab03 	umull	sl, fp, r6, r3
 800540e:	fb03 bb07 	mla	fp, r3, r7, fp
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4650      	mov	r0, sl
 8005418:	4659      	mov	r1, fp
 800541a:	f7fb fc11 	bl	8000c40 <__aeabi_ldivmod>
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800541e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8005422:	134e      	asrs	r6, r1, #13
 8005424:	0b47      	lsrs	r7, r0, #13
 8005426:	ea47 47c1 	orr.w	r7, r7, r1, lsl #19
 800542a:	fb02 fe06 	mul.w	lr, r2, r6
 800542e:	17d3      	asrs	r3, r2, #31
 8005430:	fb07 ee03 	mla	lr, r7, r3, lr
 8005434:	fba2 2307 	umull	r2, r3, r2, r7
 8005438:	4473      	add	r3, lr
 800543a:	4356      	muls	r6, r2
 800543c:	fb07 6603 	mla	r6, r7, r3, r6
 8005440:	fba2 2307 	umull	r2, r3, r2, r7
 8005444:	4433      	add	r3, r6
 8005446:	0e56      	lsrs	r6, r2, #25
 8005448:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800544c:	1832      	adds	r2, r6, r0
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800544e:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8005452:	ea4f 6763 	mov.w	r7, r3, asr #25
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8005456:	eb47 0301 	adc.w	r3, r7, r1
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800545a:	4371      	muls	r1, r6
 800545c:	17f7      	asrs	r7, r6, #31
 800545e:	fb00 1707 	mla	r7, r0, r7, r1
 8005462:	fba6 0100 	umull	r0, r1, r6, r0
 8005466:	4439      	add	r1, r7
 8005468:	0cc6      	lsrs	r6, r0, #19
 800546a:	ea46 3641 	orr.w	r6, r6, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800546e:	1992      	adds	r2, r2, r6
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8005470:	ea4f 47e1 	mov.w	r7, r1, asr #19
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8005474:	f9b4 6012 	ldrsh.w	r6, [r4, #18]
 8005478:	417b      	adcs	r3, r7
 800547a:	0a10      	lsrs	r0, r2, #8
 800547c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8005480:	0132      	lsls	r2, r6, #4
 8005482:	1880      	adds	r0, r0, r2
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8005484:	9b05      	ldr	r3, [sp, #20]
 8005486:	6018      	str	r0, [r3, #0]

	if (humidity) {
 8005488:	b3b5      	cbz	r5, 80054f8 <bmp280_read_fixed+0x27e>
	v_x1_u32r = fine_temp - (int32_t) 76800;
 800548a:	9b02      	ldr	r3, [sp, #8]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800548c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
	v_x1_u32r = fine_temp - (int32_t) 76800;
 8005490:	f5a3 3296 	sub.w	r2, r3, #76800	; 0x12c00
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8005494:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 8005498:	ba49      	rev16	r1, r1
 800549a:	051b      	lsls	r3, r3, #20
 800549c:	b289      	uxth	r1, r1
 800549e:	ebc3 3181 	rsb	r1, r3, r1, lsl #14
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80054a2:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 80054a6:	fb02 1313 	mls	r3, r2, r3, r1
 80054aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80054ae:	13d9      	asrs	r1, r3, #15
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80054b0:	7f23      	ldrb	r3, [r4, #28]
 80054b2:	4353      	muls	r3, r2
 80054b4:	12db      	asrs	r3, r3, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80054b6:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80054ba:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 80054be:	4353      	muls	r3, r2
 80054c0:	129b      	asrs	r3, r3, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80054c2:	4343      	muls	r3, r0
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80054c4:	129b      	asrs	r3, r3, #10
 80054c6:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80054ca:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80054ce:	4353      	muls	r3, r2
 80054d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054d4:	139b      	asrs	r3, r3, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80054d6:	434b      	muls	r3, r1
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80054d8:	13da      	asrs	r2, r3, #15
					* (int32_t) dev->dig_H1) >> 4);
 80054da:	7e21      	ldrb	r1, [r4, #24]
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80054dc:	4352      	muls	r2, r2
 80054de:	11d2      	asrs	r2, r2, #7
					* (int32_t) dev->dig_H1) >> 4);
 80054e0:	434a      	muls	r2, r1
	v_x1_u32r = v_x1_u32r
 80054e2:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80054e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80054ea:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80054ee:	bfa8      	it	ge
 80054f0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	return v_x1_u32r >> 12;
 80054f4:	131b      	asrs	r3, r3, #12
		int32_t adc_humidity = data[6] << 8 | data[7];
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80054f6:	602b      	str	r3, [r5, #0]
	}

	return true;
 80054f8:	2001      	movs	r0, #1
 80054fa:	e000      	b.n	80054fe <bmp280_read_fixed+0x284>
		return false;
 80054fc:	2000      	movs	r0, #0
}
 80054fe:	b009      	add	sp, #36	; 0x24
 8005500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005504 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8005504:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005506:	460e      	mov	r6, r1
 8005508:	4615      	mov	r5, r2
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800550a:	461c      	mov	r4, r3
 800550c:	b9eb      	cbnz	r3, 800554a <bmp280_read_float+0x46>
 800550e:	aa02      	add	r2, sp, #8
 8005510:	a901      	add	r1, sp, #4
 8005512:	f7ff feb2 	bl	800527a <bmp280_read_fixed>
 8005516:	b1b0      	cbz	r0, 8005546 <bmp280_read_float+0x42>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8005518:	eddd 7a01 	vldr	s15, [sp, #4]
 800551c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8005550 <bmp280_read_float+0x4c>
 8005520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005524:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		*pressure = (float) fixed_pressure / 256;
 8005528:	eddd 7a02 	vldr	s15, [sp, #8]
		*temperature = (float) fixed_temperature / 100;
 800552c:	ed86 7a00 	vstr	s14, [r6]
		*pressure = (float) fixed_pressure / 256;
 8005530:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
 8005534:	edc5 7a00 	vstr	s15, [r5]
		if (humidity)
 8005538:	b12c      	cbz	r4, 8005546 <bmp280_read_float+0x42>
			*humidity = (float) fixed_humidity / 1024;
 800553a:	eddd 7a03 	vldr	s15, [sp, #12]
 800553e:	eefb 7acb 	vcvt.f32.u32	s15, s15, #10
 8005542:	edc4 7a00 	vstr	s15, [r4]
		return true;
	}

	return false;
}
 8005546:	b004      	add	sp, #16
 8005548:	bd70      	pop	{r4, r5, r6, pc}
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800554a:	ab03      	add	r3, sp, #12
 800554c:	e7df      	b.n	800550e <bmp280_read_float+0xa>
 800554e:	bf00      	nop
 8005550:	42c80000 	.word	0x42c80000

08005554 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8005554:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8005556:	2001      	movs	r0, #1
 8005558:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800555c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005560:	4283      	cmp	r3, r0
 8005562:	d10b      	bne.n	800557c <BSP_SD_Init+0x28>
  sd_state = HAL_SD_Init(&hsd);
 8005564:	4807      	ldr	r0, [pc, #28]	; (8005584 <BSP_SD_Init+0x30>)
 8005566:	f7fd f9d9 	bl	800291c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800556a:	b938      	cbnz	r0, 800557c <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800556c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005570:	4804      	ldr	r0, [pc, #16]	; (8005584 <BSP_SD_Init+0x30>)
 8005572:	f7fd fa01 	bl	8002978 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8005576:	3000      	adds	r0, #0
 8005578:	bf18      	it	ne
 800557a:	2001      	movne	r0, #1
}
 800557c:	b003      	add	sp, #12
 800557e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005582:	bf00      	nop
 8005584:	200013c8 	.word	0x200013c8

08005588 <BSP_SD_ReadBlocks>:
{
 8005588:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	460a      	mov	r2, r1
 8005590:	4601      	mov	r1, r0
 8005592:	4804      	ldr	r0, [pc, #16]	; (80055a4 <BSP_SD_ReadBlocks+0x1c>)
 8005594:	f7fc fe28 	bl	80021e8 <HAL_SD_ReadBlocks>
}
 8005598:	3000      	adds	r0, #0
 800559a:	bf18      	it	ne
 800559c:	2001      	movne	r0, #1
 800559e:	b003      	add	sp, #12
 80055a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80055a4:	200013c8 	.word	0x200013c8

080055a8 <BSP_SD_WriteBlocks>:
{
 80055a8:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	460a      	mov	r2, r1
 80055b0:	4601      	mov	r1, r0
 80055b2:	4804      	ldr	r0, [pc, #16]	; (80055c4 <BSP_SD_WriteBlocks+0x1c>)
 80055b4:	f7fc ff2a 	bl	800240c <HAL_SD_WriteBlocks>
}
 80055b8:	3000      	adds	r0, #0
 80055ba:	bf18      	it	ne
 80055bc:	2001      	movne	r0, #1
 80055be:	b003      	add	sp, #12
 80055c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80055c4:	200013c8 	.word	0x200013c8

080055c8 <BSP_SD_GetCardState>:
{
 80055c8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80055ca:	4803      	ldr	r0, [pc, #12]	; (80055d8 <BSP_SD_GetCardState+0x10>)
 80055cc:	f7fd fa5a 	bl	8002a84 <HAL_SD_GetCardState>
}
 80055d0:	3804      	subs	r0, #4
 80055d2:	bf18      	it	ne
 80055d4:	2001      	movne	r0, #1
 80055d6:	bd08      	pop	{r3, pc}
 80055d8:	200013c8 	.word	0x200013c8

080055dc <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80055dc:	4601      	mov	r1, r0
 80055de:	4801      	ldr	r0, [pc, #4]	; (80055e4 <BSP_SD_GetCardInfo+0x8>)
 80055e0:	f7fd b9b7 	b.w	8002952 <HAL_SD_GetCardInfo>
 80055e4:	200013c8 	.word	0x200013c8

080055e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80055e8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80055ea:	4903      	ldr	r1, [pc, #12]	; (80055f8 <MX_FATFS_Init+0x10>)
 80055ec:	4803      	ldr	r0, [pc, #12]	; (80055fc <MX_FATFS_Init+0x14>)
 80055ee:	f7ff f9b1 	bl	8004954 <FATFS_LinkDriver>
 80055f2:	4b03      	ldr	r3, [pc, #12]	; (8005600 <MX_FATFS_Init+0x18>)
 80055f4:	7018      	strb	r0, [r3, #0]
 80055f6:	bd08      	pop	{r3, pc}
 80055f8:	20000245 	.word	0x20000245
 80055fc:	08008d4c 	.word	0x08008d4c
 8005600:	20000244 	.word	0x20000244

08005604 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8005604:	2000      	movs	r0, #0
 8005606:	4770      	bx	lr

08005608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800560c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800560e:	4b28      	ldr	r3, [pc, #160]	; (80056b0 <MX_GPIO_Init+0xa8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005610:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80056b8 <MX_GPIO_Init+0xb0>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8005614:	4d27      	ldr	r5, [pc, #156]	; (80056b4 <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005616:	2400      	movs	r4, #0
 8005618:	9401      	str	r4, [sp, #4]
 800561a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
 8005622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005624:	f002 0201 	and.w	r2, r2, #1
 8005628:	9201      	str	r2, [sp, #4]
 800562a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800562c:	9402      	str	r4, [sp, #8]
 800562e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005630:	f042 0204 	orr.w	r2, r2, #4
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
 8005636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005638:	f002 0204 	and.w	r2, r2, #4
 800563c:	9202      	str	r2, [sp, #8]
 800563e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005640:	9403      	str	r4, [sp, #12]
 8005642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005644:	f042 0208 	orr.w	r2, r2, #8
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
 800564a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564c:	f002 0208 	and.w	r2, r2, #8
 8005650:	9203      	str	r2, [sp, #12]
 8005652:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005654:	9404      	str	r4, [sp, #16]
 8005656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005658:	f042 0202 	orr.w	r2, r2, #2
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005666:	4640      	mov	r0, r8
 8005668:	2201      	movs	r2, #1
 800566a:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800566c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800566e:	f7fb fe91 	bl	8001394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8005672:	2201      	movs	r2, #1
 8005674:	4628      	mov	r0, r5
 8005676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800567a:	f7fb fe8b 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800567e:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005680:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005682:	2603      	movs	r6, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005684:	a905      	add	r1, sp, #20
 8005686:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005688:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800568a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800568e:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005690:	f7fb fda0 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005694:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005698:	a905      	add	r1, sp, #20
 800569a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800569c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800569e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056a2:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056a4:	f7fb fd96 	bl	80011d4 <HAL_GPIO_Init>

}
 80056a8:	b00a      	add	sp, #40	; 0x28
 80056aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ae:	bf00      	nop
 80056b0:	40023800 	.word	0x40023800
 80056b4:	40020400 	.word	0x40020400
 80056b8:	40020000 	.word	0x40020000

080056bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80056bc:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80056be:	480e      	ldr	r0, [pc, #56]	; (80056f8 <MX_I2C1_Init+0x3c>)
  hi2c1.Init.ClockSpeed = 100000;
 80056c0:	4b0e      	ldr	r3, [pc, #56]	; (80056fc <MX_I2C1_Init+0x40>)
 80056c2:	f8df e040 	ldr.w	lr, [pc, #64]	; 8005704 <MX_I2C1_Init+0x48>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 80056ca:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80056ce:	2300      	movs	r3, #0
 80056d0:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80056d2:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056d4:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
  hi2c1.Init.OwnAddress2 = 0;
 80056d6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80056d8:	2201      	movs	r2, #1
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056da:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80056dc:	2380      	movs	r3, #128	; 0x80
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80056de:	6142      	str	r2, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80056e0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80056e2:	f7fc f83d 	bl	8001760 <HAL_I2C_Init>
 80056e6:	b128      	cbz	r0, 80056f4 <MX_I2C1_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 80056e8:	214c      	movs	r1, #76	; 0x4c
 80056ea:	4805      	ldr	r0, [pc, #20]	; (8005700 <MX_I2C1_Init+0x44>)
  }

}
 80056ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80056f0:	f000 ba4a 	b.w	8005b88 <_Error_Handler>
 80056f4:	bd08      	pop	{r3, pc}
 80056f6:	bf00      	nop
 80056f8:	200006ac 	.word	0x200006ac
 80056fc:	40005400 	.word	0x40005400
 8005700:	08008ca7 	.word	0x08008ca7
 8005704:	000186a0 	.word	0x000186a0

08005708 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005708:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800570a:	6802      	ldr	r2, [r0, #0]
 800570c:	4b10      	ldr	r3, [pc, #64]	; (8005750 <HAL_I2C_MspInit+0x48>)
 800570e:	429a      	cmp	r2, r3
 8005710:	d11a      	bne.n	8005748 <HAL_I2C_MspInit+0x40>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005712:	23c0      	movs	r3, #192	; 0xc0
 8005714:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005716:	2312      	movs	r3, #18
 8005718:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800571a:	2301      	movs	r3, #1
 800571c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800571e:	2303      	movs	r3, #3
 8005720:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005722:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005724:	eb0d 0103 	add.w	r1, sp, r3
 8005728:	480a      	ldr	r0, [pc, #40]	; (8005754 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800572a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800572c:	f7fb fd52 	bl	80011d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005730:	2300      	movs	r3, #0
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	4b08      	ldr	r3, [pc, #32]	; (8005758 <HAL_I2C_MspInit+0x50>)
 8005736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005738:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800573c:	641a      	str	r2, [r3, #64]	; 0x40
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005748:	b007      	add	sp, #28
 800574a:	f85d fb04 	ldr.w	pc, [sp], #4
 800574e:	bf00      	nop
 8005750:	40005400 	.word	0x40005400
 8005754:	40020400 	.word	0x40020400
 8005758:	40023800 	.word	0x40023800

0800575c <i2cWrite>:
	}
    HAL_UART_Receive_IT(&huart4, &rxTmp, 1);
  }
}

int8_t i2cWrite(uint8_t addr, uint8_t reg, uint8_t *data, uint16_t len) {
 800575c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, addr << 1, reg, 1, (uint8_t*)data, len, 1000);
 800575e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005762:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8005766:	2301      	movs	r3, #1
 8005768:	460a      	mov	r2, r1
 800576a:	fa00 f103 	lsl.w	r1, r0, r3
 800576e:	4803      	ldr	r0, [pc, #12]	; (800577c <i2cWrite+0x20>)
 8005770:	f7fc f8a2 	bl	80018b8 <HAL_I2C_Mem_Write>
	return status;
}
 8005774:	b240      	sxtb	r0, r0
 8005776:	b004      	add	sp, #16
 8005778:	bd10      	pop	{r4, pc}
 800577a:	bf00      	nop
 800577c:	200006ac 	.word	0x200006ac

08005780 <i2cRead>:

int8_t i2cRead(uint8_t addr, uint8_t reg, uint8_t *data, uint16_t len) {
 8005780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, addr << 1, reg, 1, (uint8_t*)data, len, 1000);
 8005782:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005786:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 800578a:	2301      	movs	r3, #1
 800578c:	460a      	mov	r2, r1
 800578e:	fa00 f103 	lsl.w	r1, r0, r3
 8005792:	4803      	ldr	r0, [pc, #12]	; (80057a0 <i2cRead+0x20>)
 8005794:	f7fc f920 	bl	80019d8 <HAL_I2C_Mem_Read>
	return status;
}
 8005798:	b240      	sxtb	r0, r0
 800579a:	b004      	add	sp, #16
 800579c:	bd10      	pop	{r4, pc}
 800579e:	bf00      	nop
 80057a0:	200006ac 	.word	0x200006ac

080057a4 <HAL_UART_RxCpltCallback>:
  if(huart == &huart4) {
 80057a4:	4b09      	ldr	r3, [pc, #36]	; (80057cc <HAL_UART_RxCpltCallback+0x28>)
 80057a6:	4283      	cmp	r3, r0
 80057a8:	d10f      	bne.n	80057ca <HAL_UART_RxCpltCallback+0x26>
	if(rxIndex < 512) {
 80057aa:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <HAL_UART_RxCpltCallback+0x2c>)
 80057ac:	8813      	ldrh	r3, [r2, #0]
 80057ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b2:	d205      	bcs.n	80057c0 <HAL_UART_RxCpltCallback+0x1c>
	  rxBuffer[rxIndex] = rxTmp;
 80057b4:	4907      	ldr	r1, [pc, #28]	; (80057d4 <HAL_UART_RxCpltCallback+0x30>)
 80057b6:	7808      	ldrb	r0, [r1, #0]
 80057b8:	4907      	ldr	r1, [pc, #28]	; (80057d8 <HAL_UART_RxCpltCallback+0x34>)
 80057ba:	54c8      	strb	r0, [r1, r3]
	  rxIndex++;
 80057bc:	3301      	adds	r3, #1
 80057be:	8013      	strh	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart4, &rxTmp, 1);
 80057c0:	2201      	movs	r2, #1
 80057c2:	4904      	ldr	r1, [pc, #16]	; (80057d4 <HAL_UART_RxCpltCallback+0x30>)
 80057c4:	4801      	ldr	r0, [pc, #4]	; (80057cc <HAL_UART_RxCpltCallback+0x28>)
 80057c6:	f7fd ba57 	b.w	8002c78 <HAL_UART_Receive_IT>
 80057ca:	4770      	bx	lr
 80057cc:	200014e4 	.word	0x200014e4
 80057d0:	200013c2 	.word	0x200013c2
 80057d4:	200012f8 	.word	0x200012f8
 80057d8:	200010f8 	.word	0x200010f8

080057dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80057dc:	b510      	push	{r4, lr}
 80057de:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80057e0:	2300      	movs	r3, #0
 80057e2:	4a25      	ldr	r2, [pc, #148]	; (8005878 <SystemClock_Config+0x9c>)
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80057e8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80057ec:	6411      	str	r1, [r2, #64]	; 0x40
 80057ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057f0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80057f4:	9201      	str	r2, [sp, #4]
 80057f6:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80057f8:	4a20      	ldr	r2, [pc, #128]	; (800587c <SystemClock_Config+0xa0>)
 80057fa:	9302      	str	r3, [sp, #8]
 80057fc:	6811      	ldr	r1, [r2, #0]
 80057fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8005802:	6011      	str	r1, [r2, #0]
 8005804:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005806:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005808:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800580c:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 192;
 800580e:	23c0      	movs	r3, #192	; 0xc0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005810:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLN = 192;
 8005812:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005814:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005816:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005818:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800581a:	2307      	movs	r3, #7
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800581c:	2210      	movs	r2, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800581e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005820:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8005822:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005824:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005826:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005828:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800582a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800582c:	f7fc f9e0 	bl	8001bf0 <HAL_RCC_OscConfig>
 8005830:	b100      	cbz	r0, 8005834 <SystemClock_Config+0x58>
 8005832:	e7fe      	b.n	8005832 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005834:	230f      	movs	r3, #15
 8005836:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005838:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800583a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800583e:	2103      	movs	r1, #3
 8005840:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005842:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005844:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8005846:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005848:	f7fc fba6 	bl	8001f98 <HAL_RCC_ClockConfig>
 800584c:	4604      	mov	r4, r0
 800584e:	b100      	cbz	r0, 8005852 <SystemClock_Config+0x76>
 8005850:	e7fe      	b.n	8005850 <SystemClock_Config+0x74>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005852:	f7fc fc3d 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 8005856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800585a:	fbb0 f0f3 	udiv	r0, r0, r3
 800585e:	f7fb fc7f 	bl	8001160 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005862:	2004      	movs	r0, #4
 8005864:	f7fb fc92 	bl	800118c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005868:	4622      	mov	r2, r4
 800586a:	4621      	mov	r1, r4
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	f7fb fc34 	bl	80010dc <HAL_NVIC_SetPriority>
}
 8005874:	b014      	add	sp, #80	; 0x50
 8005876:	bd10      	pop	{r4, pc}
 8005878:	40023800 	.word	0x40023800
 800587c:	40007000 	.word	0x40007000

08005880 <main>:
{
 8005880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005884:	ed2d 8b08 	vpush	{d8-d11}
  bmi160.id = BMI160_I2C_ADDR;
 8005888:	4c9f      	ldr	r4, [pc, #636]	; (8005b08 <main+0x288>)
  bmp280_read_float(&bmp280, NULL, &s_pres, NULL);
 800588a:	4ea0      	ldr	r6, [pc, #640]	; (8005b0c <main+0x28c>)
  s_pres /= 133.322F; // to mm Hg
 800588c:	ed9f baa0 	vldr	s22, [pc, #640]	; 8005b10 <main+0x290>
	  	result = bmi160_get_sensor_data(BMI160_ACCEL_SEL | BMI160_GYRO_SEL, &bmi160Accel, &bmi160Gyro, &bmi160);
 8005890:	4fa0      	ldr	r7, [pc, #640]	; (8005b14 <main+0x294>)
    	sprintf(
 8005892:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 8005b78 <main+0x2f8>
    	f_mount(&fs, "", 0);
 8005896:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8005b7c <main+0x2fc>
{
 800589a:	b09d      	sub	sp, #116	; 0x74
  HAL_Init();
 800589c:	f7fb fbcc 	bl	8001038 <HAL_Init>
  SystemClock_Config();
 80058a0:	f7ff ff9c 	bl	80057dc <SystemClock_Config>
  MX_GPIO_Init();
 80058a4:	f7ff feb0 	bl	8005608 <MX_GPIO_Init>
  MX_I2C1_Init();
 80058a8:	f7ff ff08 	bl	80056bc <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80058ac:	f000 f9d6 	bl	8005c5c <MX_SDIO_SD_Init>
  MX_UART4_Init();
 80058b0:	f000 fab8 	bl	8005e24 <MX_UART4_Init>
  MX_FATFS_Init();
 80058b4:	f7ff fe98 	bl	80055e8 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80058b8:	f000 fad4 	bl	8005e64 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80058bc:	f000 fa12 	bl	8005ce4 <MX_SPI1_Init>
  bmi160.id = BMI160_I2C_ADDR;
 80058c0:	2368      	movs	r3, #104	; 0x68
 80058c2:	7063      	strb	r3, [r4, #1]
  bmi160.read = i2cRead;
 80058c4:	4b94      	ldr	r3, [pc, #592]	; (8005b18 <main+0x298>)
 80058c6:	61e3      	str	r3, [r4, #28]
  bmi160.write = i2cWrite;
 80058c8:	4b94      	ldr	r3, [pc, #592]	; (8005b1c <main+0x29c>)
 80058ca:	6223      	str	r3, [r4, #32]
  bmi160.interface = BMI160_I2C_INTF;
 80058cc:	2500      	movs	r5, #0
  bmi160.delay_ms = HAL_Delay;
 80058ce:	4b94      	ldr	r3, [pc, #592]	; (8005b20 <main+0x2a0>)
 80058d0:	6263      	str	r3, [r4, #36]	; 0x24
  result = bmi160_init(&bmi160);
 80058d2:	4620      	mov	r0, r4
  bmi160.interface = BMI160_I2C_INTF;
 80058d4:	70a5      	strb	r5, [r4, #2]
  result = bmi160_init(&bmi160);
 80058d6:	f7ff f901 	bl	8004adc <bmi160_init>
  bmi160.accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
 80058da:	230c      	movs	r3, #12
 80058dc:	7163      	strb	r3, [r4, #5]
  bmi160.accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 80058de:	2303      	movs	r3, #3
 80058e0:	71a3      	strb	r3, [r4, #6]
  bmi160.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80058e2:	2211      	movs	r2, #17
  bmi160.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 80058e4:	2302      	movs	r3, #2
 80058e6:	71e3      	strb	r3, [r4, #7]
  bmi160.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80058e8:	7122      	strb	r2, [r4, #4]
  bmi160.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 80058ea:	73e3      	strb	r3, [r4, #15]
  bmi160.gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
 80058ec:	220d      	movs	r2, #13
  bmi160.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 80058ee:	2315      	movs	r3, #21
  result = bmi160_set_sens_conf(&bmi160);
 80058f0:	4620      	mov	r0, r4
  bmi160.gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
 80058f2:	7362      	strb	r2, [r4, #13]
  bmi160.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 80058f4:	7323      	strb	r3, [r4, #12]
  bmi160.gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 80058f6:	73a5      	strb	r5, [r4, #14]
  result = bmi160_set_sens_conf(&bmi160);
 80058f8:	f7ff f9a8 	bl	8004c4c <bmi160_set_sens_conf>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 80058fc:	4c89      	ldr	r4, [pc, #548]	; (8005b24 <main+0x2a4>)
  bmp280_init_default_params(&bmp280.params);
 80058fe:	488a      	ldr	r0, [pc, #552]	; (8005b28 <main+0x2a8>)
 8005900:	f7ff fbb0 	bl	8005064 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8005904:	2376      	movs	r3, #118	; 0x76
  bmp280_init(&bmp280, &bmp280.params);
 8005906:	f104 012c 	add.w	r1, r4, #44	; 0x2c
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 800590a:	84a3      	strh	r3, [r4, #36]	; 0x24
  bmp280_init(&bmp280, &bmp280.params);
 800590c:	4620      	mov	r0, r4
  bmp280.i2c = &hi2c1;
 800590e:	4b87      	ldr	r3, [pc, #540]	; (8005b2c <main+0x2ac>)
 8005910:	62a3      	str	r3, [r4, #40]	; 0x28
  bmp280_init(&bmp280, &bmp280.params);
 8005912:	f7ff fbb0 	bl	8005076 <bmp280_init>
  HAL_Delay(100);
 8005916:	2064      	movs	r0, #100	; 0x64
 8005918:	f7fb fbba 	bl	8001090 <HAL_Delay>
  bmp280_read_float(&bmp280, NULL, &s_pres, NULL);
 800591c:	462b      	mov	r3, r5
 800591e:	4632      	mov	r2, r6
 8005920:	4629      	mov	r1, r5
 8005922:	4620      	mov	r0, r4
 8005924:	f7ff fdee 	bl	8005504 <bmp280_read_float>
  s_pres /= 133.322F; // to mm Hg
 8005928:	ed96 7a00 	vldr	s14, [r6]
 800592c:	eec7 7a0b 	vdiv.f32	s15, s14, s22
 8005930:	edc6 7a00 	vstr	s15, [r6]
	  	result = bmi160_get_sensor_data(BMI160_ACCEL_SEL | BMI160_GYRO_SEL, &bmi160Accel, &bmi160Gyro, &bmi160);
 8005934:	4c7e      	ldr	r4, [pc, #504]	; (8005b30 <main+0x2b0>)
    	bmp280_read_float(&bmp280, &temp, &pres, &humi);
 8005936:	4d7f      	ldr	r5, [pc, #508]	; (8005b34 <main+0x2b4>)
 8005938:	f8df b244 	ldr.w	fp, [pc, #580]	; 8005b80 <main+0x300>
 800593c:	f8df a244 	ldr.w	sl, [pc, #580]	; 8005b84 <main+0x304>
	  	result = bmi160_get_sensor_data(BMI160_ACCEL_SEL | BMI160_GYRO_SEL, &bmi160Accel, &bmi160Gyro, &bmi160);
 8005940:	4b71      	ldr	r3, [pc, #452]	; (8005b08 <main+0x288>)
 8005942:	4a74      	ldr	r2, [pc, #464]	; (8005b14 <main+0x294>)
 8005944:	4621      	mov	r1, r4
 8005946:	2003      	movs	r0, #3
 8005948:	f7ff fa4f 	bl	8004dea <bmi160_get_sensor_data>
    	bmp280_read_float(&bmp280, &temp, &pres, &humi);
 800594c:	465b      	mov	r3, fp
 800594e:	462a      	mov	r2, r5
 8005950:	4651      	mov	r1, sl
 8005952:	4874      	ldr	r0, [pc, #464]	; (8005b24 <main+0x2a4>)
 8005954:	f7ff fdd6 	bl	8005504 <bmp280_read_float>
    	pres /= 133.322F; // to mm Hg
 8005958:	ed95 7a00 	vldr	s14, [r5]
    	alti = 44330.0F * (1.0F - powf(pres / s_pres, 1.0F / 5.255F));
 800595c:	ed96 0a00 	vldr	s0, [r6]
 8005960:	eddf 0a75 	vldr	s1, [pc, #468]	; 8005b38 <main+0x2b8>
    	pres /= 133.322F; // to mm Hg
 8005964:	eec7 7a0b 	vdiv.f32	s15, s14, s22
    	alti = 44330.0F * (1.0F - powf(pres / s_pres, 1.0F / 5.255F));
 8005968:	ee87 0a80 	vdiv.f32	s0, s15, s0
    	pres /= 133.322F; // to mm Hg
 800596c:	edc5 7a00 	vstr	s15, [r5]
    	alti = 44330.0F * (1.0F - powf(pres / s_pres, 1.0F / 5.255F));
 8005970:	f002 fb9e 	bl	80080b0 <powf>
 8005974:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005978:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800597c:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8005b3c <main+0x2bc>
 8005980:	4b6f      	ldr	r3, [pc, #444]	; (8005b40 <main+0x2c0>)
 8005982:	931b      	str	r3, [sp, #108]	; 0x6c
 8005984:	ee20 0a27 	vmul.f32	s0, s0, s15
    	rxChars = (char*)rxBuffer;
 8005988:	496e      	ldr	r1, [pc, #440]	; (8005b44 <main+0x2c4>)
    	alti = 44330.0F * (1.0F - powf(pres / s_pres, 1.0F / 5.255F));
 800598a:	ed83 0a00 	vstr	s0, [r3]
		ax = (bmi160Accel.x * 2.0F) / 32768.0F,
 800598e:	f9b4 3000 	ldrsh.w	r3, [r4]
    	rxChars = (char*)rxBuffer;
 8005992:	4a6d      	ldr	r2, [pc, #436]	; (8005b48 <main+0x2c8>)
 8005994:	600a      	str	r2, [r1, #0]
		ax = (bmi160Accel.x * 2.0F) / 32768.0F,
 8005996:	ee08 3a10 	vmov	s16, r3
		ay = (bmi160Accel.y * 2.0F) / 32768.0F,
 800599a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    	h = 0; m = 0; s = 0; ms = 0;
 800599e:	496b      	ldr	r1, [pc, #428]	; (8005b4c <main+0x2cc>)
    	pres *= 133.322F; // to Pa
 80059a0:	edd5 7a00 	vldr	s15, [r5]
		gx = (bmi160Gyro.x * 2000.0F) / 32768.0F,
 80059a4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8005b50 <main+0x2d0>
    	rxChars = (char*)rxBuffer;
 80059a8:	921a      	str	r2, [sp, #104]	; 0x68
		ay = (bmi160Accel.y * 2.0F) / 32768.0F,
 80059aa:	ee08 3a90 	vmov	s17, r3
		az = (bmi160Accel.z * 2.0F) / 32768.0F,
 80059ae:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80059b2:	ee09 3a10 	vmov	s18, r3
		gx = (bmi160Gyro.x * 2000.0F) / 32768.0F,
 80059b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80059ba:	ee09 3a90 	vmov	s19, r3
		gy = (bmi160Gyro.y * 2000.0F) / 32768.0F,
 80059be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059c2:	ee0a 3a10 	vmov	s20, r3
		gz = (bmi160Gyro.z * 2000.0F) / 32768.0F;
 80059c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    	h = 0; m = 0; s = 0; ms = 0;
 80059ca:	2400      	movs	r4, #0
		gz = (bmi160Gyro.z * 2000.0F) / 32768.0F;
 80059cc:	ee0a 3a90 	vmov	s21, r3
    	h = 0; m = 0; s = 0; ms = 0;
 80059d0:	700c      	strb	r4, [r1, #0]
 80059d2:	4960      	ldr	r1, [pc, #384]	; (8005b54 <main+0x2d4>)
    	pres *= 133.322F; // to Pa
 80059d4:	ee67 7a8b 	vmul.f32	s15, s15, s22
    	h = 0; m = 0; s = 0; ms = 0;
 80059d8:	700c      	strb	r4, [r1, #0]
		ax = (bmi160Accel.x * 2.0F) / 32768.0F,
 80059da:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    	h = 0; m = 0; s = 0; ms = 0;
 80059de:	495e      	ldr	r1, [pc, #376]	; (8005b58 <main+0x2d8>)
    	pres *= 133.322F; // to Pa
 80059e0:	edc5 7a00 	vstr	s15, [r5]
		ay = (bmi160Accel.y * 2.0F) / 32768.0F,
 80059e4:	eef8 8ae8 	vcvt.f32.s32	s17, s17
		az = (bmi160Accel.z * 2.0F) / 32768.0F,
 80059e8:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
		gx = (bmi160Gyro.x * 2000.0F) / 32768.0F,
 80059ec:	eef8 9ae9 	vcvt.f32.s32	s19, s19
		gy = (bmi160Gyro.y * 2000.0F) / 32768.0F,
 80059f0:	eeb8 aaca 	vcvt.f32.s32	s20, s20
		gz = (bmi160Gyro.z * 2000.0F) / 32768.0F;
 80059f4:	eef8 aaea 	vcvt.f32.s32	s21, s21
		ax = (bmi160Accel.x * 2.0F) / 32768.0F,
 80059f8:	eddf 7a58 	vldr	s15, [pc, #352]	; 8005b5c <main+0x2dc>
    	h = 0; m = 0; s = 0; ms = 0;
 80059fc:	700c      	strb	r4, [r1, #0]
		gx = (bmi160Gyro.x * 2000.0F) / 32768.0F,
 80059fe:	ee69 9a87 	vmul.f32	s19, s19, s14
		gy = (bmi160Gyro.y * 2000.0F) / 32768.0F,
 8005a02:	ee2a aa07 	vmul.f32	s20, s20, s14
		gz = (bmi160Gyro.z * 2000.0F) / 32768.0F;
 8005a06:	ee6a aa87 	vmul.f32	s21, s21, s14
    	h = 0; m = 0; s = 0; ms = 0;
 8005a0a:	4955      	ldr	r1, [pc, #340]	; (8005b60 <main+0x2e0>)
		ax = (bmi160Accel.x * 2.0F) / 32768.0F,
 8005a0c:	ee38 8a08 	vadd.f32	s16, s16, s16
		ay = (bmi160Accel.y * 2.0F) / 32768.0F,
 8005a10:	ee78 8aa8 	vadd.f32	s17, s17, s17
		az = (bmi160Accel.z * 2.0F) / 32768.0F,
 8005a14:	ee39 9a09 	vadd.f32	s18, s18, s18
		ax = (bmi160Accel.x * 2.0F) / 32768.0F,
 8005a18:	ee28 8a27 	vmul.f32	s16, s16, s15
		ay = (bmi160Accel.y * 2.0F) / 32768.0F,
 8005a1c:	ee68 8aa7 	vmul.f32	s17, s17, s15
		az = (bmi160Accel.z * 2.0F) / 32768.0F,
 8005a20:	ee29 9a27 	vmul.f32	s18, s18, s15
		gx = (bmi160Gyro.x * 2000.0F) / 32768.0F,
 8005a24:	ee69 9aa7 	vmul.f32	s19, s19, s15
		gy = (bmi160Gyro.y * 2000.0F) / 32768.0F,
 8005a28:	ee2a aa27 	vmul.f32	s20, s20, s15
		gz = (bmi160Gyro.z * 2000.0F) / 32768.0F;
 8005a2c:	ee6a aaa7 	vmul.f32	s21, s21, s15
    	h = 0; m = 0; s = 0; ms = 0;
 8005a30:	700c      	strb	r4, [r1, #0]
    	sprintf(
 8005a32:	f7fb fb27 	bl	8001084 <HAL_GetTick>
 8005a36:	9019      	str	r0, [sp, #100]	; 0x64
 8005a38:	ee1a 0a90 	vmov	r0, s21
 8005a3c:	f7fa fd84 	bl	8000548 <__aeabi_f2d>
 8005a40:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8005a44:	ee1a 0a10 	vmov	r0, s20
 8005a48:	f7fa fd7e 	bl	8000548 <__aeabi_f2d>
 8005a4c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8005a50:	ee19 0a90 	vmov	r0, s19
 8005a54:	f7fa fd78 	bl	8000548 <__aeabi_f2d>
 8005a58:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8005a5c:	ee19 0a10 	vmov	r0, s18
 8005a60:	f7fa fd72 	bl	8000548 <__aeabi_f2d>
 8005a64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a68:	ee18 0a90 	vmov	r0, s17
 8005a6c:	f7fa fd6c 	bl	8000548 <__aeabi_f2d>
 8005a70:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005a74:	ee18 0a10 	vmov	r0, s16
 8005a78:	f7fa fd66 	bl	8000548 <__aeabi_f2d>
 8005a7c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005a80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	f7fa fd60 	bl	8000548 <__aeabi_f2d>
 8005a88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a8c:	f8db 0000 	ldr.w	r0, [fp]
 8005a90:	f7fa fd5a 	bl	8000548 <__aeabi_f2d>
 8005a94:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a98:	6828      	ldr	r0, [r5, #0]
        f_open(&file, "file.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8005a9a:	4d32      	ldr	r5, [pc, #200]	; (8005b64 <main+0x2e4>)
    	sprintf(
 8005a9c:	f7fa fd54 	bl	8000548 <__aeabi_f2d>
 8005aa0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005aa4:	f8da 0000 	ldr.w	r0, [sl]
 8005aa8:	f7fa fd4e 	bl	8000548 <__aeabi_f2d>
 8005aac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005aae:	9303      	str	r3, [sp, #12]
 8005ab0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ab4:	4623      	mov	r3, r4
 8005ab6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ab8:	9402      	str	r4, [sp, #8]
 8005aba:	9401      	str	r4, [sp, #4]
 8005abc:	9400      	str	r4, [sp, #0]
 8005abe:	492a      	ldr	r1, [pc, #168]	; (8005b68 <main+0x2e8>)
 8005ac0:	4648      	mov	r0, r9
 8005ac2:	f000 ff0d 	bl	80068e0 <siprintf>
    	f_mount(&fs, "", 0);
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	4641      	mov	r1, r8
 8005aca:	4828      	ldr	r0, [pc, #160]	; (8005b6c <main+0x2ec>)
 8005acc:	f7fe fb9e 	bl	800420c <f_mount>
        f_open(&file, "file.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8005ad0:	2212      	movs	r2, #18
 8005ad2:	4927      	ldr	r1, [pc, #156]	; (8005b70 <main+0x2f0>)
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f7fe fbcd 	bl	8004274 <f_open>
    	f_lseek(&file, f_size(&file));
 8005ada:	68e9      	ldr	r1, [r5, #12]
 8005adc:	4628      	mov	r0, r5
 8005ade:	f7fe fdf9 	bl	80046d4 <f_lseek>
    	f_write(&file, rxCharBuf, sizeof(rxCharBuf), &byteswritten);
 8005ae2:	4b24      	ldr	r3, [pc, #144]	; (8005b74 <main+0x2f4>)
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005aea:	4628      	mov	r0, r5
 8005aec:	f7fe fcd4 	bl	8004498 <f_write>
    	f_close(&file);
 8005af0:	4628      	mov	r0, r5
 8005af2:	f7fe fdde 	bl	80046b2 <f_close>
    	f_mount(NULL, "", 0);
 8005af6:	4622      	mov	r2, r4
 8005af8:	4641      	mov	r1, r8
 8005afa:	4620      	mov	r0, r4
 8005afc:	f7fe fb86 	bl	800420c <f_mount>
    HAL_Delay(100);
 8005b00:	2064      	movs	r0, #100	; 0x64
 8005b02:	f7fb fac5 	bl	8001090 <HAL_Delay>
 8005b06:	e715      	b.n	8005934 <main+0xb4>
 8005b08:	200010cc 	.word	0x200010cc
 8005b0c:	200013bc 	.word	0x200013bc
 8005b10:	4305526f 	.word	0x4305526f
 8005b14:	20000bd4 	.word	0x20000bd4
 8005b18:	08005781 	.word	0x08005781
 8005b1c:	0800575d 	.word	0x0800575d
 8005b20:	08001091 	.word	0x08001091
 8005b24:	2000137c 	.word	0x2000137c
 8005b28:	200013a8 	.word	0x200013a8
 8005b2c:	200006ac 	.word	0x200006ac
 8005b30:	200013b0 	.word	0x200013b0
 8005b34:	20000704 	.word	0x20000704
 8005b38:	3e42dcae 	.word	0x3e42dcae
 8005b3c:	472d2a00 	.word	0x472d2a00
 8005b40:	20000bc8 	.word	0x20000bc8
 8005b44:	200013c4 	.word	0x200013c4
 8005b48:	200010f8 	.word	0x200010f8
 8005b4c:	200012fa 	.word	0x200012fa
 8005b50:	44fa0000 	.word	0x44fa0000
 8005b54:	200013c0 	.word	0x200013c0
 8005b58:	200012f9 	.word	0x200012f9
 8005b5c:	38000000 	.word	0x38000000
 8005b60:	20000bcc 	.word	0x20000bcc
 8005b64:	20000be0 	.word	0x20000be0
 8005b68:	08008cb4 	.word	0x08008cb4
 8005b6c:	20000994 	.word	0x20000994
 8005b70:	08008d41 	.word	0x08008d41
 8005b74:	20000bc4 	.word	0x20000bc4
 8005b78:	20000e10 	.word	0x20000e10
 8005b7c:	08008d40 	.word	0x08008d40
 8005b80:	20000700 	.word	0x20000700
 8005b84:	20000bd0 	.word	0x20000bd0

08005b88 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005b88:	e7fe      	b.n	8005b88 <_Error_Handler>
	...

08005b8c <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8005b8c:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8005b8e:	4c06      	ldr	r4, [pc, #24]	; (8005ba8 <SD_CheckStatus.isra.0+0x1c>)
 8005b90:	2301      	movs	r3, #1
 8005b92:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005b94:	f7ff fd18 	bl	80055c8 <BSP_SD_GetCardState>
 8005b98:	4623      	mov	r3, r4
 8005b9a:	b918      	cbnz	r0, 8005ba4 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8005b9c:	7822      	ldrb	r2, [r4, #0]
 8005b9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ba2:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8005ba4:	7818      	ldrb	r0, [r3, #0]
}
 8005ba6:	bd10      	pop	{r4, pc}
 8005ba8:	20000008 	.word	0x20000008

08005bac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005bac:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005bae:	4c05      	ldr	r4, [pc, #20]	; (8005bc4 <SD_initialize+0x18>)
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005bb4:	f7ff fcce 	bl	8005554 <BSP_SD_Init>
 8005bb8:	b910      	cbnz	r0, 8005bc0 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8005bba:	f7ff ffe7 	bl	8005b8c <SD_CheckStatus.isra.0>
 8005bbe:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8005bc0:	7820      	ldrb	r0, [r4, #0]
}
 8005bc2:	bd10      	pop	{r4, pc}
 8005bc4:	20000008 	.word	0x20000008

08005bc8 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8005bc8:	f7ff bfe0 	b.w	8005b8c <SD_CheckStatus.isra.0>

08005bcc <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005bcc:	b508      	push	{r3, lr}
 8005bce:	4608      	mov	r0, r1
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	f7ff fcd6 	bl	8005588 <BSP_SD_ReadBlocks>
 8005bdc:	b920      	cbnz	r0, 8005be8 <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005bde:	f7ff fcf3 	bl	80055c8 <BSP_SD_GetCardState>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d1fb      	bne.n	8005bde <SD_read+0x12>
 8005be6:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005be8:	2001      	movs	r0, #1
}
 8005bea:	bd08      	pop	{r3, pc}

08005bec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005bec:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005bee:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <SD_ioctl+0x4c>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	07db      	lsls	r3, r3, #31
{
 8005bf4:	b088      	sub	sp, #32
 8005bf6:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005bf8:	d41b      	bmi.n	8005c32 <SD_ioctl+0x46>

  switch (cmd)
 8005bfa:	2903      	cmp	r1, #3
 8005bfc:	d803      	bhi.n	8005c06 <SD_ioctl+0x1a>
 8005bfe:	e8df f001 	tbb	[pc, r1]
 8005c02:	0510      	.short	0x0510
 8005c04:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8005c06:	2004      	movs	r0, #4
  }

  return res;
}
 8005c08:	b008      	add	sp, #32
 8005c0a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8005c0c:	4668      	mov	r0, sp
 8005c0e:	f7ff fce5 	bl	80055dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005c12:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	e004      	b.n	8005c22 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8005c18:	4668      	mov	r0, sp
 8005c1a:	f7ff fcdf 	bl	80055dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005c1e:	9b07      	ldr	r3, [sp, #28]
 8005c20:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8005c22:	2000      	movs	r0, #0
 8005c24:	e7f0      	b.n	8005c08 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8005c26:	4668      	mov	r0, sp
 8005c28:	f7ff fcd8 	bl	80055dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005c2c:	9b07      	ldr	r3, [sp, #28]
 8005c2e:	0a5b      	lsrs	r3, r3, #9
 8005c30:	e7f0      	b.n	8005c14 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005c32:	2003      	movs	r0, #3
 8005c34:	e7e8      	b.n	8005c08 <SD_ioctl+0x1c>
 8005c36:	bf00      	nop
 8005c38:	20000008 	.word	0x20000008

08005c3c <SD_write>:
{
 8005c3c:	b508      	push	{r3, lr}
 8005c3e:	4608      	mov	r0, r1
 8005c40:	4611      	mov	r1, r2
 8005c42:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005c44:	f04f 33ff 	mov.w	r3, #4294967295
 8005c48:	f7ff fcae 	bl	80055a8 <BSP_SD_WriteBlocks>
 8005c4c:	b920      	cbnz	r0, 8005c58 <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 8005c4e:	f7ff fcbb 	bl	80055c8 <BSP_SD_GetCardState>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d1fb      	bne.n	8005c4e <SD_write+0x12>
 8005c56:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005c58:	2001      	movs	r0, #1
}
 8005c5a:	bd08      	pop	{r3, pc}

08005c5c <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <MX_SDIO_SD_Init+0x18>)
 8005c5e:	4a06      	ldr	r2, [pc, #24]	; (8005c78 <MX_SDIO_SD_Init+0x1c>)
 8005c60:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005c62:	2200      	movs	r2, #0
 8005c64:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005c66:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005c68:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005c6a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c6c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8005c6e:	619a      	str	r2, [r3, #24]
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	200013c8 	.word	0x200013c8
 8005c78:	40012c00 	.word	0x40012c00

08005c7c <HAL_SD_MspInit>:

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005c7c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(sdHandle->Instance==SDIO)
 8005c7e:	6802      	ldr	r2, [r0, #0]
 8005c80:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <HAL_SD_MspInit+0x5c>)
 8005c82:	429a      	cmp	r2, r3
{
 8005c84:	b087      	sub	sp, #28
  if(sdHandle->Instance==SDIO)
 8005c86:	d125      	bne.n	8005cd4 <HAL_SD_MspInit+0x58>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005c88:	2400      	movs	r4, #0
 8005c8a:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8005c8e:	9400      	str	r4, [sp, #0]
 8005c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c92:	4812      	ldr	r0, [pc, #72]	; (8005cdc <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c98:	645a      	str	r2, [r3, #68]	; 0x44
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ca6:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8005ca8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cac:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005cae:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cb0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8005cb2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb4:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cb6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005cb8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cba:	f7fb fa8b 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005cbe:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cc0:	eb0d 0103 	add.w	r1, sp, r3
 8005cc4:	4806      	ldr	r0, [pc, #24]	; (8005ce0 <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005cc6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc8:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cca:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ccc:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005cce:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cd0:	f7fb fa80 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8005cd4:	b007      	add	sp, #28
 8005cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40020800 	.word	0x40020800
 8005ce0:	40020c00 	.word	0x40020c00

08005ce4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005ce4:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8005ce6:	480f      	ldr	r0, [pc, #60]	; (8005d24 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <MX_SPI1_Init+0x44>)
 8005cea:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005cee:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005cf2:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005cfa:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cfc:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005cfe:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005d00:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d02:	6203      	str	r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005d04:	2208      	movs	r2, #8
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d06:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d08:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005d0a:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005d0c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8005d0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005d10:	f7fc fecc 	bl	8002aac <HAL_SPI_Init>
 8005d14:	b128      	cbz	r0, 8005d22 <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005d16:	214f      	movs	r1, #79	; 0x4f
 8005d18:	4804      	ldr	r0, [pc, #16]	; (8005d2c <MX_SPI1_Init+0x48>)
  }

}
 8005d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005d1e:	f7ff bf33 	b.w	8005b88 <_Error_Handler>
 8005d22:	bd08      	pop	{r3, pc}
 8005d24:	2000144c 	.word	0x2000144c
 8005d28:	40013000 	.word	0x40013000
 8005d2c:	08008d60 	.word	0x08008d60

08005d30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005d30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8005d32:	6802      	ldr	r2, [r0, #0]
 8005d34:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <HAL_SPI_MspInit+0x44>)
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d119      	bne.n	8005d6e <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8005d40:	9100      	str	r1, [sp, #0]
 8005d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d44:	480c      	ldr	r0, [pc, #48]	; (8005d78 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005d46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d4a:	645a      	str	r2, [r3, #68]	; 0x44
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d4e:	9103      	str	r1, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005d58:	23e0      	movs	r3, #224	; 0xe0
 8005d5a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d60:	2303      	movs	r3, #3
 8005d62:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d64:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005d66:	2305      	movs	r3, #5
 8005d68:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d6a:	f7fb fa33 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005d6e:	b007      	add	sp, #28
 8005d70:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d74:	40013000 	.word	0x40013000
 8005d78:	40020000 	.word	0x40020000

08005d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d7e:	2003      	movs	r0, #3
 8005d80:	f7fb f99a 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005d84:	2200      	movs	r2, #0
 8005d86:	4611      	mov	r1, r2
 8005d88:	f06f 000b 	mvn.w	r0, #11
 8005d8c:	f7fb f9a6 	bl	80010dc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005d90:	2200      	movs	r2, #0
 8005d92:	4611      	mov	r1, r2
 8005d94:	f06f 000a 	mvn.w	r0, #10
 8005d98:	f7fb f9a0 	bl	80010dc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4611      	mov	r1, r2
 8005da0:	f06f 0009 	mvn.w	r0, #9
 8005da4:	f7fb f99a 	bl	80010dc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005da8:	2200      	movs	r2, #0
 8005daa:	4611      	mov	r1, r2
 8005dac:	f06f 0004 	mvn.w	r0, #4
 8005db0:	f7fb f994 	bl	80010dc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005db4:	2200      	movs	r2, #0
 8005db6:	4611      	mov	r1, r2
 8005db8:	f06f 0003 	mvn.w	r0, #3
 8005dbc:	f7fb f98e 	bl	80010dc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	f06f 0001 	mvn.w	r0, #1
 8005dc8:	f7fb f988 	bl	80010dc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4611      	mov	r1, r2
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005dd8:	f7fb b980 	b.w	80010dc <HAL_NVIC_SetPriority>

08005ddc <NMI_Handler>:
 8005ddc:	4770      	bx	lr

08005dde <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005dde:	e7fe      	b.n	8005dde <HardFault_Handler>

08005de0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005de0:	e7fe      	b.n	8005de0 <MemManage_Handler>

08005de2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005de2:	e7fe      	b.n	8005de2 <BusFault_Handler>

08005de4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005de4:	e7fe      	b.n	8005de4 <UsageFault_Handler>

08005de6 <SVC_Handler>:
 8005de6:	4770      	bx	lr

08005de8 <DebugMon_Handler>:
 8005de8:	4770      	bx	lr

08005dea <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005dea:	4770      	bx	lr

08005dec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005dec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005dee:	f7fb f93d 	bl	800106c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8005df6:	f7fb b9d6 	b.w	80011a6 <HAL_SYSTICK_IRQHandler>
	...

08005dfc <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005dfc:	4801      	ldr	r0, [pc, #4]	; (8005e04 <UART4_IRQHandler+0x8>)
 8005dfe:	f7fc bfa3 	b.w	8002d48 <HAL_UART_IRQHandler>
 8005e02:	bf00      	nop
 8005e04:	200014e4 	.word	0x200014e4

08005e08 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e08:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <SystemInit+0x18>)
 8005e0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e0e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000ed00 	.word	0xe000ed00

08005e24 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005e24:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8005e26:	480c      	ldr	r0, [pc, #48]	; (8005e58 <MX_UART4_Init+0x34>)
  huart4.Init.BaudRate = 115200;
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <MX_UART4_Init+0x38>)
 8005e2a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005e2e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005e32:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005e34:	2300      	movs	r3, #0
 8005e36:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005e38:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005e3a:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005e3c:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e3e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e40:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005e42:	f7fc feeb 	bl	8002c1c <HAL_UART_Init>
 8005e46:	b128      	cbz	r0, 8005e54 <MX_UART4_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005e48:	214c      	movs	r1, #76	; 0x4c
 8005e4a:	4805      	ldr	r0, [pc, #20]	; (8005e60 <MX_UART4_Init+0x3c>)
  }

}
 8005e4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005e50:	f7ff be9a 	b.w	8005b88 <_Error_Handler>
 8005e54:	bd08      	pop	{r3, pc}
 8005e56:	bf00      	nop
 8005e58:	200014e4 	.word	0x200014e4
 8005e5c:	40004c00 	.word	0x40004c00
 8005e60:	08008d85 	.word	0x08008d85

08005e64 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005e64:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8005e66:	480c      	ldr	r0, [pc, #48]	; (8005e98 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <MX_USART1_UART_Init+0x38>)
 8005e6a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005e6e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e72:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e74:	2300      	movs	r3, #0
 8005e76:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e78:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e7a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e7c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e7e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e80:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e82:	f7fc fecb 	bl	8002c1c <HAL_UART_Init>
 8005e86:	b128      	cbz	r0, 8005e94 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005e88:	215f      	movs	r1, #95	; 0x5f
 8005e8a:	4805      	ldr	r0, [pc, #20]	; (8005ea0 <MX_USART1_UART_Init+0x3c>)
  }

}
 8005e8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005e90:	f7ff be7a 	b.w	8005b88 <_Error_Handler>
 8005e94:	bd08      	pop	{r3, pc}
 8005e96:	bf00      	nop
 8005e98:	200014a4 	.word	0x200014a4
 8005e9c:	40011000 	.word	0x40011000
 8005ea0:	08008d85 	.word	0x08008d85

08005ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ea4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 8005ea6:	6803      	ldr	r3, [r0, #0]
 8005ea8:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <HAL_UART_MspInit+0x90>)
 8005eaa:	4293      	cmp	r3, r2
{
 8005eac:	b088      	sub	sp, #32
  if(uartHandle->Instance==UART4)
 8005eae:	d122      	bne.n	8005ef6 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005eb0:	2400      	movs	r4, #0
 8005eb2:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <HAL_UART_MspInit+0x94>)
 8005eb4:	9401      	str	r4, [sp, #4]
 8005eb6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eb8:	4820      	ldr	r0, [pc, #128]	; (8005f3c <HAL_UART_MspInit+0x98>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8005eba:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8005ebe:	6419      	str	r1, [r3, #64]	; 0x40
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eca:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ed0:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ed2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ed4:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005ed6:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ed8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005eda:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005edc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ede:	f7fb f979 	bl	80011d4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005ee2:	2034      	movs	r0, #52	; 0x34
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	f7fb f8f8 	bl	80010dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005eec:	2034      	movs	r0, #52	; 0x34
 8005eee:	f7fb f929 	bl	8001144 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005ef2:	b008      	add	sp, #32
 8005ef4:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART1)
 8005ef6:	4a12      	ldr	r2, [pc, #72]	; (8005f40 <HAL_UART_MspInit+0x9c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d1fa      	bne.n	8005ef2 <HAL_UART_MspInit+0x4e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005efc:	2300      	movs	r3, #0
 8005efe:	9302      	str	r3, [sp, #8]
 8005f00:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f02:	480e      	ldr	r0, [pc, #56]	; (8005f3c <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f06:	f042 0210 	orr.w	r2, r2, #16
 8005f0a:	645a      	str	r2, [r3, #68]	; 0x44
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	9302      	str	r3, [sp, #8]
 8005f14:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005f16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005f1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f20:	2301      	movs	r3, #1
 8005f22:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f24:	2303      	movs	r3, #3
 8005f26:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f28:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f2a:	2307      	movs	r3, #7
 8005f2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f2e:	f7fb f951 	bl	80011d4 <HAL_GPIO_Init>
}
 8005f32:	e7de      	b.n	8005ef2 <HAL_UART_MspInit+0x4e>
 8005f34:	40004c00 	.word	0x40004c00
 8005f38:	40023800 	.word	0x40023800
 8005f3c:	40020000 	.word	0x40020000
 8005f40:	40011000 	.word	0x40011000

08005f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005f48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005f4a:	e003      	b.n	8005f54 <LoopCopyDataInit>

08005f4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005f4c:	4b0c      	ldr	r3, [pc, #48]	; (8005f80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005f4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005f50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005f52:	3104      	adds	r1, #4

08005f54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005f54:	480b      	ldr	r0, [pc, #44]	; (8005f84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005f56:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005f58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005f5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005f5c:	d3f6      	bcc.n	8005f4c <CopyDataInit>
  ldr  r2, =_sbss
 8005f5e:	4a0b      	ldr	r2, [pc, #44]	; (8005f8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005f60:	e002      	b.n	8005f68 <LoopFillZerobss>

08005f62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005f62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005f64:	f842 3b04 	str.w	r3, [r2], #4

08005f68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005f68:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005f6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005f6c:	d3f9      	bcc.n	8005f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005f6e:	f7ff ff4b 	bl	8005e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f72:	f000 f811 	bl	8005f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f76:	f7ff fc83 	bl	8005880 <main>
  bx  lr    
 8005f7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005f7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005f80:	08009030 	.word	0x08009030
  ldr  r0, =_sdata
 8005f84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005f88:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8005f8c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8005f90:	20001528 	.word	0x20001528

08005f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f94:	e7fe      	b.n	8005f94 <ADC_IRQHandler>
	...

08005f98 <__libc_init_array>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	4e0d      	ldr	r6, [pc, #52]	; (8005fd0 <__libc_init_array+0x38>)
 8005f9c:	4c0d      	ldr	r4, [pc, #52]	; (8005fd4 <__libc_init_array+0x3c>)
 8005f9e:	1ba4      	subs	r4, r4, r6
 8005fa0:	10a4      	asrs	r4, r4, #2
 8005fa2:	2500      	movs	r5, #0
 8005fa4:	42a5      	cmp	r5, r4
 8005fa6:	d109      	bne.n	8005fbc <__libc_init_array+0x24>
 8005fa8:	4e0b      	ldr	r6, [pc, #44]	; (8005fd8 <__libc_init_array+0x40>)
 8005faa:	4c0c      	ldr	r4, [pc, #48]	; (8005fdc <__libc_init_array+0x44>)
 8005fac:	f002 fe28 	bl	8008c00 <_init>
 8005fb0:	1ba4      	subs	r4, r4, r6
 8005fb2:	10a4      	asrs	r4, r4, #2
 8005fb4:	2500      	movs	r5, #0
 8005fb6:	42a5      	cmp	r5, r4
 8005fb8:	d105      	bne.n	8005fc6 <__libc_init_array+0x2e>
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fc0:	4798      	blx	r3
 8005fc2:	3501      	adds	r5, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__libc_init_array+0xc>
 8005fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fca:	4798      	blx	r3
 8005fcc:	3501      	adds	r5, #1
 8005fce:	e7f2      	b.n	8005fb6 <__libc_init_array+0x1e>
 8005fd0:	08009028 	.word	0x08009028
 8005fd4:	08009028 	.word	0x08009028
 8005fd8:	08009028 	.word	0x08009028
 8005fdc:	0800902c 	.word	0x0800902c

08005fe0 <memcpy>:
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	1e43      	subs	r3, r0, #1
 8005fe4:	440a      	add	r2, r1
 8005fe6:	4291      	cmp	r1, r2
 8005fe8:	d100      	bne.n	8005fec <memcpy+0xc>
 8005fea:	bd10      	pop	{r4, pc}
 8005fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff4:	e7f7      	b.n	8005fe6 <memcpy+0x6>

08005ff6 <memset>:
 8005ff6:	4402      	add	r2, r0
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d100      	bne.n	8006000 <memset+0xa>
 8005ffe:	4770      	bx	lr
 8006000:	f803 1b01 	strb.w	r1, [r3], #1
 8006004:	e7f9      	b.n	8005ffa <memset+0x4>

08006006 <__cvt>:
 8006006:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800600a:	ec55 4b10 	vmov	r4, r5, d0
 800600e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006010:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006014:	2d00      	cmp	r5, #0
 8006016:	460e      	mov	r6, r1
 8006018:	4691      	mov	r9, r2
 800601a:	4619      	mov	r1, r3
 800601c:	bfb8      	it	lt
 800601e:	4622      	movlt	r2, r4
 8006020:	462b      	mov	r3, r5
 8006022:	f027 0720 	bic.w	r7, r7, #32
 8006026:	bfbb      	ittet	lt
 8006028:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800602c:	461d      	movlt	r5, r3
 800602e:	2300      	movge	r3, #0
 8006030:	232d      	movlt	r3, #45	; 0x2d
 8006032:	bfb8      	it	lt
 8006034:	4614      	movlt	r4, r2
 8006036:	2f46      	cmp	r7, #70	; 0x46
 8006038:	700b      	strb	r3, [r1, #0]
 800603a:	d004      	beq.n	8006046 <__cvt+0x40>
 800603c:	2f45      	cmp	r7, #69	; 0x45
 800603e:	d100      	bne.n	8006042 <__cvt+0x3c>
 8006040:	3601      	adds	r6, #1
 8006042:	2102      	movs	r1, #2
 8006044:	e000      	b.n	8006048 <__cvt+0x42>
 8006046:	2103      	movs	r1, #3
 8006048:	ab03      	add	r3, sp, #12
 800604a:	9301      	str	r3, [sp, #4]
 800604c:	ab02      	add	r3, sp, #8
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	4632      	mov	r2, r6
 8006052:	4653      	mov	r3, sl
 8006054:	ec45 4b10 	vmov	d0, r4, r5
 8006058:	f000 fcf2 	bl	8006a40 <_dtoa_r>
 800605c:	2f47      	cmp	r7, #71	; 0x47
 800605e:	4680      	mov	r8, r0
 8006060:	d102      	bne.n	8006068 <__cvt+0x62>
 8006062:	f019 0f01 	tst.w	r9, #1
 8006066:	d026      	beq.n	80060b6 <__cvt+0xb0>
 8006068:	2f46      	cmp	r7, #70	; 0x46
 800606a:	eb08 0906 	add.w	r9, r8, r6
 800606e:	d111      	bne.n	8006094 <__cvt+0x8e>
 8006070:	f898 3000 	ldrb.w	r3, [r8]
 8006074:	2b30      	cmp	r3, #48	; 0x30
 8006076:	d10a      	bne.n	800608e <__cvt+0x88>
 8006078:	2200      	movs	r2, #0
 800607a:	2300      	movs	r3, #0
 800607c:	4620      	mov	r0, r4
 800607e:	4629      	mov	r1, r5
 8006080:	f7fa fd1e 	bl	8000ac0 <__aeabi_dcmpeq>
 8006084:	b918      	cbnz	r0, 800608e <__cvt+0x88>
 8006086:	f1c6 0601 	rsb	r6, r6, #1
 800608a:	f8ca 6000 	str.w	r6, [sl]
 800608e:	f8da 3000 	ldr.w	r3, [sl]
 8006092:	4499      	add	r9, r3
 8006094:	2200      	movs	r2, #0
 8006096:	2300      	movs	r3, #0
 8006098:	4620      	mov	r0, r4
 800609a:	4629      	mov	r1, r5
 800609c:	f7fa fd10 	bl	8000ac0 <__aeabi_dcmpeq>
 80060a0:	b938      	cbnz	r0, 80060b2 <__cvt+0xac>
 80060a2:	2230      	movs	r2, #48	; 0x30
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	4599      	cmp	r9, r3
 80060a8:	d905      	bls.n	80060b6 <__cvt+0xb0>
 80060aa:	1c59      	adds	r1, r3, #1
 80060ac:	9103      	str	r1, [sp, #12]
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	e7f8      	b.n	80060a4 <__cvt+0x9e>
 80060b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80060b6:	9b03      	ldr	r3, [sp, #12]
 80060b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ba:	eba3 0308 	sub.w	r3, r3, r8
 80060be:	4640      	mov	r0, r8
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	b004      	add	sp, #16
 80060c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080060c8 <__exponent>:
 80060c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ca:	4603      	mov	r3, r0
 80060cc:	2900      	cmp	r1, #0
 80060ce:	bfb8      	it	lt
 80060d0:	4249      	neglt	r1, r1
 80060d2:	f803 2b02 	strb.w	r2, [r3], #2
 80060d6:	bfb4      	ite	lt
 80060d8:	222d      	movlt	r2, #45	; 0x2d
 80060da:	222b      	movge	r2, #43	; 0x2b
 80060dc:	2909      	cmp	r1, #9
 80060de:	7042      	strb	r2, [r0, #1]
 80060e0:	dd20      	ble.n	8006124 <__exponent+0x5c>
 80060e2:	f10d 0207 	add.w	r2, sp, #7
 80060e6:	4617      	mov	r7, r2
 80060e8:	260a      	movs	r6, #10
 80060ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80060ee:	fb06 1115 	mls	r1, r6, r5, r1
 80060f2:	3130      	adds	r1, #48	; 0x30
 80060f4:	2d09      	cmp	r5, #9
 80060f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060fa:	f102 34ff 	add.w	r4, r2, #4294967295
 80060fe:	4629      	mov	r1, r5
 8006100:	dc09      	bgt.n	8006116 <__exponent+0x4e>
 8006102:	3130      	adds	r1, #48	; 0x30
 8006104:	3a02      	subs	r2, #2
 8006106:	f804 1c01 	strb.w	r1, [r4, #-1]
 800610a:	42ba      	cmp	r2, r7
 800610c:	461c      	mov	r4, r3
 800610e:	d304      	bcc.n	800611a <__exponent+0x52>
 8006110:	1a20      	subs	r0, r4, r0
 8006112:	b003      	add	sp, #12
 8006114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006116:	4622      	mov	r2, r4
 8006118:	e7e7      	b.n	80060ea <__exponent+0x22>
 800611a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800611e:	f803 1b01 	strb.w	r1, [r3], #1
 8006122:	e7f2      	b.n	800610a <__exponent+0x42>
 8006124:	2230      	movs	r2, #48	; 0x30
 8006126:	461c      	mov	r4, r3
 8006128:	4411      	add	r1, r2
 800612a:	f804 2b02 	strb.w	r2, [r4], #2
 800612e:	7059      	strb	r1, [r3, #1]
 8006130:	e7ee      	b.n	8006110 <__exponent+0x48>
	...

08006134 <_printf_float>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	b08d      	sub	sp, #52	; 0x34
 800613a:	460c      	mov	r4, r1
 800613c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006140:	4616      	mov	r6, r2
 8006142:	461f      	mov	r7, r3
 8006144:	4605      	mov	r5, r0
 8006146:	f001 fa49 	bl	80075dc <_localeconv_r>
 800614a:	6803      	ldr	r3, [r0, #0]
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fa f83e 	bl	80001d0 <strlen>
 8006154:	2300      	movs	r3, #0
 8006156:	930a      	str	r3, [sp, #40]	; 0x28
 8006158:	f8d8 3000 	ldr.w	r3, [r8]
 800615c:	9005      	str	r0, [sp, #20]
 800615e:	3307      	adds	r3, #7
 8006160:	f023 0307 	bic.w	r3, r3, #7
 8006164:	f103 0208 	add.w	r2, r3, #8
 8006168:	f894 a018 	ldrb.w	sl, [r4, #24]
 800616c:	f8d4 b000 	ldr.w	fp, [r4]
 8006170:	f8c8 2000 	str.w	r2, [r8]
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800617c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006180:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006184:	9307      	str	r3, [sp, #28]
 8006186:	f8cd 8018 	str.w	r8, [sp, #24]
 800618a:	f04f 32ff 	mov.w	r2, #4294967295
 800618e:	4ba5      	ldr	r3, [pc, #660]	; (8006424 <_printf_float+0x2f0>)
 8006190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006194:	f7fa fcc6 	bl	8000b24 <__aeabi_dcmpun>
 8006198:	2800      	cmp	r0, #0
 800619a:	f040 81fb 	bne.w	8006594 <_printf_float+0x460>
 800619e:	f04f 32ff 	mov.w	r2, #4294967295
 80061a2:	4ba0      	ldr	r3, [pc, #640]	; (8006424 <_printf_float+0x2f0>)
 80061a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061a8:	f7fa fc9e 	bl	8000ae8 <__aeabi_dcmple>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f040 81f1 	bne.w	8006594 <_printf_float+0x460>
 80061b2:	2200      	movs	r2, #0
 80061b4:	2300      	movs	r3, #0
 80061b6:	4640      	mov	r0, r8
 80061b8:	4649      	mov	r1, r9
 80061ba:	f7fa fc8b 	bl	8000ad4 <__aeabi_dcmplt>
 80061be:	b110      	cbz	r0, 80061c6 <_printf_float+0x92>
 80061c0:	232d      	movs	r3, #45	; 0x2d
 80061c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c6:	4b98      	ldr	r3, [pc, #608]	; (8006428 <_printf_float+0x2f4>)
 80061c8:	4a98      	ldr	r2, [pc, #608]	; (800642c <_printf_float+0x2f8>)
 80061ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80061ce:	bf8c      	ite	hi
 80061d0:	4690      	movhi	r8, r2
 80061d2:	4698      	movls	r8, r3
 80061d4:	2303      	movs	r3, #3
 80061d6:	f02b 0204 	bic.w	r2, fp, #4
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	6022      	str	r2, [r4, #0]
 80061de:	f04f 0900 	mov.w	r9, #0
 80061e2:	9700      	str	r7, [sp, #0]
 80061e4:	4633      	mov	r3, r6
 80061e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80061e8:	4621      	mov	r1, r4
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 f9e2 	bl	80065b4 <_printf_common>
 80061f0:	3001      	adds	r0, #1
 80061f2:	f040 8093 	bne.w	800631c <_printf_float+0x1e8>
 80061f6:	f04f 30ff 	mov.w	r0, #4294967295
 80061fa:	b00d      	add	sp, #52	; 0x34
 80061fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006200:	6861      	ldr	r1, [r4, #4]
 8006202:	1c4b      	adds	r3, r1, #1
 8006204:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006208:	d13f      	bne.n	800628a <_printf_float+0x156>
 800620a:	2306      	movs	r3, #6
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	2300      	movs	r3, #0
 8006210:	9303      	str	r3, [sp, #12]
 8006212:	ab0a      	add	r3, sp, #40	; 0x28
 8006214:	9302      	str	r3, [sp, #8]
 8006216:	ab09      	add	r3, sp, #36	; 0x24
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	ec49 8b10 	vmov	d0, r8, r9
 800621e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006222:	6022      	str	r2, [r4, #0]
 8006224:	f8cd a004 	str.w	sl, [sp, #4]
 8006228:	6861      	ldr	r1, [r4, #4]
 800622a:	4628      	mov	r0, r5
 800622c:	f7ff feeb 	bl	8006006 <__cvt>
 8006230:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006234:	2b47      	cmp	r3, #71	; 0x47
 8006236:	4680      	mov	r8, r0
 8006238:	d109      	bne.n	800624e <_printf_float+0x11a>
 800623a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623c:	1cd8      	adds	r0, r3, #3
 800623e:	db02      	blt.n	8006246 <_printf_float+0x112>
 8006240:	6862      	ldr	r2, [r4, #4]
 8006242:	4293      	cmp	r3, r2
 8006244:	dd57      	ble.n	80062f6 <_printf_float+0x1c2>
 8006246:	f1aa 0a02 	sub.w	sl, sl, #2
 800624a:	fa5f fa8a 	uxtb.w	sl, sl
 800624e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006252:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006254:	d834      	bhi.n	80062c0 <_printf_float+0x18c>
 8006256:	3901      	subs	r1, #1
 8006258:	4652      	mov	r2, sl
 800625a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800625e:	9109      	str	r1, [sp, #36]	; 0x24
 8006260:	f7ff ff32 	bl	80060c8 <__exponent>
 8006264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006266:	1883      	adds	r3, r0, r2
 8006268:	2a01      	cmp	r2, #1
 800626a:	4681      	mov	r9, r0
 800626c:	6123      	str	r3, [r4, #16]
 800626e:	dc02      	bgt.n	8006276 <_printf_float+0x142>
 8006270:	6822      	ldr	r2, [r4, #0]
 8006272:	07d1      	lsls	r1, r2, #31
 8006274:	d501      	bpl.n	800627a <_printf_float+0x146>
 8006276:	3301      	adds	r3, #1
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0af      	beq.n	80061e2 <_printf_float+0xae>
 8006282:	232d      	movs	r3, #45	; 0x2d
 8006284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006288:	e7ab      	b.n	80061e2 <_printf_float+0xae>
 800628a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800628e:	d002      	beq.n	8006296 <_printf_float+0x162>
 8006290:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006294:	d1bb      	bne.n	800620e <_printf_float+0xda>
 8006296:	b189      	cbz	r1, 80062bc <_printf_float+0x188>
 8006298:	2300      	movs	r3, #0
 800629a:	9303      	str	r3, [sp, #12]
 800629c:	ab0a      	add	r3, sp, #40	; 0x28
 800629e:	9302      	str	r3, [sp, #8]
 80062a0:	ab09      	add	r3, sp, #36	; 0x24
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	ec49 8b10 	vmov	d0, r8, r9
 80062a8:	6022      	str	r2, [r4, #0]
 80062aa:	f8cd a004 	str.w	sl, [sp, #4]
 80062ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062b2:	4628      	mov	r0, r5
 80062b4:	f7ff fea7 	bl	8006006 <__cvt>
 80062b8:	4680      	mov	r8, r0
 80062ba:	e7be      	b.n	800623a <_printf_float+0x106>
 80062bc:	2301      	movs	r3, #1
 80062be:	e7a5      	b.n	800620c <_printf_float+0xd8>
 80062c0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80062c4:	d119      	bne.n	80062fa <_printf_float+0x1c6>
 80062c6:	2900      	cmp	r1, #0
 80062c8:	6863      	ldr	r3, [r4, #4]
 80062ca:	dd0c      	ble.n	80062e6 <_printf_float+0x1b2>
 80062cc:	6121      	str	r1, [r4, #16]
 80062ce:	b913      	cbnz	r3, 80062d6 <_printf_float+0x1a2>
 80062d0:	6822      	ldr	r2, [r4, #0]
 80062d2:	07d2      	lsls	r2, r2, #31
 80062d4:	d502      	bpl.n	80062dc <_printf_float+0x1a8>
 80062d6:	3301      	adds	r3, #1
 80062d8:	440b      	add	r3, r1
 80062da:	6123      	str	r3, [r4, #16]
 80062dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062de:	65a3      	str	r3, [r4, #88]	; 0x58
 80062e0:	f04f 0900 	mov.w	r9, #0
 80062e4:	e7c9      	b.n	800627a <_printf_float+0x146>
 80062e6:	b913      	cbnz	r3, 80062ee <_printf_float+0x1ba>
 80062e8:	6822      	ldr	r2, [r4, #0]
 80062ea:	07d0      	lsls	r0, r2, #31
 80062ec:	d501      	bpl.n	80062f2 <_printf_float+0x1be>
 80062ee:	3302      	adds	r3, #2
 80062f0:	e7f3      	b.n	80062da <_printf_float+0x1a6>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e7f1      	b.n	80062da <_printf_float+0x1a6>
 80062f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80062fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062fe:	4293      	cmp	r3, r2
 8006300:	db05      	blt.n	800630e <_printf_float+0x1da>
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	6123      	str	r3, [r4, #16]
 8006306:	07d1      	lsls	r1, r2, #31
 8006308:	d5e8      	bpl.n	80062dc <_printf_float+0x1a8>
 800630a:	3301      	adds	r3, #1
 800630c:	e7e5      	b.n	80062da <_printf_float+0x1a6>
 800630e:	2b00      	cmp	r3, #0
 8006310:	bfd4      	ite	le
 8006312:	f1c3 0302 	rsble	r3, r3, #2
 8006316:	2301      	movgt	r3, #1
 8006318:	4413      	add	r3, r2
 800631a:	e7de      	b.n	80062da <_printf_float+0x1a6>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	055a      	lsls	r2, r3, #21
 8006320:	d407      	bmi.n	8006332 <_printf_float+0x1fe>
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	4642      	mov	r2, r8
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	d12b      	bne.n	8006388 <_printf_float+0x254>
 8006330:	e761      	b.n	80061f6 <_printf_float+0xc2>
 8006332:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006336:	f240 80e2 	bls.w	80064fe <_printf_float+0x3ca>
 800633a:	2200      	movs	r2, #0
 800633c:	2300      	movs	r3, #0
 800633e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006342:	f7fa fbbd 	bl	8000ac0 <__aeabi_dcmpeq>
 8006346:	2800      	cmp	r0, #0
 8006348:	d03c      	beq.n	80063c4 <_printf_float+0x290>
 800634a:	2301      	movs	r3, #1
 800634c:	4a38      	ldr	r2, [pc, #224]	; (8006430 <_printf_float+0x2fc>)
 800634e:	4631      	mov	r1, r6
 8006350:	4628      	mov	r0, r5
 8006352:	47b8      	blx	r7
 8006354:	3001      	adds	r0, #1
 8006356:	f43f af4e 	beq.w	80061f6 <_printf_float+0xc2>
 800635a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800635e:	429a      	cmp	r2, r3
 8006360:	db02      	blt.n	8006368 <_printf_float+0x234>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	07d8      	lsls	r0, r3, #31
 8006366:	d50f      	bpl.n	8006388 <_printf_float+0x254>
 8006368:	9b05      	ldr	r3, [sp, #20]
 800636a:	9a04      	ldr	r2, [sp, #16]
 800636c:	4631      	mov	r1, r6
 800636e:	4628      	mov	r0, r5
 8006370:	47b8      	blx	r7
 8006372:	3001      	adds	r0, #1
 8006374:	f43f af3f 	beq.w	80061f6 <_printf_float+0xc2>
 8006378:	f04f 0800 	mov.w	r8, #0
 800637c:	f104 091a 	add.w	r9, r4, #26
 8006380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006382:	3b01      	subs	r3, #1
 8006384:	4598      	cmp	r8, r3
 8006386:	db12      	blt.n	80063ae <_printf_float+0x27a>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	079b      	lsls	r3, r3, #30
 800638c:	d509      	bpl.n	80063a2 <_printf_float+0x26e>
 800638e:	f04f 0800 	mov.w	r8, #0
 8006392:	f104 0919 	add.w	r9, r4, #25
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	4598      	cmp	r8, r3
 800639e:	f2c0 80ee 	blt.w	800657e <_printf_float+0x44a>
 80063a2:	68e0      	ldr	r0, [r4, #12]
 80063a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a6:	4298      	cmp	r0, r3
 80063a8:	bfb8      	it	lt
 80063aa:	4618      	movlt	r0, r3
 80063ac:	e725      	b.n	80061fa <_printf_float+0xc6>
 80063ae:	2301      	movs	r3, #1
 80063b0:	464a      	mov	r2, r9
 80063b2:	4631      	mov	r1, r6
 80063b4:	4628      	mov	r0, r5
 80063b6:	47b8      	blx	r7
 80063b8:	3001      	adds	r0, #1
 80063ba:	f43f af1c 	beq.w	80061f6 <_printf_float+0xc2>
 80063be:	f108 0801 	add.w	r8, r8, #1
 80063c2:	e7dd      	b.n	8006380 <_printf_float+0x24c>
 80063c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dc34      	bgt.n	8006434 <_printf_float+0x300>
 80063ca:	2301      	movs	r3, #1
 80063cc:	4a18      	ldr	r2, [pc, #96]	; (8006430 <_printf_float+0x2fc>)
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	f43f af0e 	beq.w	80061f6 <_printf_float+0xc2>
 80063da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063dc:	b923      	cbnz	r3, 80063e8 <_printf_float+0x2b4>
 80063de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e0:	b913      	cbnz	r3, 80063e8 <_printf_float+0x2b4>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	07d9      	lsls	r1, r3, #31
 80063e6:	d5cf      	bpl.n	8006388 <_printf_float+0x254>
 80063e8:	9b05      	ldr	r3, [sp, #20]
 80063ea:	9a04      	ldr	r2, [sp, #16]
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	f43f aeff 	beq.w	80061f6 <_printf_float+0xc2>
 80063f8:	f04f 0900 	mov.w	r9, #0
 80063fc:	f104 0a1a 	add.w	sl, r4, #26
 8006400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006402:	425b      	negs	r3, r3
 8006404:	4599      	cmp	r9, r3
 8006406:	db01      	blt.n	800640c <_printf_float+0x2d8>
 8006408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800640a:	e78b      	b.n	8006324 <_printf_float+0x1f0>
 800640c:	2301      	movs	r3, #1
 800640e:	4652      	mov	r2, sl
 8006410:	4631      	mov	r1, r6
 8006412:	4628      	mov	r0, r5
 8006414:	47b8      	blx	r7
 8006416:	3001      	adds	r0, #1
 8006418:	f43f aeed 	beq.w	80061f6 <_printf_float+0xc2>
 800641c:	f109 0901 	add.w	r9, r9, #1
 8006420:	e7ee      	b.n	8006400 <_printf_float+0x2cc>
 8006422:	bf00      	nop
 8006424:	7fefffff 	.word	0x7fefffff
 8006428:	08008d94 	.word	0x08008d94
 800642c:	08008d98 	.word	0x08008d98
 8006430:	08008da4 	.word	0x08008da4
 8006434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006436:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006438:	429a      	cmp	r2, r3
 800643a:	bfa8      	it	ge
 800643c:	461a      	movge	r2, r3
 800643e:	2a00      	cmp	r2, #0
 8006440:	4691      	mov	r9, r2
 8006442:	dc38      	bgt.n	80064b6 <_printf_float+0x382>
 8006444:	f104 031a 	add.w	r3, r4, #26
 8006448:	f04f 0b00 	mov.w	fp, #0
 800644c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006450:	9306      	str	r3, [sp, #24]
 8006452:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006456:	ebaa 0309 	sub.w	r3, sl, r9
 800645a:	459b      	cmp	fp, r3
 800645c:	db33      	blt.n	80064c6 <_printf_float+0x392>
 800645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006462:	429a      	cmp	r2, r3
 8006464:	db3a      	blt.n	80064dc <_printf_float+0x3a8>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	07da      	lsls	r2, r3, #31
 800646a:	d437      	bmi.n	80064dc <_printf_float+0x3a8>
 800646c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800646e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006470:	eba3 020a 	sub.w	r2, r3, sl
 8006474:	eba3 0901 	sub.w	r9, r3, r1
 8006478:	4591      	cmp	r9, r2
 800647a:	bfa8      	it	ge
 800647c:	4691      	movge	r9, r2
 800647e:	f1b9 0f00 	cmp.w	r9, #0
 8006482:	dc33      	bgt.n	80064ec <_printf_float+0x3b8>
 8006484:	f04f 0800 	mov.w	r8, #0
 8006488:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800648c:	f104 0a1a 	add.w	sl, r4, #26
 8006490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006494:	1a9b      	subs	r3, r3, r2
 8006496:	eba3 0309 	sub.w	r3, r3, r9
 800649a:	4598      	cmp	r8, r3
 800649c:	f6bf af74 	bge.w	8006388 <_printf_float+0x254>
 80064a0:	2301      	movs	r3, #1
 80064a2:	4652      	mov	r2, sl
 80064a4:	4631      	mov	r1, r6
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	f43f aea3 	beq.w	80061f6 <_printf_float+0xc2>
 80064b0:	f108 0801 	add.w	r8, r8, #1
 80064b4:	e7ec      	b.n	8006490 <_printf_float+0x35c>
 80064b6:	4613      	mov	r3, r2
 80064b8:	4631      	mov	r1, r6
 80064ba:	4642      	mov	r2, r8
 80064bc:	4628      	mov	r0, r5
 80064be:	47b8      	blx	r7
 80064c0:	3001      	adds	r0, #1
 80064c2:	d1bf      	bne.n	8006444 <_printf_float+0x310>
 80064c4:	e697      	b.n	80061f6 <_printf_float+0xc2>
 80064c6:	2301      	movs	r3, #1
 80064c8:	9a06      	ldr	r2, [sp, #24]
 80064ca:	4631      	mov	r1, r6
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b8      	blx	r7
 80064d0:	3001      	adds	r0, #1
 80064d2:	f43f ae90 	beq.w	80061f6 <_printf_float+0xc2>
 80064d6:	f10b 0b01 	add.w	fp, fp, #1
 80064da:	e7ba      	b.n	8006452 <_printf_float+0x31e>
 80064dc:	9b05      	ldr	r3, [sp, #20]
 80064de:	9a04      	ldr	r2, [sp, #16]
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	d1c0      	bne.n	800646c <_printf_float+0x338>
 80064ea:	e684      	b.n	80061f6 <_printf_float+0xc2>
 80064ec:	464b      	mov	r3, r9
 80064ee:	eb08 020a 	add.w	r2, r8, sl
 80064f2:	4631      	mov	r1, r6
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	d1c3      	bne.n	8006484 <_printf_float+0x350>
 80064fc:	e67b      	b.n	80061f6 <_printf_float+0xc2>
 80064fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006500:	2a01      	cmp	r2, #1
 8006502:	dc01      	bgt.n	8006508 <_printf_float+0x3d4>
 8006504:	07db      	lsls	r3, r3, #31
 8006506:	d537      	bpl.n	8006578 <_printf_float+0x444>
 8006508:	2301      	movs	r3, #1
 800650a:	4642      	mov	r2, r8
 800650c:	4631      	mov	r1, r6
 800650e:	4628      	mov	r0, r5
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	f43f ae6f 	beq.w	80061f6 <_printf_float+0xc2>
 8006518:	9b05      	ldr	r3, [sp, #20]
 800651a:	9a04      	ldr	r2, [sp, #16]
 800651c:	4631      	mov	r1, r6
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	f43f ae67 	beq.w	80061f6 <_printf_float+0xc2>
 8006528:	2200      	movs	r2, #0
 800652a:	2300      	movs	r3, #0
 800652c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006530:	f7fa fac6 	bl	8000ac0 <__aeabi_dcmpeq>
 8006534:	b158      	cbz	r0, 800654e <_printf_float+0x41a>
 8006536:	f04f 0800 	mov.w	r8, #0
 800653a:	f104 0a1a 	add.w	sl, r4, #26
 800653e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006540:	3b01      	subs	r3, #1
 8006542:	4598      	cmp	r8, r3
 8006544:	db0d      	blt.n	8006562 <_printf_float+0x42e>
 8006546:	464b      	mov	r3, r9
 8006548:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800654c:	e6eb      	b.n	8006326 <_printf_float+0x1f2>
 800654e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006550:	f108 0201 	add.w	r2, r8, #1
 8006554:	3b01      	subs	r3, #1
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	d1f2      	bne.n	8006546 <_printf_float+0x412>
 8006560:	e649      	b.n	80061f6 <_printf_float+0xc2>
 8006562:	2301      	movs	r3, #1
 8006564:	4652      	mov	r2, sl
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f ae42 	beq.w	80061f6 <_printf_float+0xc2>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	e7e2      	b.n	800653e <_printf_float+0x40a>
 8006578:	2301      	movs	r3, #1
 800657a:	4642      	mov	r2, r8
 800657c:	e7eb      	b.n	8006556 <_printf_float+0x422>
 800657e:	2301      	movs	r3, #1
 8006580:	464a      	mov	r2, r9
 8006582:	4631      	mov	r1, r6
 8006584:	4628      	mov	r0, r5
 8006586:	47b8      	blx	r7
 8006588:	3001      	adds	r0, #1
 800658a:	f43f ae34 	beq.w	80061f6 <_printf_float+0xc2>
 800658e:	f108 0801 	add.w	r8, r8, #1
 8006592:	e700      	b.n	8006396 <_printf_float+0x262>
 8006594:	4642      	mov	r2, r8
 8006596:	464b      	mov	r3, r9
 8006598:	4640      	mov	r0, r8
 800659a:	4649      	mov	r1, r9
 800659c:	f7fa fac2 	bl	8000b24 <__aeabi_dcmpun>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f43f ae2d 	beq.w	8006200 <_printf_float+0xcc>
 80065a6:	4b01      	ldr	r3, [pc, #4]	; (80065ac <_printf_float+0x478>)
 80065a8:	4a01      	ldr	r2, [pc, #4]	; (80065b0 <_printf_float+0x47c>)
 80065aa:	e60e      	b.n	80061ca <_printf_float+0x96>
 80065ac:	08008d9c 	.word	0x08008d9c
 80065b0:	08008da0 	.word	0x08008da0

080065b4 <_printf_common>:
 80065b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	4691      	mov	r9, r2
 80065ba:	461f      	mov	r7, r3
 80065bc:	688a      	ldr	r2, [r1, #8]
 80065be:	690b      	ldr	r3, [r1, #16]
 80065c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	bfb8      	it	lt
 80065c8:	4613      	movlt	r3, r2
 80065ca:	f8c9 3000 	str.w	r3, [r9]
 80065ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065d2:	4606      	mov	r6, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	b112      	cbz	r2, 80065de <_printf_common+0x2a>
 80065d8:	3301      	adds	r3, #1
 80065da:	f8c9 3000 	str.w	r3, [r9]
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	0699      	lsls	r1, r3, #26
 80065e2:	bf42      	ittt	mi
 80065e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80065e8:	3302      	addmi	r3, #2
 80065ea:	f8c9 3000 	strmi.w	r3, [r9]
 80065ee:	6825      	ldr	r5, [r4, #0]
 80065f0:	f015 0506 	ands.w	r5, r5, #6
 80065f4:	d107      	bne.n	8006606 <_printf_common+0x52>
 80065f6:	f104 0a19 	add.w	sl, r4, #25
 80065fa:	68e3      	ldr	r3, [r4, #12]
 80065fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006600:	1a9b      	subs	r3, r3, r2
 8006602:	429d      	cmp	r5, r3
 8006604:	db29      	blt.n	800665a <_printf_common+0xa6>
 8006606:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	3300      	adds	r3, #0
 800660e:	bf18      	it	ne
 8006610:	2301      	movne	r3, #1
 8006612:	0692      	lsls	r2, r2, #26
 8006614:	d42e      	bmi.n	8006674 <_printf_common+0xc0>
 8006616:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800661a:	4639      	mov	r1, r7
 800661c:	4630      	mov	r0, r6
 800661e:	47c0      	blx	r8
 8006620:	3001      	adds	r0, #1
 8006622:	d021      	beq.n	8006668 <_printf_common+0xb4>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	68e5      	ldr	r5, [r4, #12]
 8006628:	f8d9 2000 	ldr.w	r2, [r9]
 800662c:	f003 0306 	and.w	r3, r3, #6
 8006630:	2b04      	cmp	r3, #4
 8006632:	bf08      	it	eq
 8006634:	1aad      	subeq	r5, r5, r2
 8006636:	68a3      	ldr	r3, [r4, #8]
 8006638:	6922      	ldr	r2, [r4, #16]
 800663a:	bf0c      	ite	eq
 800663c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006640:	2500      	movne	r5, #0
 8006642:	4293      	cmp	r3, r2
 8006644:	bfc4      	itt	gt
 8006646:	1a9b      	subgt	r3, r3, r2
 8006648:	18ed      	addgt	r5, r5, r3
 800664a:	f04f 0900 	mov.w	r9, #0
 800664e:	341a      	adds	r4, #26
 8006650:	454d      	cmp	r5, r9
 8006652:	d11b      	bne.n	800668c <_printf_common+0xd8>
 8006654:	2000      	movs	r0, #0
 8006656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665a:	2301      	movs	r3, #1
 800665c:	4652      	mov	r2, sl
 800665e:	4639      	mov	r1, r7
 8006660:	4630      	mov	r0, r6
 8006662:	47c0      	blx	r8
 8006664:	3001      	adds	r0, #1
 8006666:	d103      	bne.n	8006670 <_printf_common+0xbc>
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006670:	3501      	adds	r5, #1
 8006672:	e7c2      	b.n	80065fa <_printf_common+0x46>
 8006674:	18e1      	adds	r1, r4, r3
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	2030      	movs	r0, #48	; 0x30
 800667a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800667e:	4422      	add	r2, r4
 8006680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006688:	3302      	adds	r3, #2
 800668a:	e7c4      	b.n	8006616 <_printf_common+0x62>
 800668c:	2301      	movs	r3, #1
 800668e:	4622      	mov	r2, r4
 8006690:	4639      	mov	r1, r7
 8006692:	4630      	mov	r0, r6
 8006694:	47c0      	blx	r8
 8006696:	3001      	adds	r0, #1
 8006698:	d0e6      	beq.n	8006668 <_printf_common+0xb4>
 800669a:	f109 0901 	add.w	r9, r9, #1
 800669e:	e7d7      	b.n	8006650 <_printf_common+0x9c>

080066a0 <_printf_i>:
 80066a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066a4:	4617      	mov	r7, r2
 80066a6:	7e0a      	ldrb	r2, [r1, #24]
 80066a8:	b085      	sub	sp, #20
 80066aa:	2a6e      	cmp	r2, #110	; 0x6e
 80066ac:	4698      	mov	r8, r3
 80066ae:	4606      	mov	r6, r0
 80066b0:	460c      	mov	r4, r1
 80066b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066b4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80066b8:	f000 80bc 	beq.w	8006834 <_printf_i+0x194>
 80066bc:	d81a      	bhi.n	80066f4 <_printf_i+0x54>
 80066be:	2a63      	cmp	r2, #99	; 0x63
 80066c0:	d02e      	beq.n	8006720 <_printf_i+0x80>
 80066c2:	d80a      	bhi.n	80066da <_printf_i+0x3a>
 80066c4:	2a00      	cmp	r2, #0
 80066c6:	f000 80c8 	beq.w	800685a <_printf_i+0x1ba>
 80066ca:	2a58      	cmp	r2, #88	; 0x58
 80066cc:	f000 808a 	beq.w	80067e4 <_printf_i+0x144>
 80066d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066d4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80066d8:	e02a      	b.n	8006730 <_printf_i+0x90>
 80066da:	2a64      	cmp	r2, #100	; 0x64
 80066dc:	d001      	beq.n	80066e2 <_printf_i+0x42>
 80066de:	2a69      	cmp	r2, #105	; 0x69
 80066e0:	d1f6      	bne.n	80066d0 <_printf_i+0x30>
 80066e2:	6821      	ldr	r1, [r4, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80066ea:	d023      	beq.n	8006734 <_printf_i+0x94>
 80066ec:	1d11      	adds	r1, r2, #4
 80066ee:	6019      	str	r1, [r3, #0]
 80066f0:	6813      	ldr	r3, [r2, #0]
 80066f2:	e027      	b.n	8006744 <_printf_i+0xa4>
 80066f4:	2a73      	cmp	r2, #115	; 0x73
 80066f6:	f000 80b4 	beq.w	8006862 <_printf_i+0x1c2>
 80066fa:	d808      	bhi.n	800670e <_printf_i+0x6e>
 80066fc:	2a6f      	cmp	r2, #111	; 0x6f
 80066fe:	d02a      	beq.n	8006756 <_printf_i+0xb6>
 8006700:	2a70      	cmp	r2, #112	; 0x70
 8006702:	d1e5      	bne.n	80066d0 <_printf_i+0x30>
 8006704:	680a      	ldr	r2, [r1, #0]
 8006706:	f042 0220 	orr.w	r2, r2, #32
 800670a:	600a      	str	r2, [r1, #0]
 800670c:	e003      	b.n	8006716 <_printf_i+0x76>
 800670e:	2a75      	cmp	r2, #117	; 0x75
 8006710:	d021      	beq.n	8006756 <_printf_i+0xb6>
 8006712:	2a78      	cmp	r2, #120	; 0x78
 8006714:	d1dc      	bne.n	80066d0 <_printf_i+0x30>
 8006716:	2278      	movs	r2, #120	; 0x78
 8006718:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800671c:	496e      	ldr	r1, [pc, #440]	; (80068d8 <_printf_i+0x238>)
 800671e:	e064      	b.n	80067ea <_printf_i+0x14a>
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006726:	1d11      	adds	r1, r2, #4
 8006728:	6019      	str	r1, [r3, #0]
 800672a:	6813      	ldr	r3, [r2, #0]
 800672c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006730:	2301      	movs	r3, #1
 8006732:	e0a3      	b.n	800687c <_printf_i+0x1dc>
 8006734:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006738:	f102 0104 	add.w	r1, r2, #4
 800673c:	6019      	str	r1, [r3, #0]
 800673e:	d0d7      	beq.n	80066f0 <_printf_i+0x50>
 8006740:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006744:	2b00      	cmp	r3, #0
 8006746:	da03      	bge.n	8006750 <_printf_i+0xb0>
 8006748:	222d      	movs	r2, #45	; 0x2d
 800674a:	425b      	negs	r3, r3
 800674c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006750:	4962      	ldr	r1, [pc, #392]	; (80068dc <_printf_i+0x23c>)
 8006752:	220a      	movs	r2, #10
 8006754:	e017      	b.n	8006786 <_printf_i+0xe6>
 8006756:	6820      	ldr	r0, [r4, #0]
 8006758:	6819      	ldr	r1, [r3, #0]
 800675a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800675e:	d003      	beq.n	8006768 <_printf_i+0xc8>
 8006760:	1d08      	adds	r0, r1, #4
 8006762:	6018      	str	r0, [r3, #0]
 8006764:	680b      	ldr	r3, [r1, #0]
 8006766:	e006      	b.n	8006776 <_printf_i+0xd6>
 8006768:	f010 0f40 	tst.w	r0, #64	; 0x40
 800676c:	f101 0004 	add.w	r0, r1, #4
 8006770:	6018      	str	r0, [r3, #0]
 8006772:	d0f7      	beq.n	8006764 <_printf_i+0xc4>
 8006774:	880b      	ldrh	r3, [r1, #0]
 8006776:	4959      	ldr	r1, [pc, #356]	; (80068dc <_printf_i+0x23c>)
 8006778:	2a6f      	cmp	r2, #111	; 0x6f
 800677a:	bf14      	ite	ne
 800677c:	220a      	movne	r2, #10
 800677e:	2208      	moveq	r2, #8
 8006780:	2000      	movs	r0, #0
 8006782:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006786:	6865      	ldr	r5, [r4, #4]
 8006788:	60a5      	str	r5, [r4, #8]
 800678a:	2d00      	cmp	r5, #0
 800678c:	f2c0 809c 	blt.w	80068c8 <_printf_i+0x228>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	f020 0004 	bic.w	r0, r0, #4
 8006796:	6020      	str	r0, [r4, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d13f      	bne.n	800681c <_printf_i+0x17c>
 800679c:	2d00      	cmp	r5, #0
 800679e:	f040 8095 	bne.w	80068cc <_printf_i+0x22c>
 80067a2:	4675      	mov	r5, lr
 80067a4:	2a08      	cmp	r2, #8
 80067a6:	d10b      	bne.n	80067c0 <_printf_i+0x120>
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	07da      	lsls	r2, r3, #31
 80067ac:	d508      	bpl.n	80067c0 <_printf_i+0x120>
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	6862      	ldr	r2, [r4, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	bfde      	ittt	le
 80067b6:	2330      	movle	r3, #48	; 0x30
 80067b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067c0:	ebae 0305 	sub.w	r3, lr, r5
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	f8cd 8000 	str.w	r8, [sp]
 80067ca:	463b      	mov	r3, r7
 80067cc:	aa03      	add	r2, sp, #12
 80067ce:	4621      	mov	r1, r4
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7ff feef 	bl	80065b4 <_printf_common>
 80067d6:	3001      	adds	r0, #1
 80067d8:	d155      	bne.n	8006886 <_printf_i+0x1e6>
 80067da:	f04f 30ff 	mov.w	r0, #4294967295
 80067de:	b005      	add	sp, #20
 80067e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067e4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80067e8:	493c      	ldr	r1, [pc, #240]	; (80068dc <_printf_i+0x23c>)
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80067f2:	f100 0504 	add.w	r5, r0, #4
 80067f6:	601d      	str	r5, [r3, #0]
 80067f8:	d001      	beq.n	80067fe <_printf_i+0x15e>
 80067fa:	6803      	ldr	r3, [r0, #0]
 80067fc:	e002      	b.n	8006804 <_printf_i+0x164>
 80067fe:	0655      	lsls	r5, r2, #25
 8006800:	d5fb      	bpl.n	80067fa <_printf_i+0x15a>
 8006802:	8803      	ldrh	r3, [r0, #0]
 8006804:	07d0      	lsls	r0, r2, #31
 8006806:	bf44      	itt	mi
 8006808:	f042 0220 	orrmi.w	r2, r2, #32
 800680c:	6022      	strmi	r2, [r4, #0]
 800680e:	b91b      	cbnz	r3, 8006818 <_printf_i+0x178>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	f022 0220 	bic.w	r2, r2, #32
 8006816:	6022      	str	r2, [r4, #0]
 8006818:	2210      	movs	r2, #16
 800681a:	e7b1      	b.n	8006780 <_printf_i+0xe0>
 800681c:	4675      	mov	r5, lr
 800681e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006822:	fb02 3310 	mls	r3, r2, r0, r3
 8006826:	5ccb      	ldrb	r3, [r1, r3]
 8006828:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800682c:	4603      	mov	r3, r0
 800682e:	2800      	cmp	r0, #0
 8006830:	d1f5      	bne.n	800681e <_printf_i+0x17e>
 8006832:	e7b7      	b.n	80067a4 <_printf_i+0x104>
 8006834:	6808      	ldr	r0, [r1, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	6949      	ldr	r1, [r1, #20]
 800683a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800683e:	d004      	beq.n	800684a <_printf_i+0x1aa>
 8006840:	1d10      	adds	r0, r2, #4
 8006842:	6018      	str	r0, [r3, #0]
 8006844:	6813      	ldr	r3, [r2, #0]
 8006846:	6019      	str	r1, [r3, #0]
 8006848:	e007      	b.n	800685a <_printf_i+0x1ba>
 800684a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800684e:	f102 0004 	add.w	r0, r2, #4
 8006852:	6018      	str	r0, [r3, #0]
 8006854:	6813      	ldr	r3, [r2, #0]
 8006856:	d0f6      	beq.n	8006846 <_printf_i+0x1a6>
 8006858:	8019      	strh	r1, [r3, #0]
 800685a:	2300      	movs	r3, #0
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	4675      	mov	r5, lr
 8006860:	e7b1      	b.n	80067c6 <_printf_i+0x126>
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	1d11      	adds	r1, r2, #4
 8006866:	6019      	str	r1, [r3, #0]
 8006868:	6815      	ldr	r5, [r2, #0]
 800686a:	6862      	ldr	r2, [r4, #4]
 800686c:	2100      	movs	r1, #0
 800686e:	4628      	mov	r0, r5
 8006870:	f7f9 fcb6 	bl	80001e0 <memchr>
 8006874:	b108      	cbz	r0, 800687a <_printf_i+0x1da>
 8006876:	1b40      	subs	r0, r0, r5
 8006878:	6060      	str	r0, [r4, #4]
 800687a:	6863      	ldr	r3, [r4, #4]
 800687c:	6123      	str	r3, [r4, #16]
 800687e:	2300      	movs	r3, #0
 8006880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006884:	e79f      	b.n	80067c6 <_printf_i+0x126>
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	462a      	mov	r2, r5
 800688a:	4639      	mov	r1, r7
 800688c:	4630      	mov	r0, r6
 800688e:	47c0      	blx	r8
 8006890:	3001      	adds	r0, #1
 8006892:	d0a2      	beq.n	80067da <_printf_i+0x13a>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	079b      	lsls	r3, r3, #30
 8006898:	d507      	bpl.n	80068aa <_printf_i+0x20a>
 800689a:	2500      	movs	r5, #0
 800689c:	f104 0919 	add.w	r9, r4, #25
 80068a0:	68e3      	ldr	r3, [r4, #12]
 80068a2:	9a03      	ldr	r2, [sp, #12]
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	429d      	cmp	r5, r3
 80068a8:	db05      	blt.n	80068b6 <_printf_i+0x216>
 80068aa:	68e0      	ldr	r0, [r4, #12]
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	4298      	cmp	r0, r3
 80068b0:	bfb8      	it	lt
 80068b2:	4618      	movlt	r0, r3
 80068b4:	e793      	b.n	80067de <_printf_i+0x13e>
 80068b6:	2301      	movs	r3, #1
 80068b8:	464a      	mov	r2, r9
 80068ba:	4639      	mov	r1, r7
 80068bc:	4630      	mov	r0, r6
 80068be:	47c0      	blx	r8
 80068c0:	3001      	adds	r0, #1
 80068c2:	d08a      	beq.n	80067da <_printf_i+0x13a>
 80068c4:	3501      	adds	r5, #1
 80068c6:	e7eb      	b.n	80068a0 <_printf_i+0x200>
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1a7      	bne.n	800681c <_printf_i+0x17c>
 80068cc:	780b      	ldrb	r3, [r1, #0]
 80068ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068d6:	e765      	b.n	80067a4 <_printf_i+0x104>
 80068d8:	08008db7 	.word	0x08008db7
 80068dc:	08008da6 	.word	0x08008da6

080068e0 <siprintf>:
 80068e0:	b40e      	push	{r1, r2, r3}
 80068e2:	b500      	push	{lr}
 80068e4:	b09c      	sub	sp, #112	; 0x70
 80068e6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80068ea:	ab1d      	add	r3, sp, #116	; 0x74
 80068ec:	f8ad 1014 	strh.w	r1, [sp, #20]
 80068f0:	9002      	str	r0, [sp, #8]
 80068f2:	9006      	str	r0, [sp, #24]
 80068f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068f8:	480a      	ldr	r0, [pc, #40]	; (8006924 <siprintf+0x44>)
 80068fa:	9104      	str	r1, [sp, #16]
 80068fc:	9107      	str	r1, [sp, #28]
 80068fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006902:	f853 2b04 	ldr.w	r2, [r3], #4
 8006906:	f8ad 1016 	strh.w	r1, [sp, #22]
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	a902      	add	r1, sp, #8
 8006910:	f001 fa60 	bl	8007dd4 <_svfiprintf_r>
 8006914:	9b02      	ldr	r3, [sp, #8]
 8006916:	2200      	movs	r2, #0
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	b01c      	add	sp, #112	; 0x70
 800691c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006920:	b003      	add	sp, #12
 8006922:	4770      	bx	lr
 8006924:	20000010 	.word	0x20000010

08006928 <quorem>:
 8006928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	6903      	ldr	r3, [r0, #16]
 800692e:	690c      	ldr	r4, [r1, #16]
 8006930:	429c      	cmp	r4, r3
 8006932:	4680      	mov	r8, r0
 8006934:	f300 8082 	bgt.w	8006a3c <quorem+0x114>
 8006938:	3c01      	subs	r4, #1
 800693a:	f101 0714 	add.w	r7, r1, #20
 800693e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006942:	f100 0614 	add.w	r6, r0, #20
 8006946:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800694a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800694e:	eb06 030e 	add.w	r3, r6, lr
 8006952:	3501      	adds	r5, #1
 8006954:	eb07 090e 	add.w	r9, r7, lr
 8006958:	9301      	str	r3, [sp, #4]
 800695a:	fbb0 f5f5 	udiv	r5, r0, r5
 800695e:	b395      	cbz	r5, 80069c6 <quorem+0x9e>
 8006960:	f04f 0a00 	mov.w	sl, #0
 8006964:	4638      	mov	r0, r7
 8006966:	46b4      	mov	ip, r6
 8006968:	46d3      	mov	fp, sl
 800696a:	f850 2b04 	ldr.w	r2, [r0], #4
 800696e:	b293      	uxth	r3, r2
 8006970:	fb05 a303 	mla	r3, r5, r3, sl
 8006974:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006978:	b29b      	uxth	r3, r3
 800697a:	ebab 0303 	sub.w	r3, fp, r3
 800697e:	0c12      	lsrs	r2, r2, #16
 8006980:	f8bc b000 	ldrh.w	fp, [ip]
 8006984:	fb05 a202 	mla	r2, r5, r2, sl
 8006988:	fa13 f38b 	uxtah	r3, r3, fp
 800698c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006990:	fa1f fb82 	uxth.w	fp, r2
 8006994:	f8dc 2000 	ldr.w	r2, [ip]
 8006998:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800699c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069a6:	4581      	cmp	r9, r0
 80069a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80069ac:	f84c 3b04 	str.w	r3, [ip], #4
 80069b0:	d2db      	bcs.n	800696a <quorem+0x42>
 80069b2:	f856 300e 	ldr.w	r3, [r6, lr]
 80069b6:	b933      	cbnz	r3, 80069c6 <quorem+0x9e>
 80069b8:	9b01      	ldr	r3, [sp, #4]
 80069ba:	3b04      	subs	r3, #4
 80069bc:	429e      	cmp	r6, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	d330      	bcc.n	8006a24 <quorem+0xfc>
 80069c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80069c6:	4640      	mov	r0, r8
 80069c8:	f001 f827 	bl	8007a1a <__mcmp>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	db25      	blt.n	8006a1c <quorem+0xf4>
 80069d0:	3501      	adds	r5, #1
 80069d2:	4630      	mov	r0, r6
 80069d4:	f04f 0e00 	mov.w	lr, #0
 80069d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80069dc:	f8d0 c000 	ldr.w	ip, [r0]
 80069e0:	b293      	uxth	r3, r2
 80069e2:	ebae 0303 	sub.w	r3, lr, r3
 80069e6:	0c12      	lsrs	r2, r2, #16
 80069e8:	fa13 f38c 	uxtah	r3, r3, ip
 80069ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069fa:	45b9      	cmp	r9, r7
 80069fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006a00:	f840 3b04 	str.w	r3, [r0], #4
 8006a04:	d2e8      	bcs.n	80069d8 <quorem+0xb0>
 8006a06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006a0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006a0e:	b92a      	cbnz	r2, 8006a1c <quorem+0xf4>
 8006a10:	3b04      	subs	r3, #4
 8006a12:	429e      	cmp	r6, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	d30b      	bcc.n	8006a30 <quorem+0x108>
 8006a18:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	b003      	add	sp, #12
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	3b04      	subs	r3, #4
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	d1ca      	bne.n	80069c2 <quorem+0x9a>
 8006a2c:	3c01      	subs	r4, #1
 8006a2e:	e7c5      	b.n	80069bc <quorem+0x94>
 8006a30:	6812      	ldr	r2, [r2, #0]
 8006a32:	3b04      	subs	r3, #4
 8006a34:	2a00      	cmp	r2, #0
 8006a36:	d1ef      	bne.n	8006a18 <quorem+0xf0>
 8006a38:	3c01      	subs	r4, #1
 8006a3a:	e7ea      	b.n	8006a12 <quorem+0xea>
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	e7ee      	b.n	8006a1e <quorem+0xf6>

08006a40 <_dtoa_r>:
 8006a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	ec57 6b10 	vmov	r6, r7, d0
 8006a48:	b097      	sub	sp, #92	; 0x5c
 8006a4a:	e9cd 6700 	strd	r6, r7, [sp]
 8006a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a50:	9107      	str	r1, [sp, #28]
 8006a52:	4604      	mov	r4, r0
 8006a54:	920a      	str	r2, [sp, #40]	; 0x28
 8006a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a58:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006a5a:	b93e      	cbnz	r6, 8006a6c <_dtoa_r+0x2c>
 8006a5c:	2010      	movs	r0, #16
 8006a5e:	f000 fdcb 	bl	80075f8 <malloc>
 8006a62:	6260      	str	r0, [r4, #36]	; 0x24
 8006a64:	6046      	str	r6, [r0, #4]
 8006a66:	6086      	str	r6, [r0, #8]
 8006a68:	6006      	str	r6, [r0, #0]
 8006a6a:	60c6      	str	r6, [r0, #12]
 8006a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a6e:	6819      	ldr	r1, [r3, #0]
 8006a70:	b151      	cbz	r1, 8006a88 <_dtoa_r+0x48>
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	604a      	str	r2, [r1, #4]
 8006a76:	2301      	movs	r3, #1
 8006a78:	4093      	lsls	r3, r2
 8006a7a:	608b      	str	r3, [r1, #8]
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 fdf7 	bl	8007670 <_Bfree>
 8006a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	9b01      	ldr	r3, [sp, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	bfbf      	itttt	lt
 8006a8e:	2301      	movlt	r3, #1
 8006a90:	602b      	strlt	r3, [r5, #0]
 8006a92:	9b01      	ldrlt	r3, [sp, #4]
 8006a94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a98:	bfb2      	itee	lt
 8006a9a:	9301      	strlt	r3, [sp, #4]
 8006a9c:	2300      	movge	r3, #0
 8006a9e:	602b      	strge	r3, [r5, #0]
 8006aa0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006aa4:	4ba8      	ldr	r3, [pc, #672]	; (8006d48 <_dtoa_r+0x308>)
 8006aa6:	ea33 0308 	bics.w	r3, r3, r8
 8006aaa:	d11b      	bne.n	8006ae4 <_dtoa_r+0xa4>
 8006aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006aae:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	9b00      	ldr	r3, [sp, #0]
 8006ab6:	b923      	cbnz	r3, 8006ac2 <_dtoa_r+0x82>
 8006ab8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006abc:	2800      	cmp	r0, #0
 8006abe:	f000 8578 	beq.w	80075b2 <_dtoa_r+0xb72>
 8006ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ac4:	b953      	cbnz	r3, 8006adc <_dtoa_r+0x9c>
 8006ac6:	4ba1      	ldr	r3, [pc, #644]	; (8006d4c <_dtoa_r+0x30c>)
 8006ac8:	e021      	b.n	8006b0e <_dtoa_r+0xce>
 8006aca:	4ba1      	ldr	r3, [pc, #644]	; (8006d50 <_dtoa_r+0x310>)
 8006acc:	9302      	str	r3, [sp, #8]
 8006ace:	3308      	adds	r3, #8
 8006ad0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	9802      	ldr	r0, [sp, #8]
 8006ad6:	b017      	add	sp, #92	; 0x5c
 8006ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006adc:	4b9b      	ldr	r3, [pc, #620]	; (8006d4c <_dtoa_r+0x30c>)
 8006ade:	9302      	str	r3, [sp, #8]
 8006ae0:	3303      	adds	r3, #3
 8006ae2:	e7f5      	b.n	8006ad0 <_dtoa_r+0x90>
 8006ae4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2300      	movs	r3, #0
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f7f9 ffe6 	bl	8000ac0 <__aeabi_dcmpeq>
 8006af4:	4681      	mov	r9, r0
 8006af6:	b160      	cbz	r0, 8006b12 <_dtoa_r+0xd2>
 8006af8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006afa:	2301      	movs	r3, #1
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8553 	beq.w	80075ac <_dtoa_r+0xb6c>
 8006b06:	4b93      	ldr	r3, [pc, #588]	; (8006d54 <_dtoa_r+0x314>)
 8006b08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	9302      	str	r3, [sp, #8]
 8006b10:	e7e0      	b.n	8006ad4 <_dtoa_r+0x94>
 8006b12:	aa14      	add	r2, sp, #80	; 0x50
 8006b14:	a915      	add	r1, sp, #84	; 0x54
 8006b16:	ec47 6b10 	vmov	d0, r6, r7
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 fff5 	bl	8007b0a <__d2b>
 8006b20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b24:	4682      	mov	sl, r0
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	d07e      	beq.n	8006c28 <_dtoa_r+0x1e8>
 8006b2a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006b32:	4630      	mov	r0, r6
 8006b34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006b38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b3c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8006b40:	2200      	movs	r2, #0
 8006b42:	4b85      	ldr	r3, [pc, #532]	; (8006d58 <_dtoa_r+0x318>)
 8006b44:	f7f9 fba0 	bl	8000288 <__aeabi_dsub>
 8006b48:	a379      	add	r3, pc, #484	; (adr r3, 8006d30 <_dtoa_r+0x2f0>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f7f9 fd4f 	bl	80005f0 <__aeabi_dmul>
 8006b52:	a379      	add	r3, pc, #484	; (adr r3, 8006d38 <_dtoa_r+0x2f8>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fb98 	bl	800028c <__adddf3>
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	4628      	mov	r0, r5
 8006b60:	460f      	mov	r7, r1
 8006b62:	f7f9 fcdf 	bl	8000524 <__aeabi_i2d>
 8006b66:	a376      	add	r3, pc, #472	; (adr r3, 8006d40 <_dtoa_r+0x300>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fd40 	bl	80005f0 <__aeabi_dmul>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4630      	mov	r0, r6
 8006b76:	4639      	mov	r1, r7
 8006b78:	f7f9 fb88 	bl	800028c <__adddf3>
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	460f      	mov	r7, r1
 8006b80:	f7f9 ffe6 	bl	8000b50 <__aeabi_d2iz>
 8006b84:	2200      	movs	r2, #0
 8006b86:	4683      	mov	fp, r0
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	f7f9 ffa1 	bl	8000ad4 <__aeabi_dcmplt>
 8006b92:	b158      	cbz	r0, 8006bac <_dtoa_r+0x16c>
 8006b94:	4658      	mov	r0, fp
 8006b96:	f7f9 fcc5 	bl	8000524 <__aeabi_i2d>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	4639      	mov	r1, r7
 8006ba2:	f7f9 ff8d 	bl	8000ac0 <__aeabi_dcmpeq>
 8006ba6:	b908      	cbnz	r0, 8006bac <_dtoa_r+0x16c>
 8006ba8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bac:	f1bb 0f16 	cmp.w	fp, #22
 8006bb0:	d859      	bhi.n	8006c66 <_dtoa_r+0x226>
 8006bb2:	496a      	ldr	r1, [pc, #424]	; (8006d5c <_dtoa_r+0x31c>)
 8006bb4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc0:	f7f9 ffa6 	bl	8000b10 <__aeabi_dcmpgt>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d050      	beq.n	8006c6a <_dtoa_r+0x22a>
 8006bc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bcc:	2300      	movs	r3, #0
 8006bce:	930e      	str	r3, [sp, #56]	; 0x38
 8006bd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bd2:	1b5d      	subs	r5, r3, r5
 8006bd4:	1e6b      	subs	r3, r5, #1
 8006bd6:	9306      	str	r3, [sp, #24]
 8006bd8:	bf45      	ittet	mi
 8006bda:	f1c5 0301 	rsbmi	r3, r5, #1
 8006bde:	9305      	strmi	r3, [sp, #20]
 8006be0:	2300      	movpl	r3, #0
 8006be2:	2300      	movmi	r3, #0
 8006be4:	bf4c      	ite	mi
 8006be6:	9306      	strmi	r3, [sp, #24]
 8006be8:	9305      	strpl	r3, [sp, #20]
 8006bea:	f1bb 0f00 	cmp.w	fp, #0
 8006bee:	db3e      	blt.n	8006c6e <_dtoa_r+0x22e>
 8006bf0:	9b06      	ldr	r3, [sp, #24]
 8006bf2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006bf6:	445b      	add	r3, fp
 8006bf8:	9306      	str	r3, [sp, #24]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9308      	str	r3, [sp, #32]
 8006bfe:	9b07      	ldr	r3, [sp, #28]
 8006c00:	2b09      	cmp	r3, #9
 8006c02:	f200 80af 	bhi.w	8006d64 <_dtoa_r+0x324>
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	bfc4      	itt	gt
 8006c0a:	3b04      	subgt	r3, #4
 8006c0c:	9307      	strgt	r3, [sp, #28]
 8006c0e:	9b07      	ldr	r3, [sp, #28]
 8006c10:	f1a3 0302 	sub.w	r3, r3, #2
 8006c14:	bfcc      	ite	gt
 8006c16:	2600      	movgt	r6, #0
 8006c18:	2601      	movle	r6, #1
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	f200 80ae 	bhi.w	8006d7c <_dtoa_r+0x33c>
 8006c20:	e8df f003 	tbb	[pc, r3]
 8006c24:	772f8482 	.word	0x772f8482
 8006c28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006c2c:	441d      	add	r5, r3
 8006c2e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	dd11      	ble.n	8006c5a <_dtoa_r+0x21a>
 8006c36:	9a00      	ldr	r2, [sp, #0]
 8006c38:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006c3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006c40:	fa22 f000 	lsr.w	r0, r2, r0
 8006c44:	fa08 f303 	lsl.w	r3, r8, r3
 8006c48:	4318      	orrs	r0, r3
 8006c4a:	f7f9 fc5b 	bl	8000504 <__aeabi_ui2d>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006c54:	3d01      	subs	r5, #1
 8006c56:	9312      	str	r3, [sp, #72]	; 0x48
 8006c58:	e772      	b.n	8006b40 <_dtoa_r+0x100>
 8006c5a:	f1c3 0020 	rsb	r0, r3, #32
 8006c5e:	9b00      	ldr	r3, [sp, #0]
 8006c60:	fa03 f000 	lsl.w	r0, r3, r0
 8006c64:	e7f1      	b.n	8006c4a <_dtoa_r+0x20a>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e7b1      	b.n	8006bce <_dtoa_r+0x18e>
 8006c6a:	900e      	str	r0, [sp, #56]	; 0x38
 8006c6c:	e7b0      	b.n	8006bd0 <_dtoa_r+0x190>
 8006c6e:	9b05      	ldr	r3, [sp, #20]
 8006c70:	eba3 030b 	sub.w	r3, r3, fp
 8006c74:	9305      	str	r3, [sp, #20]
 8006c76:	f1cb 0300 	rsb	r3, fp, #0
 8006c7a:	9308      	str	r3, [sp, #32]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c80:	e7bd      	b.n	8006bfe <_dtoa_r+0x1be>
 8006c82:	2301      	movs	r3, #1
 8006c84:	9309      	str	r3, [sp, #36]	; 0x24
 8006c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dd7a      	ble.n	8006d82 <_dtoa_r+0x342>
 8006c8c:	9304      	str	r3, [sp, #16]
 8006c8e:	9303      	str	r3, [sp, #12]
 8006c90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c92:	2200      	movs	r2, #0
 8006c94:	606a      	str	r2, [r5, #4]
 8006c96:	2104      	movs	r1, #4
 8006c98:	f101 0214 	add.w	r2, r1, #20
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d975      	bls.n	8006d8c <_dtoa_r+0x34c>
 8006ca0:	6869      	ldr	r1, [r5, #4]
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 fcb0 	bl	8007608 <_Balloc>
 8006ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006caa:	6028      	str	r0, [r5, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	9302      	str	r3, [sp, #8]
 8006cb0:	9b03      	ldr	r3, [sp, #12]
 8006cb2:	2b0e      	cmp	r3, #14
 8006cb4:	f200 80e5 	bhi.w	8006e82 <_dtoa_r+0x442>
 8006cb8:	2e00      	cmp	r6, #0
 8006cba:	f000 80e2 	beq.w	8006e82 <_dtoa_r+0x442>
 8006cbe:	ed9d 7b00 	vldr	d7, [sp]
 8006cc2:	f1bb 0f00 	cmp.w	fp, #0
 8006cc6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006cca:	dd74      	ble.n	8006db6 <_dtoa_r+0x376>
 8006ccc:	4a23      	ldr	r2, [pc, #140]	; (8006d5c <_dtoa_r+0x31c>)
 8006cce:	f00b 030f 	and.w	r3, fp, #15
 8006cd2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006cd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006cda:	06f0      	lsls	r0, r6, #27
 8006cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ce0:	d559      	bpl.n	8006d96 <_dtoa_r+0x356>
 8006ce2:	4b1f      	ldr	r3, [pc, #124]	; (8006d60 <_dtoa_r+0x320>)
 8006ce4:	ec51 0b17 	vmov	r0, r1, d7
 8006ce8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cec:	f7f9 fdaa 	bl	8000844 <__aeabi_ddiv>
 8006cf0:	e9cd 0100 	strd	r0, r1, [sp]
 8006cf4:	f006 060f 	and.w	r6, r6, #15
 8006cf8:	2503      	movs	r5, #3
 8006cfa:	4f19      	ldr	r7, [pc, #100]	; (8006d60 <_dtoa_r+0x320>)
 8006cfc:	2e00      	cmp	r6, #0
 8006cfe:	d14c      	bne.n	8006d9a <_dtoa_r+0x35a>
 8006d00:	4642      	mov	r2, r8
 8006d02:	464b      	mov	r3, r9
 8006d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d08:	f7f9 fd9c 	bl	8000844 <__aeabi_ddiv>
 8006d0c:	e9cd 0100 	strd	r0, r1, [sp]
 8006d10:	e06a      	b.n	8006de8 <_dtoa_r+0x3a8>
 8006d12:	2301      	movs	r3, #1
 8006d14:	9309      	str	r3, [sp, #36]	; 0x24
 8006d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d18:	445b      	add	r3, fp
 8006d1a:	9304      	str	r3, [sp, #16]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	9303      	str	r3, [sp, #12]
 8006d22:	bfb8      	it	lt
 8006d24:	2301      	movlt	r3, #1
 8006d26:	e7b3      	b.n	8006c90 <_dtoa_r+0x250>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e7ab      	b.n	8006c84 <_dtoa_r+0x244>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e7f1      	b.n	8006d14 <_dtoa_r+0x2d4>
 8006d30:	636f4361 	.word	0x636f4361
 8006d34:	3fd287a7 	.word	0x3fd287a7
 8006d38:	8b60c8b3 	.word	0x8b60c8b3
 8006d3c:	3fc68a28 	.word	0x3fc68a28
 8006d40:	509f79fb 	.word	0x509f79fb
 8006d44:	3fd34413 	.word	0x3fd34413
 8006d48:	7ff00000 	.word	0x7ff00000
 8006d4c:	08008dd1 	.word	0x08008dd1
 8006d50:	08008dc8 	.word	0x08008dc8
 8006d54:	08008da5 	.word	0x08008da5
 8006d58:	3ff80000 	.word	0x3ff80000
 8006d5c:	08008e00 	.word	0x08008e00
 8006d60:	08008dd8 	.word	0x08008dd8
 8006d64:	2601      	movs	r6, #1
 8006d66:	2300      	movs	r3, #0
 8006d68:	9307      	str	r3, [sp, #28]
 8006d6a:	9609      	str	r6, [sp, #36]	; 0x24
 8006d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d70:	9304      	str	r3, [sp, #16]
 8006d72:	9303      	str	r3, [sp, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	2312      	movs	r3, #18
 8006d78:	920a      	str	r2, [sp, #40]	; 0x28
 8006d7a:	e789      	b.n	8006c90 <_dtoa_r+0x250>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d80:	e7f4      	b.n	8006d6c <_dtoa_r+0x32c>
 8006d82:	2301      	movs	r3, #1
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	e7f5      	b.n	8006d78 <_dtoa_r+0x338>
 8006d8c:	686a      	ldr	r2, [r5, #4]
 8006d8e:	3201      	adds	r2, #1
 8006d90:	606a      	str	r2, [r5, #4]
 8006d92:	0049      	lsls	r1, r1, #1
 8006d94:	e780      	b.n	8006c98 <_dtoa_r+0x258>
 8006d96:	2502      	movs	r5, #2
 8006d98:	e7af      	b.n	8006cfa <_dtoa_r+0x2ba>
 8006d9a:	07f1      	lsls	r1, r6, #31
 8006d9c:	d508      	bpl.n	8006db0 <_dtoa_r+0x370>
 8006d9e:	4640      	mov	r0, r8
 8006da0:	4649      	mov	r1, r9
 8006da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da6:	f7f9 fc23 	bl	80005f0 <__aeabi_dmul>
 8006daa:	3501      	adds	r5, #1
 8006dac:	4680      	mov	r8, r0
 8006dae:	4689      	mov	r9, r1
 8006db0:	1076      	asrs	r6, r6, #1
 8006db2:	3708      	adds	r7, #8
 8006db4:	e7a2      	b.n	8006cfc <_dtoa_r+0x2bc>
 8006db6:	f000 809d 	beq.w	8006ef4 <_dtoa_r+0x4b4>
 8006dba:	f1cb 0600 	rsb	r6, fp, #0
 8006dbe:	4b9f      	ldr	r3, [pc, #636]	; (800703c <_dtoa_r+0x5fc>)
 8006dc0:	4f9f      	ldr	r7, [pc, #636]	; (8007040 <_dtoa_r+0x600>)
 8006dc2:	f006 020f 	and.w	r2, r6, #15
 8006dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dd2:	f7f9 fc0d 	bl	80005f0 <__aeabi_dmul>
 8006dd6:	e9cd 0100 	strd	r0, r1, [sp]
 8006dda:	1136      	asrs	r6, r6, #4
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2502      	movs	r5, #2
 8006de0:	2e00      	cmp	r6, #0
 8006de2:	d17c      	bne.n	8006ede <_dtoa_r+0x49e>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d191      	bne.n	8006d0c <_dtoa_r+0x2cc>
 8006de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 8084 	beq.w	8006ef8 <_dtoa_r+0x4b8>
 8006df0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8006df4:	2200      	movs	r2, #0
 8006df6:	4b93      	ldr	r3, [pc, #588]	; (8007044 <_dtoa_r+0x604>)
 8006df8:	4640      	mov	r0, r8
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	f7f9 fe6a 	bl	8000ad4 <__aeabi_dcmplt>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d079      	beq.n	8006ef8 <_dtoa_r+0x4b8>
 8006e04:	9b03      	ldr	r3, [sp, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d076      	beq.n	8006ef8 <_dtoa_r+0x4b8>
 8006e0a:	9b04      	ldr	r3, [sp, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dd34      	ble.n	8006e7a <_dtoa_r+0x43a>
 8006e10:	2200      	movs	r2, #0
 8006e12:	4b8d      	ldr	r3, [pc, #564]	; (8007048 <_dtoa_r+0x608>)
 8006e14:	4640      	mov	r0, r8
 8006e16:	4649      	mov	r1, r9
 8006e18:	f7f9 fbea 	bl	80005f0 <__aeabi_dmul>
 8006e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8006e20:	9e04      	ldr	r6, [sp, #16]
 8006e22:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006e26:	3501      	adds	r5, #1
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f7f9 fb7b 	bl	8000524 <__aeabi_i2d>
 8006e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e32:	f7f9 fbdd 	bl	80005f0 <__aeabi_dmul>
 8006e36:	2200      	movs	r2, #0
 8006e38:	4b84      	ldr	r3, [pc, #528]	; (800704c <_dtoa_r+0x60c>)
 8006e3a:	f7f9 fa27 	bl	800028c <__adddf3>
 8006e3e:	4680      	mov	r8, r0
 8006e40:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006e44:	2e00      	cmp	r6, #0
 8006e46:	d15a      	bne.n	8006efe <_dtoa_r+0x4be>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4b81      	ldr	r3, [pc, #516]	; (8007050 <_dtoa_r+0x610>)
 8006e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e50:	f7f9 fa1a 	bl	8000288 <__aeabi_dsub>
 8006e54:	4642      	mov	r2, r8
 8006e56:	464b      	mov	r3, r9
 8006e58:	e9cd 0100 	strd	r0, r1, [sp]
 8006e5c:	f7f9 fe58 	bl	8000b10 <__aeabi_dcmpgt>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	f040 829b 	bne.w	800739c <_dtoa_r+0x95c>
 8006e66:	4642      	mov	r2, r8
 8006e68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e70:	f7f9 fe30 	bl	8000ad4 <__aeabi_dcmplt>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	f040 828f 	bne.w	8007398 <_dtoa_r+0x958>
 8006e7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e7e:	e9cd 2300 	strd	r2, r3, [sp]
 8006e82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f2c0 8150 	blt.w	800712a <_dtoa_r+0x6ea>
 8006e8a:	f1bb 0f0e 	cmp.w	fp, #14
 8006e8e:	f300 814c 	bgt.w	800712a <_dtoa_r+0x6ea>
 8006e92:	4b6a      	ldr	r3, [pc, #424]	; (800703c <_dtoa_r+0x5fc>)
 8006e94:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f280 80da 	bge.w	8007058 <_dtoa_r+0x618>
 8006ea4:	9b03      	ldr	r3, [sp, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f300 80d6 	bgt.w	8007058 <_dtoa_r+0x618>
 8006eac:	f040 8273 	bne.w	8007396 <_dtoa_r+0x956>
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	4b67      	ldr	r3, [pc, #412]	; (8007050 <_dtoa_r+0x610>)
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 fb9a 	bl	80005f0 <__aeabi_dmul>
 8006ebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ec0:	f7f9 fe1c 	bl	8000afc <__aeabi_dcmpge>
 8006ec4:	9e03      	ldr	r6, [sp, #12]
 8006ec6:	4637      	mov	r7, r6
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f040 824a 	bne.w	8007362 <_dtoa_r+0x922>
 8006ece:	9b02      	ldr	r3, [sp, #8]
 8006ed0:	9a02      	ldr	r2, [sp, #8]
 8006ed2:	1c5d      	adds	r5, r3, #1
 8006ed4:	2331      	movs	r3, #49	; 0x31
 8006ed6:	7013      	strb	r3, [r2, #0]
 8006ed8:	f10b 0b01 	add.w	fp, fp, #1
 8006edc:	e245      	b.n	800736a <_dtoa_r+0x92a>
 8006ede:	07f2      	lsls	r2, r6, #31
 8006ee0:	d505      	bpl.n	8006eee <_dtoa_r+0x4ae>
 8006ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee6:	f7f9 fb83 	bl	80005f0 <__aeabi_dmul>
 8006eea:	3501      	adds	r5, #1
 8006eec:	2301      	movs	r3, #1
 8006eee:	1076      	asrs	r6, r6, #1
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	e775      	b.n	8006de0 <_dtoa_r+0x3a0>
 8006ef4:	2502      	movs	r5, #2
 8006ef6:	e777      	b.n	8006de8 <_dtoa_r+0x3a8>
 8006ef8:	465f      	mov	r7, fp
 8006efa:	9e03      	ldr	r6, [sp, #12]
 8006efc:	e794      	b.n	8006e28 <_dtoa_r+0x3e8>
 8006efe:	9a02      	ldr	r2, [sp, #8]
 8006f00:	4b4e      	ldr	r3, [pc, #312]	; (800703c <_dtoa_r+0x5fc>)
 8006f02:	4432      	add	r2, r6
 8006f04:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f08:	1e71      	subs	r1, r6, #1
 8006f0a:	2a00      	cmp	r2, #0
 8006f0c:	d048      	beq.n	8006fa0 <_dtoa_r+0x560>
 8006f0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	2000      	movs	r0, #0
 8006f18:	494e      	ldr	r1, [pc, #312]	; (8007054 <_dtoa_r+0x614>)
 8006f1a:	f7f9 fc93 	bl	8000844 <__aeabi_ddiv>
 8006f1e:	4642      	mov	r2, r8
 8006f20:	464b      	mov	r3, r9
 8006f22:	f7f9 f9b1 	bl	8000288 <__aeabi_dsub>
 8006f26:	9d02      	ldr	r5, [sp, #8]
 8006f28:	4680      	mov	r8, r0
 8006f2a:	4689      	mov	r9, r1
 8006f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f30:	f7f9 fe0e 	bl	8000b50 <__aeabi_d2iz>
 8006f34:	4606      	mov	r6, r0
 8006f36:	f7f9 faf5 	bl	8000524 <__aeabi_i2d>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f42:	f7f9 f9a1 	bl	8000288 <__aeabi_dsub>
 8006f46:	3630      	adds	r6, #48	; 0x30
 8006f48:	f805 6b01 	strb.w	r6, [r5], #1
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	464b      	mov	r3, r9
 8006f50:	e9cd 0100 	strd	r0, r1, [sp]
 8006f54:	f7f9 fdbe 	bl	8000ad4 <__aeabi_dcmplt>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d165      	bne.n	8007028 <_dtoa_r+0x5e8>
 8006f5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f60:	2000      	movs	r0, #0
 8006f62:	4938      	ldr	r1, [pc, #224]	; (8007044 <_dtoa_r+0x604>)
 8006f64:	f7f9 f990 	bl	8000288 <__aeabi_dsub>
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	f7f9 fdb2 	bl	8000ad4 <__aeabi_dcmplt>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f040 80ba 	bne.w	80070ea <_dtoa_r+0x6aa>
 8006f76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f78:	429d      	cmp	r5, r3
 8006f7a:	f43f af7e 	beq.w	8006e7a <_dtoa_r+0x43a>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4b31      	ldr	r3, [pc, #196]	; (8007048 <_dtoa_r+0x608>)
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 fb33 	bl	80005f0 <__aeabi_dmul>
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	4689      	mov	r9, r1
 8006f90:	4b2d      	ldr	r3, [pc, #180]	; (8007048 <_dtoa_r+0x608>)
 8006f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f96:	f7f9 fb2b 	bl	80005f0 <__aeabi_dmul>
 8006f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f9e:	e7c5      	b.n	8006f2c <_dtoa_r+0x4ec>
 8006fa0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fac:	f7f9 fb20 	bl	80005f0 <__aeabi_dmul>
 8006fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fb4:	9d02      	ldr	r5, [sp, #8]
 8006fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fba:	f7f9 fdc9 	bl	8000b50 <__aeabi_d2iz>
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	f7f9 fab0 	bl	8000524 <__aeabi_i2d>
 8006fc4:	3630      	adds	r6, #48	; 0x30
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fce:	f7f9 f95b 	bl	8000288 <__aeabi_dsub>
 8006fd2:	f805 6b01 	strb.w	r6, [r5], #1
 8006fd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fd8:	42ab      	cmp	r3, r5
 8006fda:	4680      	mov	r8, r0
 8006fdc:	4689      	mov	r9, r1
 8006fde:	f04f 0200 	mov.w	r2, #0
 8006fe2:	d125      	bne.n	8007030 <_dtoa_r+0x5f0>
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <_dtoa_r+0x614>)
 8006fe6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fea:	f7f9 f94f 	bl	800028c <__adddf3>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	f7f9 fd8b 	bl	8000b10 <__aeabi_dcmpgt>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d175      	bne.n	80070ea <_dtoa_r+0x6aa>
 8006ffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007002:	2000      	movs	r0, #0
 8007004:	4913      	ldr	r1, [pc, #76]	; (8007054 <_dtoa_r+0x614>)
 8007006:	f7f9 f93f 	bl	8000288 <__aeabi_dsub>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4640      	mov	r0, r8
 8007010:	4649      	mov	r1, r9
 8007012:	f7f9 fd5f 	bl	8000ad4 <__aeabi_dcmplt>
 8007016:	2800      	cmp	r0, #0
 8007018:	f43f af2f 	beq.w	8006e7a <_dtoa_r+0x43a>
 800701c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007020:	2b30      	cmp	r3, #48	; 0x30
 8007022:	f105 32ff 	add.w	r2, r5, #4294967295
 8007026:	d001      	beq.n	800702c <_dtoa_r+0x5ec>
 8007028:	46bb      	mov	fp, r7
 800702a:	e04d      	b.n	80070c8 <_dtoa_r+0x688>
 800702c:	4615      	mov	r5, r2
 800702e:	e7f5      	b.n	800701c <_dtoa_r+0x5dc>
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <_dtoa_r+0x608>)
 8007032:	f7f9 fadd 	bl	80005f0 <__aeabi_dmul>
 8007036:	e9cd 0100 	strd	r0, r1, [sp]
 800703a:	e7bc      	b.n	8006fb6 <_dtoa_r+0x576>
 800703c:	08008e00 	.word	0x08008e00
 8007040:	08008dd8 	.word	0x08008dd8
 8007044:	3ff00000 	.word	0x3ff00000
 8007048:	40240000 	.word	0x40240000
 800704c:	401c0000 	.word	0x401c0000
 8007050:	40140000 	.word	0x40140000
 8007054:	3fe00000 	.word	0x3fe00000
 8007058:	e9dd 6700 	ldrd	r6, r7, [sp]
 800705c:	9d02      	ldr	r5, [sp, #8]
 800705e:	4642      	mov	r2, r8
 8007060:	464b      	mov	r3, r9
 8007062:	4630      	mov	r0, r6
 8007064:	4639      	mov	r1, r7
 8007066:	f7f9 fbed 	bl	8000844 <__aeabi_ddiv>
 800706a:	f7f9 fd71 	bl	8000b50 <__aeabi_d2iz>
 800706e:	9000      	str	r0, [sp, #0]
 8007070:	f7f9 fa58 	bl	8000524 <__aeabi_i2d>
 8007074:	4642      	mov	r2, r8
 8007076:	464b      	mov	r3, r9
 8007078:	f7f9 faba 	bl	80005f0 <__aeabi_dmul>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4630      	mov	r0, r6
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 f900 	bl	8000288 <__aeabi_dsub>
 8007088:	9e00      	ldr	r6, [sp, #0]
 800708a:	9f03      	ldr	r7, [sp, #12]
 800708c:	3630      	adds	r6, #48	; 0x30
 800708e:	f805 6b01 	strb.w	r6, [r5], #1
 8007092:	9e02      	ldr	r6, [sp, #8]
 8007094:	1bae      	subs	r6, r5, r6
 8007096:	42b7      	cmp	r7, r6
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	d138      	bne.n	8007110 <_dtoa_r+0x6d0>
 800709e:	f7f9 f8f5 	bl	800028c <__adddf3>
 80070a2:	4606      	mov	r6, r0
 80070a4:	460f      	mov	r7, r1
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4640      	mov	r0, r8
 80070ac:	4649      	mov	r1, r9
 80070ae:	f7f9 fd11 	bl	8000ad4 <__aeabi_dcmplt>
 80070b2:	b9c8      	cbnz	r0, 80070e8 <_dtoa_r+0x6a8>
 80070b4:	4632      	mov	r2, r6
 80070b6:	463b      	mov	r3, r7
 80070b8:	4640      	mov	r0, r8
 80070ba:	4649      	mov	r1, r9
 80070bc:	f7f9 fd00 	bl	8000ac0 <__aeabi_dcmpeq>
 80070c0:	b110      	cbz	r0, 80070c8 <_dtoa_r+0x688>
 80070c2:	9b00      	ldr	r3, [sp, #0]
 80070c4:	07db      	lsls	r3, r3, #31
 80070c6:	d40f      	bmi.n	80070e8 <_dtoa_r+0x6a8>
 80070c8:	4651      	mov	r1, sl
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fad0 	bl	8007670 <_Bfree>
 80070d0:	2300      	movs	r3, #0
 80070d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070d4:	702b      	strb	r3, [r5, #0]
 80070d6:	f10b 0301 	add.w	r3, fp, #1
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f43f acf8 	beq.w	8006ad4 <_dtoa_r+0x94>
 80070e4:	601d      	str	r5, [r3, #0]
 80070e6:	e4f5      	b.n	8006ad4 <_dtoa_r+0x94>
 80070e8:	465f      	mov	r7, fp
 80070ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070ee:	2a39      	cmp	r2, #57	; 0x39
 80070f0:	f105 33ff 	add.w	r3, r5, #4294967295
 80070f4:	d106      	bne.n	8007104 <_dtoa_r+0x6c4>
 80070f6:	9a02      	ldr	r2, [sp, #8]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d107      	bne.n	800710c <_dtoa_r+0x6cc>
 80070fc:	2330      	movs	r3, #48	; 0x30
 80070fe:	7013      	strb	r3, [r2, #0]
 8007100:	3701      	adds	r7, #1
 8007102:	4613      	mov	r3, r2
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	3201      	adds	r2, #1
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	e78d      	b.n	8007028 <_dtoa_r+0x5e8>
 800710c:	461d      	mov	r5, r3
 800710e:	e7ec      	b.n	80070ea <_dtoa_r+0x6aa>
 8007110:	2200      	movs	r2, #0
 8007112:	4ba4      	ldr	r3, [pc, #656]	; (80073a4 <_dtoa_r+0x964>)
 8007114:	f7f9 fa6c 	bl	80005f0 <__aeabi_dmul>
 8007118:	2200      	movs	r2, #0
 800711a:	2300      	movs	r3, #0
 800711c:	4606      	mov	r6, r0
 800711e:	460f      	mov	r7, r1
 8007120:	f7f9 fcce 	bl	8000ac0 <__aeabi_dcmpeq>
 8007124:	2800      	cmp	r0, #0
 8007126:	d09a      	beq.n	800705e <_dtoa_r+0x61e>
 8007128:	e7ce      	b.n	80070c8 <_dtoa_r+0x688>
 800712a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800712c:	2a00      	cmp	r2, #0
 800712e:	f000 80cd 	beq.w	80072cc <_dtoa_r+0x88c>
 8007132:	9a07      	ldr	r2, [sp, #28]
 8007134:	2a01      	cmp	r2, #1
 8007136:	f300 80af 	bgt.w	8007298 <_dtoa_r+0x858>
 800713a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800713c:	2a00      	cmp	r2, #0
 800713e:	f000 80a7 	beq.w	8007290 <_dtoa_r+0x850>
 8007142:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007146:	9e08      	ldr	r6, [sp, #32]
 8007148:	9d05      	ldr	r5, [sp, #20]
 800714a:	9a05      	ldr	r2, [sp, #20]
 800714c:	441a      	add	r2, r3
 800714e:	9205      	str	r2, [sp, #20]
 8007150:	9a06      	ldr	r2, [sp, #24]
 8007152:	2101      	movs	r1, #1
 8007154:	441a      	add	r2, r3
 8007156:	4620      	mov	r0, r4
 8007158:	9206      	str	r2, [sp, #24]
 800715a:	f000 fb29 	bl	80077b0 <__i2b>
 800715e:	4607      	mov	r7, r0
 8007160:	2d00      	cmp	r5, #0
 8007162:	dd0c      	ble.n	800717e <_dtoa_r+0x73e>
 8007164:	9b06      	ldr	r3, [sp, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	dd09      	ble.n	800717e <_dtoa_r+0x73e>
 800716a:	42ab      	cmp	r3, r5
 800716c:	9a05      	ldr	r2, [sp, #20]
 800716e:	bfa8      	it	ge
 8007170:	462b      	movge	r3, r5
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	9205      	str	r2, [sp, #20]
 8007176:	9a06      	ldr	r2, [sp, #24]
 8007178:	1aed      	subs	r5, r5, r3
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	9306      	str	r3, [sp, #24]
 800717e:	9b08      	ldr	r3, [sp, #32]
 8007180:	b1f3      	cbz	r3, 80071c0 <_dtoa_r+0x780>
 8007182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80a5 	beq.w	80072d4 <_dtoa_r+0x894>
 800718a:	2e00      	cmp	r6, #0
 800718c:	dd10      	ble.n	80071b0 <_dtoa_r+0x770>
 800718e:	4639      	mov	r1, r7
 8007190:	4632      	mov	r2, r6
 8007192:	4620      	mov	r0, r4
 8007194:	f000 fba2 	bl	80078dc <__pow5mult>
 8007198:	4652      	mov	r2, sl
 800719a:	4601      	mov	r1, r0
 800719c:	4607      	mov	r7, r0
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 fb0f 	bl	80077c2 <__multiply>
 80071a4:	4651      	mov	r1, sl
 80071a6:	4680      	mov	r8, r0
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 fa61 	bl	8007670 <_Bfree>
 80071ae:	46c2      	mov	sl, r8
 80071b0:	9b08      	ldr	r3, [sp, #32]
 80071b2:	1b9a      	subs	r2, r3, r6
 80071b4:	d004      	beq.n	80071c0 <_dtoa_r+0x780>
 80071b6:	4651      	mov	r1, sl
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 fb8f 	bl	80078dc <__pow5mult>
 80071be:	4682      	mov	sl, r0
 80071c0:	2101      	movs	r1, #1
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 faf4 	bl	80077b0 <__i2b>
 80071c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	4606      	mov	r6, r0
 80071ce:	f340 8083 	ble.w	80072d8 <_dtoa_r+0x898>
 80071d2:	461a      	mov	r2, r3
 80071d4:	4601      	mov	r1, r0
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fb80 	bl	80078dc <__pow5mult>
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	4606      	mov	r6, r0
 80071e2:	dd7c      	ble.n	80072de <_dtoa_r+0x89e>
 80071e4:	f04f 0800 	mov.w	r8, #0
 80071e8:	6933      	ldr	r3, [r6, #16]
 80071ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071ee:	6918      	ldr	r0, [r3, #16]
 80071f0:	f000 fa90 	bl	8007714 <__hi0bits>
 80071f4:	f1c0 0020 	rsb	r0, r0, #32
 80071f8:	9b06      	ldr	r3, [sp, #24]
 80071fa:	4418      	add	r0, r3
 80071fc:	f010 001f 	ands.w	r0, r0, #31
 8007200:	f000 8096 	beq.w	8007330 <_dtoa_r+0x8f0>
 8007204:	f1c0 0320 	rsb	r3, r0, #32
 8007208:	2b04      	cmp	r3, #4
 800720a:	f340 8087 	ble.w	800731c <_dtoa_r+0x8dc>
 800720e:	9b05      	ldr	r3, [sp, #20]
 8007210:	f1c0 001c 	rsb	r0, r0, #28
 8007214:	4403      	add	r3, r0
 8007216:	9305      	str	r3, [sp, #20]
 8007218:	9b06      	ldr	r3, [sp, #24]
 800721a:	4405      	add	r5, r0
 800721c:	4403      	add	r3, r0
 800721e:	9306      	str	r3, [sp, #24]
 8007220:	9b05      	ldr	r3, [sp, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	dd05      	ble.n	8007232 <_dtoa_r+0x7f2>
 8007226:	4651      	mov	r1, sl
 8007228:	461a      	mov	r2, r3
 800722a:	4620      	mov	r0, r4
 800722c:	f000 fba4 	bl	8007978 <__lshift>
 8007230:	4682      	mov	sl, r0
 8007232:	9b06      	ldr	r3, [sp, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	dd05      	ble.n	8007244 <_dtoa_r+0x804>
 8007238:	4631      	mov	r1, r6
 800723a:	461a      	mov	r2, r3
 800723c:	4620      	mov	r0, r4
 800723e:	f000 fb9b 	bl	8007978 <__lshift>
 8007242:	4606      	mov	r6, r0
 8007244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007246:	2b00      	cmp	r3, #0
 8007248:	d074      	beq.n	8007334 <_dtoa_r+0x8f4>
 800724a:	4631      	mov	r1, r6
 800724c:	4650      	mov	r0, sl
 800724e:	f000 fbe4 	bl	8007a1a <__mcmp>
 8007252:	2800      	cmp	r0, #0
 8007254:	da6e      	bge.n	8007334 <_dtoa_r+0x8f4>
 8007256:	2300      	movs	r3, #0
 8007258:	4651      	mov	r1, sl
 800725a:	220a      	movs	r2, #10
 800725c:	4620      	mov	r0, r4
 800725e:	f000 fa1e 	bl	800769e <__multadd>
 8007262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007264:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007268:	4682      	mov	sl, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 81a8 	beq.w	80075c0 <_dtoa_r+0xb80>
 8007270:	2300      	movs	r3, #0
 8007272:	4639      	mov	r1, r7
 8007274:	220a      	movs	r2, #10
 8007276:	4620      	mov	r0, r4
 8007278:	f000 fa11 	bl	800769e <__multadd>
 800727c:	9b04      	ldr	r3, [sp, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	4607      	mov	r7, r0
 8007282:	f300 80c8 	bgt.w	8007416 <_dtoa_r+0x9d6>
 8007286:	9b07      	ldr	r3, [sp, #28]
 8007288:	2b02      	cmp	r3, #2
 800728a:	f340 80c4 	ble.w	8007416 <_dtoa_r+0x9d6>
 800728e:	e059      	b.n	8007344 <_dtoa_r+0x904>
 8007290:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007292:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007296:	e756      	b.n	8007146 <_dtoa_r+0x706>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	1e5e      	subs	r6, r3, #1
 800729c:	9b08      	ldr	r3, [sp, #32]
 800729e:	42b3      	cmp	r3, r6
 80072a0:	bfbf      	itttt	lt
 80072a2:	9b08      	ldrlt	r3, [sp, #32]
 80072a4:	9608      	strlt	r6, [sp, #32]
 80072a6:	1af2      	sublt	r2, r6, r3
 80072a8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80072aa:	bfb6      	itet	lt
 80072ac:	189b      	addlt	r3, r3, r2
 80072ae:	1b9e      	subge	r6, r3, r6
 80072b0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80072b2:	9b03      	ldr	r3, [sp, #12]
 80072b4:	bfb8      	it	lt
 80072b6:	2600      	movlt	r6, #0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	bfb9      	ittee	lt
 80072bc:	9b05      	ldrlt	r3, [sp, #20]
 80072be:	9a03      	ldrlt	r2, [sp, #12]
 80072c0:	9d05      	ldrge	r5, [sp, #20]
 80072c2:	9b03      	ldrge	r3, [sp, #12]
 80072c4:	bfbc      	itt	lt
 80072c6:	1a9d      	sublt	r5, r3, r2
 80072c8:	2300      	movlt	r3, #0
 80072ca:	e73e      	b.n	800714a <_dtoa_r+0x70a>
 80072cc:	9e08      	ldr	r6, [sp, #32]
 80072ce:	9d05      	ldr	r5, [sp, #20]
 80072d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072d2:	e745      	b.n	8007160 <_dtoa_r+0x720>
 80072d4:	9a08      	ldr	r2, [sp, #32]
 80072d6:	e76e      	b.n	80071b6 <_dtoa_r+0x776>
 80072d8:	9b07      	ldr	r3, [sp, #28]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	dc19      	bgt.n	8007312 <_dtoa_r+0x8d2>
 80072de:	9b00      	ldr	r3, [sp, #0]
 80072e0:	b9bb      	cbnz	r3, 8007312 <_dtoa_r+0x8d2>
 80072e2:	9b01      	ldr	r3, [sp, #4]
 80072e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072e8:	b99b      	cbnz	r3, 8007312 <_dtoa_r+0x8d2>
 80072ea:	9b01      	ldr	r3, [sp, #4]
 80072ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072f0:	0d1b      	lsrs	r3, r3, #20
 80072f2:	051b      	lsls	r3, r3, #20
 80072f4:	b183      	cbz	r3, 8007318 <_dtoa_r+0x8d8>
 80072f6:	9b05      	ldr	r3, [sp, #20]
 80072f8:	3301      	adds	r3, #1
 80072fa:	9305      	str	r3, [sp, #20]
 80072fc:	9b06      	ldr	r3, [sp, #24]
 80072fe:	3301      	adds	r3, #1
 8007300:	9306      	str	r3, [sp, #24]
 8007302:	f04f 0801 	mov.w	r8, #1
 8007306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007308:	2b00      	cmp	r3, #0
 800730a:	f47f af6d 	bne.w	80071e8 <_dtoa_r+0x7a8>
 800730e:	2001      	movs	r0, #1
 8007310:	e772      	b.n	80071f8 <_dtoa_r+0x7b8>
 8007312:	f04f 0800 	mov.w	r8, #0
 8007316:	e7f6      	b.n	8007306 <_dtoa_r+0x8c6>
 8007318:	4698      	mov	r8, r3
 800731a:	e7f4      	b.n	8007306 <_dtoa_r+0x8c6>
 800731c:	d080      	beq.n	8007220 <_dtoa_r+0x7e0>
 800731e:	9a05      	ldr	r2, [sp, #20]
 8007320:	331c      	adds	r3, #28
 8007322:	441a      	add	r2, r3
 8007324:	9205      	str	r2, [sp, #20]
 8007326:	9a06      	ldr	r2, [sp, #24]
 8007328:	441a      	add	r2, r3
 800732a:	441d      	add	r5, r3
 800732c:	4613      	mov	r3, r2
 800732e:	e776      	b.n	800721e <_dtoa_r+0x7de>
 8007330:	4603      	mov	r3, r0
 8007332:	e7f4      	b.n	800731e <_dtoa_r+0x8de>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	dc36      	bgt.n	80073a8 <_dtoa_r+0x968>
 800733a:	9b07      	ldr	r3, [sp, #28]
 800733c:	2b02      	cmp	r3, #2
 800733e:	dd33      	ble.n	80073a8 <_dtoa_r+0x968>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	9b04      	ldr	r3, [sp, #16]
 8007346:	b963      	cbnz	r3, 8007362 <_dtoa_r+0x922>
 8007348:	4631      	mov	r1, r6
 800734a:	2205      	movs	r2, #5
 800734c:	4620      	mov	r0, r4
 800734e:	f000 f9a6 	bl	800769e <__multadd>
 8007352:	4601      	mov	r1, r0
 8007354:	4606      	mov	r6, r0
 8007356:	4650      	mov	r0, sl
 8007358:	f000 fb5f 	bl	8007a1a <__mcmp>
 800735c:	2800      	cmp	r0, #0
 800735e:	f73f adb6 	bgt.w	8006ece <_dtoa_r+0x48e>
 8007362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007364:	9d02      	ldr	r5, [sp, #8]
 8007366:	ea6f 0b03 	mvn.w	fp, r3
 800736a:	2300      	movs	r3, #0
 800736c:	9303      	str	r3, [sp, #12]
 800736e:	4631      	mov	r1, r6
 8007370:	4620      	mov	r0, r4
 8007372:	f000 f97d 	bl	8007670 <_Bfree>
 8007376:	2f00      	cmp	r7, #0
 8007378:	f43f aea6 	beq.w	80070c8 <_dtoa_r+0x688>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	b12b      	cbz	r3, 800738c <_dtoa_r+0x94c>
 8007380:	42bb      	cmp	r3, r7
 8007382:	d003      	beq.n	800738c <_dtoa_r+0x94c>
 8007384:	4619      	mov	r1, r3
 8007386:	4620      	mov	r0, r4
 8007388:	f000 f972 	bl	8007670 <_Bfree>
 800738c:	4639      	mov	r1, r7
 800738e:	4620      	mov	r0, r4
 8007390:	f000 f96e 	bl	8007670 <_Bfree>
 8007394:	e698      	b.n	80070c8 <_dtoa_r+0x688>
 8007396:	2600      	movs	r6, #0
 8007398:	4637      	mov	r7, r6
 800739a:	e7e2      	b.n	8007362 <_dtoa_r+0x922>
 800739c:	46bb      	mov	fp, r7
 800739e:	4637      	mov	r7, r6
 80073a0:	e595      	b.n	8006ece <_dtoa_r+0x48e>
 80073a2:	bf00      	nop
 80073a4:	40240000 	.word	0x40240000
 80073a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073aa:	bb93      	cbnz	r3, 8007412 <_dtoa_r+0x9d2>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	9d02      	ldr	r5, [sp, #8]
 80073b2:	4631      	mov	r1, r6
 80073b4:	4650      	mov	r0, sl
 80073b6:	f7ff fab7 	bl	8006928 <quorem>
 80073ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073be:	f805 9b01 	strb.w	r9, [r5], #1
 80073c2:	9b02      	ldr	r3, [sp, #8]
 80073c4:	9a04      	ldr	r2, [sp, #16]
 80073c6:	1aeb      	subs	r3, r5, r3
 80073c8:	429a      	cmp	r2, r3
 80073ca:	f300 80dc 	bgt.w	8007586 <_dtoa_r+0xb46>
 80073ce:	9b02      	ldr	r3, [sp, #8]
 80073d0:	2a01      	cmp	r2, #1
 80073d2:	bfac      	ite	ge
 80073d4:	189b      	addge	r3, r3, r2
 80073d6:	3301      	addlt	r3, #1
 80073d8:	4698      	mov	r8, r3
 80073da:	2300      	movs	r3, #0
 80073dc:	9303      	str	r3, [sp, #12]
 80073de:	4651      	mov	r1, sl
 80073e0:	2201      	movs	r2, #1
 80073e2:	4620      	mov	r0, r4
 80073e4:	f000 fac8 	bl	8007978 <__lshift>
 80073e8:	4631      	mov	r1, r6
 80073ea:	4682      	mov	sl, r0
 80073ec:	f000 fb15 	bl	8007a1a <__mcmp>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f300 808d 	bgt.w	8007510 <_dtoa_r+0xad0>
 80073f6:	d103      	bne.n	8007400 <_dtoa_r+0x9c0>
 80073f8:	f019 0f01 	tst.w	r9, #1
 80073fc:	f040 8088 	bne.w	8007510 <_dtoa_r+0xad0>
 8007400:	4645      	mov	r5, r8
 8007402:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007406:	2b30      	cmp	r3, #48	; 0x30
 8007408:	f105 32ff 	add.w	r2, r5, #4294967295
 800740c:	d1af      	bne.n	800736e <_dtoa_r+0x92e>
 800740e:	4615      	mov	r5, r2
 8007410:	e7f7      	b.n	8007402 <_dtoa_r+0x9c2>
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	2d00      	cmp	r5, #0
 8007418:	dd05      	ble.n	8007426 <_dtoa_r+0x9e6>
 800741a:	4639      	mov	r1, r7
 800741c:	462a      	mov	r2, r5
 800741e:	4620      	mov	r0, r4
 8007420:	f000 faaa 	bl	8007978 <__lshift>
 8007424:	4607      	mov	r7, r0
 8007426:	f1b8 0f00 	cmp.w	r8, #0
 800742a:	d04c      	beq.n	80074c6 <_dtoa_r+0xa86>
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	4620      	mov	r0, r4
 8007430:	f000 f8ea 	bl	8007608 <_Balloc>
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	3202      	adds	r2, #2
 8007438:	4605      	mov	r5, r0
 800743a:	0092      	lsls	r2, r2, #2
 800743c:	f107 010c 	add.w	r1, r7, #12
 8007440:	300c      	adds	r0, #12
 8007442:	f7fe fdcd 	bl	8005fe0 <memcpy>
 8007446:	2201      	movs	r2, #1
 8007448:	4629      	mov	r1, r5
 800744a:	4620      	mov	r0, r4
 800744c:	f000 fa94 	bl	8007978 <__lshift>
 8007450:	9b00      	ldr	r3, [sp, #0]
 8007452:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007456:	9703      	str	r7, [sp, #12]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	4607      	mov	r7, r0
 800745e:	9305      	str	r3, [sp, #20]
 8007460:	4631      	mov	r1, r6
 8007462:	4650      	mov	r0, sl
 8007464:	f7ff fa60 	bl	8006928 <quorem>
 8007468:	9903      	ldr	r1, [sp, #12]
 800746a:	4605      	mov	r5, r0
 800746c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007470:	4650      	mov	r0, sl
 8007472:	f000 fad2 	bl	8007a1a <__mcmp>
 8007476:	463a      	mov	r2, r7
 8007478:	9000      	str	r0, [sp, #0]
 800747a:	4631      	mov	r1, r6
 800747c:	4620      	mov	r0, r4
 800747e:	f000 fae6 	bl	8007a4e <__mdiff>
 8007482:	68c3      	ldr	r3, [r0, #12]
 8007484:	4602      	mov	r2, r0
 8007486:	bb03      	cbnz	r3, 80074ca <_dtoa_r+0xa8a>
 8007488:	4601      	mov	r1, r0
 800748a:	9006      	str	r0, [sp, #24]
 800748c:	4650      	mov	r0, sl
 800748e:	f000 fac4 	bl	8007a1a <__mcmp>
 8007492:	9a06      	ldr	r2, [sp, #24]
 8007494:	4603      	mov	r3, r0
 8007496:	4611      	mov	r1, r2
 8007498:	4620      	mov	r0, r4
 800749a:	9306      	str	r3, [sp, #24]
 800749c:	f000 f8e8 	bl	8007670 <_Bfree>
 80074a0:	9b06      	ldr	r3, [sp, #24]
 80074a2:	b9a3      	cbnz	r3, 80074ce <_dtoa_r+0xa8e>
 80074a4:	9a07      	ldr	r2, [sp, #28]
 80074a6:	b992      	cbnz	r2, 80074ce <_dtoa_r+0xa8e>
 80074a8:	9a05      	ldr	r2, [sp, #20]
 80074aa:	b982      	cbnz	r2, 80074ce <_dtoa_r+0xa8e>
 80074ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074b0:	d029      	beq.n	8007506 <_dtoa_r+0xac6>
 80074b2:	9b00      	ldr	r3, [sp, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dd01      	ble.n	80074bc <_dtoa_r+0xa7c>
 80074b8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80074bc:	f108 0501 	add.w	r5, r8, #1
 80074c0:	f888 9000 	strb.w	r9, [r8]
 80074c4:	e753      	b.n	800736e <_dtoa_r+0x92e>
 80074c6:	4638      	mov	r0, r7
 80074c8:	e7c2      	b.n	8007450 <_dtoa_r+0xa10>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e7e3      	b.n	8007496 <_dtoa_r+0xa56>
 80074ce:	9a00      	ldr	r2, [sp, #0]
 80074d0:	2a00      	cmp	r2, #0
 80074d2:	db04      	blt.n	80074de <_dtoa_r+0xa9e>
 80074d4:	d125      	bne.n	8007522 <_dtoa_r+0xae2>
 80074d6:	9a07      	ldr	r2, [sp, #28]
 80074d8:	bb1a      	cbnz	r2, 8007522 <_dtoa_r+0xae2>
 80074da:	9a05      	ldr	r2, [sp, #20]
 80074dc:	bb0a      	cbnz	r2, 8007522 <_dtoa_r+0xae2>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	ddec      	ble.n	80074bc <_dtoa_r+0xa7c>
 80074e2:	4651      	mov	r1, sl
 80074e4:	2201      	movs	r2, #1
 80074e6:	4620      	mov	r0, r4
 80074e8:	f000 fa46 	bl	8007978 <__lshift>
 80074ec:	4631      	mov	r1, r6
 80074ee:	4682      	mov	sl, r0
 80074f0:	f000 fa93 	bl	8007a1a <__mcmp>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	dc03      	bgt.n	8007500 <_dtoa_r+0xac0>
 80074f8:	d1e0      	bne.n	80074bc <_dtoa_r+0xa7c>
 80074fa:	f019 0f01 	tst.w	r9, #1
 80074fe:	d0dd      	beq.n	80074bc <_dtoa_r+0xa7c>
 8007500:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007504:	d1d8      	bne.n	80074b8 <_dtoa_r+0xa78>
 8007506:	2339      	movs	r3, #57	; 0x39
 8007508:	f888 3000 	strb.w	r3, [r8]
 800750c:	f108 0801 	add.w	r8, r8, #1
 8007510:	4645      	mov	r5, r8
 8007512:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007516:	2b39      	cmp	r3, #57	; 0x39
 8007518:	f105 32ff 	add.w	r2, r5, #4294967295
 800751c:	d03b      	beq.n	8007596 <_dtoa_r+0xb56>
 800751e:	3301      	adds	r3, #1
 8007520:	e040      	b.n	80075a4 <_dtoa_r+0xb64>
 8007522:	2b00      	cmp	r3, #0
 8007524:	f108 0501 	add.w	r5, r8, #1
 8007528:	dd05      	ble.n	8007536 <_dtoa_r+0xaf6>
 800752a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800752e:	d0ea      	beq.n	8007506 <_dtoa_r+0xac6>
 8007530:	f109 0901 	add.w	r9, r9, #1
 8007534:	e7c4      	b.n	80074c0 <_dtoa_r+0xa80>
 8007536:	9b02      	ldr	r3, [sp, #8]
 8007538:	9a04      	ldr	r2, [sp, #16]
 800753a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800753e:	1aeb      	subs	r3, r5, r3
 8007540:	4293      	cmp	r3, r2
 8007542:	46a8      	mov	r8, r5
 8007544:	f43f af4b 	beq.w	80073de <_dtoa_r+0x99e>
 8007548:	4651      	mov	r1, sl
 800754a:	2300      	movs	r3, #0
 800754c:	220a      	movs	r2, #10
 800754e:	4620      	mov	r0, r4
 8007550:	f000 f8a5 	bl	800769e <__multadd>
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	9903      	ldr	r1, [sp, #12]
 8007558:	42bb      	cmp	r3, r7
 800755a:	4682      	mov	sl, r0
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	f04f 020a 	mov.w	r2, #10
 8007564:	4620      	mov	r0, r4
 8007566:	d104      	bne.n	8007572 <_dtoa_r+0xb32>
 8007568:	f000 f899 	bl	800769e <__multadd>
 800756c:	9003      	str	r0, [sp, #12]
 800756e:	4607      	mov	r7, r0
 8007570:	e776      	b.n	8007460 <_dtoa_r+0xa20>
 8007572:	f000 f894 	bl	800769e <__multadd>
 8007576:	2300      	movs	r3, #0
 8007578:	9003      	str	r0, [sp, #12]
 800757a:	220a      	movs	r2, #10
 800757c:	4639      	mov	r1, r7
 800757e:	4620      	mov	r0, r4
 8007580:	f000 f88d 	bl	800769e <__multadd>
 8007584:	e7f3      	b.n	800756e <_dtoa_r+0xb2e>
 8007586:	4651      	mov	r1, sl
 8007588:	2300      	movs	r3, #0
 800758a:	220a      	movs	r2, #10
 800758c:	4620      	mov	r0, r4
 800758e:	f000 f886 	bl	800769e <__multadd>
 8007592:	4682      	mov	sl, r0
 8007594:	e70d      	b.n	80073b2 <_dtoa_r+0x972>
 8007596:	9b02      	ldr	r3, [sp, #8]
 8007598:	4293      	cmp	r3, r2
 800759a:	d105      	bne.n	80075a8 <_dtoa_r+0xb68>
 800759c:	9a02      	ldr	r2, [sp, #8]
 800759e:	f10b 0b01 	add.w	fp, fp, #1
 80075a2:	2331      	movs	r3, #49	; 0x31
 80075a4:	7013      	strb	r3, [r2, #0]
 80075a6:	e6e2      	b.n	800736e <_dtoa_r+0x92e>
 80075a8:	4615      	mov	r5, r2
 80075aa:	e7b2      	b.n	8007512 <_dtoa_r+0xad2>
 80075ac:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <_dtoa_r+0xb94>)
 80075ae:	f7ff baae 	b.w	8006b0e <_dtoa_r+0xce>
 80075b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f47f aa88 	bne.w	8006aca <_dtoa_r+0x8a>
 80075ba:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <_dtoa_r+0xb98>)
 80075bc:	f7ff baa7 	b.w	8006b0e <_dtoa_r+0xce>
 80075c0:	9b04      	ldr	r3, [sp, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f73f aef4 	bgt.w	80073b0 <_dtoa_r+0x970>
 80075c8:	9b07      	ldr	r3, [sp, #28]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	f77f aef0 	ble.w	80073b0 <_dtoa_r+0x970>
 80075d0:	e6b8      	b.n	8007344 <_dtoa_r+0x904>
 80075d2:	bf00      	nop
 80075d4:	08008da4 	.word	0x08008da4
 80075d8:	08008dc8 	.word	0x08008dc8

080075dc <_localeconv_r>:
 80075dc:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <_localeconv_r+0x14>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6a18      	ldr	r0, [r3, #32]
 80075e2:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <_localeconv_r+0x18>)
 80075e4:	2800      	cmp	r0, #0
 80075e6:	bf08      	it	eq
 80075e8:	4618      	moveq	r0, r3
 80075ea:	30f0      	adds	r0, #240	; 0xf0
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20000010 	.word	0x20000010
 80075f4:	20000074 	.word	0x20000074

080075f8 <malloc>:
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <malloc+0xc>)
 80075fa:	4601      	mov	r1, r0
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	f000 bb2f 	b.w	8007c60 <_malloc_r>
 8007602:	bf00      	nop
 8007604:	20000010 	.word	0x20000010

08007608 <_Balloc>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800760c:	4604      	mov	r4, r0
 800760e:	460e      	mov	r6, r1
 8007610:	b93d      	cbnz	r5, 8007622 <_Balloc+0x1a>
 8007612:	2010      	movs	r0, #16
 8007614:	f7ff fff0 	bl	80075f8 <malloc>
 8007618:	6260      	str	r0, [r4, #36]	; 0x24
 800761a:	6045      	str	r5, [r0, #4]
 800761c:	6085      	str	r5, [r0, #8]
 800761e:	6005      	str	r5, [r0, #0]
 8007620:	60c5      	str	r5, [r0, #12]
 8007622:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007624:	68eb      	ldr	r3, [r5, #12]
 8007626:	b183      	cbz	r3, 800764a <_Balloc+0x42>
 8007628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007630:	b9b8      	cbnz	r0, 8007662 <_Balloc+0x5a>
 8007632:	2101      	movs	r1, #1
 8007634:	fa01 f506 	lsl.w	r5, r1, r6
 8007638:	1d6a      	adds	r2, r5, #5
 800763a:	0092      	lsls	r2, r2, #2
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fab3 	bl	8007ba8 <_calloc_r>
 8007642:	b160      	cbz	r0, 800765e <_Balloc+0x56>
 8007644:	6046      	str	r6, [r0, #4]
 8007646:	6085      	str	r5, [r0, #8]
 8007648:	e00e      	b.n	8007668 <_Balloc+0x60>
 800764a:	2221      	movs	r2, #33	; 0x21
 800764c:	2104      	movs	r1, #4
 800764e:	4620      	mov	r0, r4
 8007650:	f000 faaa 	bl	8007ba8 <_calloc_r>
 8007654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007656:	60e8      	str	r0, [r5, #12]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e4      	bne.n	8007628 <_Balloc+0x20>
 800765e:	2000      	movs	r0, #0
 8007660:	bd70      	pop	{r4, r5, r6, pc}
 8007662:	6802      	ldr	r2, [r0, #0]
 8007664:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007668:	2300      	movs	r3, #0
 800766a:	6103      	str	r3, [r0, #16]
 800766c:	60c3      	str	r3, [r0, #12]
 800766e:	bd70      	pop	{r4, r5, r6, pc}

08007670 <_Bfree>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007674:	4606      	mov	r6, r0
 8007676:	460d      	mov	r5, r1
 8007678:	b93c      	cbnz	r4, 800768a <_Bfree+0x1a>
 800767a:	2010      	movs	r0, #16
 800767c:	f7ff ffbc 	bl	80075f8 <malloc>
 8007680:	6270      	str	r0, [r6, #36]	; 0x24
 8007682:	6044      	str	r4, [r0, #4]
 8007684:	6084      	str	r4, [r0, #8]
 8007686:	6004      	str	r4, [r0, #0]
 8007688:	60c4      	str	r4, [r0, #12]
 800768a:	b13d      	cbz	r5, 800769c <_Bfree+0x2c>
 800768c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800768e:	686a      	ldr	r2, [r5, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007696:	6029      	str	r1, [r5, #0]
 8007698:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800769c:	bd70      	pop	{r4, r5, r6, pc}

0800769e <__multadd>:
 800769e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a2:	690d      	ldr	r5, [r1, #16]
 80076a4:	461f      	mov	r7, r3
 80076a6:	4606      	mov	r6, r0
 80076a8:	460c      	mov	r4, r1
 80076aa:	f101 0e14 	add.w	lr, r1, #20
 80076ae:	2300      	movs	r3, #0
 80076b0:	f8de 0000 	ldr.w	r0, [lr]
 80076b4:	b281      	uxth	r1, r0
 80076b6:	fb02 7101 	mla	r1, r2, r1, r7
 80076ba:	0c0f      	lsrs	r7, r1, #16
 80076bc:	0c00      	lsrs	r0, r0, #16
 80076be:	fb02 7000 	mla	r0, r2, r0, r7
 80076c2:	b289      	uxth	r1, r1
 80076c4:	3301      	adds	r3, #1
 80076c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80076ca:	429d      	cmp	r5, r3
 80076cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80076d0:	f84e 1b04 	str.w	r1, [lr], #4
 80076d4:	dcec      	bgt.n	80076b0 <__multadd+0x12>
 80076d6:	b1d7      	cbz	r7, 800770e <__multadd+0x70>
 80076d8:	68a3      	ldr	r3, [r4, #8]
 80076da:	429d      	cmp	r5, r3
 80076dc:	db12      	blt.n	8007704 <__multadd+0x66>
 80076de:	6861      	ldr	r1, [r4, #4]
 80076e0:	4630      	mov	r0, r6
 80076e2:	3101      	adds	r1, #1
 80076e4:	f7ff ff90 	bl	8007608 <_Balloc>
 80076e8:	6922      	ldr	r2, [r4, #16]
 80076ea:	3202      	adds	r2, #2
 80076ec:	f104 010c 	add.w	r1, r4, #12
 80076f0:	4680      	mov	r8, r0
 80076f2:	0092      	lsls	r2, r2, #2
 80076f4:	300c      	adds	r0, #12
 80076f6:	f7fe fc73 	bl	8005fe0 <memcpy>
 80076fa:	4621      	mov	r1, r4
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7ff ffb7 	bl	8007670 <_Bfree>
 8007702:	4644      	mov	r4, r8
 8007704:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007708:	3501      	adds	r5, #1
 800770a:	615f      	str	r7, [r3, #20]
 800770c:	6125      	str	r5, [r4, #16]
 800770e:	4620      	mov	r0, r4
 8007710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007714 <__hi0bits>:
 8007714:	0c02      	lsrs	r2, r0, #16
 8007716:	0412      	lsls	r2, r2, #16
 8007718:	4603      	mov	r3, r0
 800771a:	b9b2      	cbnz	r2, 800774a <__hi0bits+0x36>
 800771c:	0403      	lsls	r3, r0, #16
 800771e:	2010      	movs	r0, #16
 8007720:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007724:	bf04      	itt	eq
 8007726:	021b      	lsleq	r3, r3, #8
 8007728:	3008      	addeq	r0, #8
 800772a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800772e:	bf04      	itt	eq
 8007730:	011b      	lsleq	r3, r3, #4
 8007732:	3004      	addeq	r0, #4
 8007734:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007738:	bf04      	itt	eq
 800773a:	009b      	lsleq	r3, r3, #2
 800773c:	3002      	addeq	r0, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	db06      	blt.n	8007750 <__hi0bits+0x3c>
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	d503      	bpl.n	800774e <__hi0bits+0x3a>
 8007746:	3001      	adds	r0, #1
 8007748:	4770      	bx	lr
 800774a:	2000      	movs	r0, #0
 800774c:	e7e8      	b.n	8007720 <__hi0bits+0xc>
 800774e:	2020      	movs	r0, #32
 8007750:	4770      	bx	lr

08007752 <__lo0bits>:
 8007752:	6803      	ldr	r3, [r0, #0]
 8007754:	f013 0207 	ands.w	r2, r3, #7
 8007758:	4601      	mov	r1, r0
 800775a:	d00b      	beq.n	8007774 <__lo0bits+0x22>
 800775c:	07da      	lsls	r2, r3, #31
 800775e:	d423      	bmi.n	80077a8 <__lo0bits+0x56>
 8007760:	0798      	lsls	r0, r3, #30
 8007762:	bf49      	itett	mi
 8007764:	085b      	lsrmi	r3, r3, #1
 8007766:	089b      	lsrpl	r3, r3, #2
 8007768:	2001      	movmi	r0, #1
 800776a:	600b      	strmi	r3, [r1, #0]
 800776c:	bf5c      	itt	pl
 800776e:	600b      	strpl	r3, [r1, #0]
 8007770:	2002      	movpl	r0, #2
 8007772:	4770      	bx	lr
 8007774:	b298      	uxth	r0, r3
 8007776:	b9a8      	cbnz	r0, 80077a4 <__lo0bits+0x52>
 8007778:	0c1b      	lsrs	r3, r3, #16
 800777a:	2010      	movs	r0, #16
 800777c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007780:	bf04      	itt	eq
 8007782:	0a1b      	lsreq	r3, r3, #8
 8007784:	3008      	addeq	r0, #8
 8007786:	071a      	lsls	r2, r3, #28
 8007788:	bf04      	itt	eq
 800778a:	091b      	lsreq	r3, r3, #4
 800778c:	3004      	addeq	r0, #4
 800778e:	079a      	lsls	r2, r3, #30
 8007790:	bf04      	itt	eq
 8007792:	089b      	lsreq	r3, r3, #2
 8007794:	3002      	addeq	r0, #2
 8007796:	07da      	lsls	r2, r3, #31
 8007798:	d402      	bmi.n	80077a0 <__lo0bits+0x4e>
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	d006      	beq.n	80077ac <__lo0bits+0x5a>
 800779e:	3001      	adds	r0, #1
 80077a0:	600b      	str	r3, [r1, #0]
 80077a2:	4770      	bx	lr
 80077a4:	4610      	mov	r0, r2
 80077a6:	e7e9      	b.n	800777c <__lo0bits+0x2a>
 80077a8:	2000      	movs	r0, #0
 80077aa:	4770      	bx	lr
 80077ac:	2020      	movs	r0, #32
 80077ae:	4770      	bx	lr

080077b0 <__i2b>:
 80077b0:	b510      	push	{r4, lr}
 80077b2:	460c      	mov	r4, r1
 80077b4:	2101      	movs	r1, #1
 80077b6:	f7ff ff27 	bl	8007608 <_Balloc>
 80077ba:	2201      	movs	r2, #1
 80077bc:	6144      	str	r4, [r0, #20]
 80077be:	6102      	str	r2, [r0, #16]
 80077c0:	bd10      	pop	{r4, pc}

080077c2 <__multiply>:
 80077c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c6:	4614      	mov	r4, r2
 80077c8:	690a      	ldr	r2, [r1, #16]
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	bfb8      	it	lt
 80077d0:	460b      	movlt	r3, r1
 80077d2:	4689      	mov	r9, r1
 80077d4:	bfbc      	itt	lt
 80077d6:	46a1      	movlt	r9, r4
 80077d8:	461c      	movlt	r4, r3
 80077da:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80077de:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80077e2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80077e6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077ea:	eb07 060a 	add.w	r6, r7, sl
 80077ee:	429e      	cmp	r6, r3
 80077f0:	bfc8      	it	gt
 80077f2:	3101      	addgt	r1, #1
 80077f4:	f7ff ff08 	bl	8007608 <_Balloc>
 80077f8:	f100 0514 	add.w	r5, r0, #20
 80077fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007800:	462b      	mov	r3, r5
 8007802:	2200      	movs	r2, #0
 8007804:	4543      	cmp	r3, r8
 8007806:	d316      	bcc.n	8007836 <__multiply+0x74>
 8007808:	f104 0214 	add.w	r2, r4, #20
 800780c:	f109 0114 	add.w	r1, r9, #20
 8007810:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8007814:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	9c01      	ldr	r4, [sp, #4]
 800781c:	4294      	cmp	r4, r2
 800781e:	4613      	mov	r3, r2
 8007820:	d80c      	bhi.n	800783c <__multiply+0x7a>
 8007822:	2e00      	cmp	r6, #0
 8007824:	dd03      	ble.n	800782e <__multiply+0x6c>
 8007826:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800782a:	2b00      	cmp	r3, #0
 800782c:	d054      	beq.n	80078d8 <__multiply+0x116>
 800782e:	6106      	str	r6, [r0, #16]
 8007830:	b003      	add	sp, #12
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	f843 2b04 	str.w	r2, [r3], #4
 800783a:	e7e3      	b.n	8007804 <__multiply+0x42>
 800783c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007840:	3204      	adds	r2, #4
 8007842:	f1ba 0f00 	cmp.w	sl, #0
 8007846:	d020      	beq.n	800788a <__multiply+0xc8>
 8007848:	46ae      	mov	lr, r5
 800784a:	4689      	mov	r9, r1
 800784c:	f04f 0c00 	mov.w	ip, #0
 8007850:	f859 4b04 	ldr.w	r4, [r9], #4
 8007854:	f8be b000 	ldrh.w	fp, [lr]
 8007858:	b2a3      	uxth	r3, r4
 800785a:	fb0a b303 	mla	r3, sl, r3, fp
 800785e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007862:	f8de 4000 	ldr.w	r4, [lr]
 8007866:	4463      	add	r3, ip
 8007868:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800786c:	fb0a c40b 	mla	r4, sl, fp, ip
 8007870:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007874:	b29b      	uxth	r3, r3
 8007876:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800787a:	454f      	cmp	r7, r9
 800787c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007880:	f84e 3b04 	str.w	r3, [lr], #4
 8007884:	d8e4      	bhi.n	8007850 <__multiply+0x8e>
 8007886:	f8ce c000 	str.w	ip, [lr]
 800788a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800788e:	f1b9 0f00 	cmp.w	r9, #0
 8007892:	d01f      	beq.n	80078d4 <__multiply+0x112>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	46ae      	mov	lr, r5
 8007898:	468c      	mov	ip, r1
 800789a:	f04f 0a00 	mov.w	sl, #0
 800789e:	f8bc 4000 	ldrh.w	r4, [ip]
 80078a2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80078a6:	fb09 b404 	mla	r4, r9, r4, fp
 80078aa:	44a2      	add	sl, r4
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80078b2:	f84e 3b04 	str.w	r3, [lr], #4
 80078b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078ba:	f8be 4000 	ldrh.w	r4, [lr]
 80078be:	0c1b      	lsrs	r3, r3, #16
 80078c0:	fb09 4303 	mla	r3, r9, r3, r4
 80078c4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80078c8:	4567      	cmp	r7, ip
 80078ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078ce:	d8e6      	bhi.n	800789e <__multiply+0xdc>
 80078d0:	f8ce 3000 	str.w	r3, [lr]
 80078d4:	3504      	adds	r5, #4
 80078d6:	e7a0      	b.n	800781a <__multiply+0x58>
 80078d8:	3e01      	subs	r6, #1
 80078da:	e7a2      	b.n	8007822 <__multiply+0x60>

080078dc <__pow5mult>:
 80078dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e0:	4615      	mov	r5, r2
 80078e2:	f012 0203 	ands.w	r2, r2, #3
 80078e6:	4606      	mov	r6, r0
 80078e8:	460f      	mov	r7, r1
 80078ea:	d007      	beq.n	80078fc <__pow5mult+0x20>
 80078ec:	3a01      	subs	r2, #1
 80078ee:	4c21      	ldr	r4, [pc, #132]	; (8007974 <__pow5mult+0x98>)
 80078f0:	2300      	movs	r3, #0
 80078f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078f6:	f7ff fed2 	bl	800769e <__multadd>
 80078fa:	4607      	mov	r7, r0
 80078fc:	10ad      	asrs	r5, r5, #2
 80078fe:	d035      	beq.n	800796c <__pow5mult+0x90>
 8007900:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007902:	b93c      	cbnz	r4, 8007914 <__pow5mult+0x38>
 8007904:	2010      	movs	r0, #16
 8007906:	f7ff fe77 	bl	80075f8 <malloc>
 800790a:	6270      	str	r0, [r6, #36]	; 0x24
 800790c:	6044      	str	r4, [r0, #4]
 800790e:	6084      	str	r4, [r0, #8]
 8007910:	6004      	str	r4, [r0, #0]
 8007912:	60c4      	str	r4, [r0, #12]
 8007914:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800791c:	b94c      	cbnz	r4, 8007932 <__pow5mult+0x56>
 800791e:	f240 2171 	movw	r1, #625	; 0x271
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ff44 	bl	80077b0 <__i2b>
 8007928:	2300      	movs	r3, #0
 800792a:	f8c8 0008 	str.w	r0, [r8, #8]
 800792e:	4604      	mov	r4, r0
 8007930:	6003      	str	r3, [r0, #0]
 8007932:	f04f 0800 	mov.w	r8, #0
 8007936:	07eb      	lsls	r3, r5, #31
 8007938:	d50a      	bpl.n	8007950 <__pow5mult+0x74>
 800793a:	4639      	mov	r1, r7
 800793c:	4622      	mov	r2, r4
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff ff3f 	bl	80077c2 <__multiply>
 8007944:	4639      	mov	r1, r7
 8007946:	4681      	mov	r9, r0
 8007948:	4630      	mov	r0, r6
 800794a:	f7ff fe91 	bl	8007670 <_Bfree>
 800794e:	464f      	mov	r7, r9
 8007950:	106d      	asrs	r5, r5, #1
 8007952:	d00b      	beq.n	800796c <__pow5mult+0x90>
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	b938      	cbnz	r0, 8007968 <__pow5mult+0x8c>
 8007958:	4622      	mov	r2, r4
 800795a:	4621      	mov	r1, r4
 800795c:	4630      	mov	r0, r6
 800795e:	f7ff ff30 	bl	80077c2 <__multiply>
 8007962:	6020      	str	r0, [r4, #0]
 8007964:	f8c0 8000 	str.w	r8, [r0]
 8007968:	4604      	mov	r4, r0
 800796a:	e7e4      	b.n	8007936 <__pow5mult+0x5a>
 800796c:	4638      	mov	r0, r7
 800796e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007972:	bf00      	nop
 8007974:	08008ec8 	.word	0x08008ec8

08007978 <__lshift>:
 8007978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	460c      	mov	r4, r1
 800797e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	6849      	ldr	r1, [r1, #4]
 8007986:	eb0a 0903 	add.w	r9, sl, r3
 800798a:	68a3      	ldr	r3, [r4, #8]
 800798c:	4607      	mov	r7, r0
 800798e:	4616      	mov	r6, r2
 8007990:	f109 0501 	add.w	r5, r9, #1
 8007994:	42ab      	cmp	r3, r5
 8007996:	db31      	blt.n	80079fc <__lshift+0x84>
 8007998:	4638      	mov	r0, r7
 800799a:	f7ff fe35 	bl	8007608 <_Balloc>
 800799e:	2200      	movs	r2, #0
 80079a0:	4680      	mov	r8, r0
 80079a2:	f100 0314 	add.w	r3, r0, #20
 80079a6:	4611      	mov	r1, r2
 80079a8:	4552      	cmp	r2, sl
 80079aa:	db2a      	blt.n	8007a02 <__lshift+0x8a>
 80079ac:	6920      	ldr	r0, [r4, #16]
 80079ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079b2:	f104 0114 	add.w	r1, r4, #20
 80079b6:	f016 021f 	ands.w	r2, r6, #31
 80079ba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80079be:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80079c2:	d022      	beq.n	8007a0a <__lshift+0x92>
 80079c4:	f1c2 0c20 	rsb	ip, r2, #32
 80079c8:	2000      	movs	r0, #0
 80079ca:	680e      	ldr	r6, [r1, #0]
 80079cc:	4096      	lsls	r6, r2
 80079ce:	4330      	orrs	r0, r6
 80079d0:	f843 0b04 	str.w	r0, [r3], #4
 80079d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80079d8:	458e      	cmp	lr, r1
 80079da:	fa20 f00c 	lsr.w	r0, r0, ip
 80079de:	d8f4      	bhi.n	80079ca <__lshift+0x52>
 80079e0:	6018      	str	r0, [r3, #0]
 80079e2:	b108      	cbz	r0, 80079e8 <__lshift+0x70>
 80079e4:	f109 0502 	add.w	r5, r9, #2
 80079e8:	3d01      	subs	r5, #1
 80079ea:	4638      	mov	r0, r7
 80079ec:	f8c8 5010 	str.w	r5, [r8, #16]
 80079f0:	4621      	mov	r1, r4
 80079f2:	f7ff fe3d 	bl	8007670 <_Bfree>
 80079f6:	4640      	mov	r0, r8
 80079f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fc:	3101      	adds	r1, #1
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	e7c8      	b.n	8007994 <__lshift+0x1c>
 8007a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007a06:	3201      	adds	r2, #1
 8007a08:	e7ce      	b.n	80079a8 <__lshift+0x30>
 8007a0a:	3b04      	subs	r3, #4
 8007a0c:	f851 2b04 	ldr.w	r2, [r1], #4
 8007a10:	f843 2f04 	str.w	r2, [r3, #4]!
 8007a14:	458e      	cmp	lr, r1
 8007a16:	d8f9      	bhi.n	8007a0c <__lshift+0x94>
 8007a18:	e7e6      	b.n	80079e8 <__lshift+0x70>

08007a1a <__mcmp>:
 8007a1a:	6903      	ldr	r3, [r0, #16]
 8007a1c:	690a      	ldr	r2, [r1, #16]
 8007a1e:	1a9b      	subs	r3, r3, r2
 8007a20:	b530      	push	{r4, r5, lr}
 8007a22:	d10c      	bne.n	8007a3e <__mcmp+0x24>
 8007a24:	0092      	lsls	r2, r2, #2
 8007a26:	3014      	adds	r0, #20
 8007a28:	3114      	adds	r1, #20
 8007a2a:	1884      	adds	r4, r0, r2
 8007a2c:	4411      	add	r1, r2
 8007a2e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a32:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a36:	4295      	cmp	r5, r2
 8007a38:	d003      	beq.n	8007a42 <__mcmp+0x28>
 8007a3a:	d305      	bcc.n	8007a48 <__mcmp+0x2e>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4618      	mov	r0, r3
 8007a40:	bd30      	pop	{r4, r5, pc}
 8007a42:	42a0      	cmp	r0, r4
 8007a44:	d3f3      	bcc.n	8007a2e <__mcmp+0x14>
 8007a46:	e7fa      	b.n	8007a3e <__mcmp+0x24>
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4c:	e7f7      	b.n	8007a3e <__mcmp+0x24>

08007a4e <__mdiff>:
 8007a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a52:	460d      	mov	r5, r1
 8007a54:	4607      	mov	r7, r0
 8007a56:	4611      	mov	r1, r2
 8007a58:	4628      	mov	r0, r5
 8007a5a:	4614      	mov	r4, r2
 8007a5c:	f7ff ffdd 	bl	8007a1a <__mcmp>
 8007a60:	1e06      	subs	r6, r0, #0
 8007a62:	d108      	bne.n	8007a76 <__mdiff+0x28>
 8007a64:	4631      	mov	r1, r6
 8007a66:	4638      	mov	r0, r7
 8007a68:	f7ff fdce 	bl	8007608 <_Balloc>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	6103      	str	r3, [r0, #16]
 8007a70:	6146      	str	r6, [r0, #20]
 8007a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a76:	bfa4      	itt	ge
 8007a78:	4623      	movge	r3, r4
 8007a7a:	462c      	movge	r4, r5
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	6861      	ldr	r1, [r4, #4]
 8007a80:	bfa6      	itte	ge
 8007a82:	461d      	movge	r5, r3
 8007a84:	2600      	movge	r6, #0
 8007a86:	2601      	movlt	r6, #1
 8007a88:	f7ff fdbe 	bl	8007608 <_Balloc>
 8007a8c:	692b      	ldr	r3, [r5, #16]
 8007a8e:	60c6      	str	r6, [r0, #12]
 8007a90:	6926      	ldr	r6, [r4, #16]
 8007a92:	f105 0914 	add.w	r9, r5, #20
 8007a96:	f104 0214 	add.w	r2, r4, #20
 8007a9a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007a9e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007aa2:	f100 0514 	add.w	r5, r0, #20
 8007aa6:	f04f 0c00 	mov.w	ip, #0
 8007aaa:	f852 ab04 	ldr.w	sl, [r2], #4
 8007aae:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ab2:	fa1c f18a 	uxtah	r1, ip, sl
 8007ab6:	b2a3      	uxth	r3, r4
 8007ab8:	1ac9      	subs	r1, r1, r3
 8007aba:	0c23      	lsrs	r3, r4, #16
 8007abc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007ac0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ac4:	b289      	uxth	r1, r1
 8007ac6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007aca:	45c8      	cmp	r8, r9
 8007acc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007ad0:	4696      	mov	lr, r2
 8007ad2:	f845 3b04 	str.w	r3, [r5], #4
 8007ad6:	d8e8      	bhi.n	8007aaa <__mdiff+0x5c>
 8007ad8:	45be      	cmp	lr, r7
 8007ada:	d305      	bcc.n	8007ae8 <__mdiff+0x9a>
 8007adc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007ae0:	b18b      	cbz	r3, 8007b06 <__mdiff+0xb8>
 8007ae2:	6106      	str	r6, [r0, #16]
 8007ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae8:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007aec:	fa1c f381 	uxtah	r3, ip, r1
 8007af0:	141a      	asrs	r2, r3, #16
 8007af2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007afc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b00:	f845 3b04 	str.w	r3, [r5], #4
 8007b04:	e7e8      	b.n	8007ad8 <__mdiff+0x8a>
 8007b06:	3e01      	subs	r6, #1
 8007b08:	e7e8      	b.n	8007adc <__mdiff+0x8e>

08007b0a <__d2b>:
 8007b0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b0e:	460e      	mov	r6, r1
 8007b10:	2101      	movs	r1, #1
 8007b12:	ec59 8b10 	vmov	r8, r9, d0
 8007b16:	4615      	mov	r5, r2
 8007b18:	f7ff fd76 	bl	8007608 <_Balloc>
 8007b1c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007b20:	4607      	mov	r7, r0
 8007b22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b26:	bb34      	cbnz	r4, 8007b76 <__d2b+0x6c>
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	f1b8 0f00 	cmp.w	r8, #0
 8007b2e:	d027      	beq.n	8007b80 <__d2b+0x76>
 8007b30:	a802      	add	r0, sp, #8
 8007b32:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007b36:	f7ff fe0c 	bl	8007752 <__lo0bits>
 8007b3a:	9900      	ldr	r1, [sp, #0]
 8007b3c:	b1f0      	cbz	r0, 8007b7c <__d2b+0x72>
 8007b3e:	9a01      	ldr	r2, [sp, #4]
 8007b40:	f1c0 0320 	rsb	r3, r0, #32
 8007b44:	fa02 f303 	lsl.w	r3, r2, r3
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	40c2      	lsrs	r2, r0
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	9201      	str	r2, [sp, #4]
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	61bb      	str	r3, [r7, #24]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bf14      	ite	ne
 8007b58:	2102      	movne	r1, #2
 8007b5a:	2101      	moveq	r1, #1
 8007b5c:	6139      	str	r1, [r7, #16]
 8007b5e:	b1c4      	cbz	r4, 8007b92 <__d2b+0x88>
 8007b60:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007b64:	4404      	add	r4, r0
 8007b66:	6034      	str	r4, [r6, #0]
 8007b68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b6c:	6028      	str	r0, [r5, #0]
 8007b6e:	4638      	mov	r0, r7
 8007b70:	b003      	add	sp, #12
 8007b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b7a:	e7d5      	b.n	8007b28 <__d2b+0x1e>
 8007b7c:	6179      	str	r1, [r7, #20]
 8007b7e:	e7e7      	b.n	8007b50 <__d2b+0x46>
 8007b80:	a801      	add	r0, sp, #4
 8007b82:	f7ff fde6 	bl	8007752 <__lo0bits>
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	6139      	str	r1, [r7, #16]
 8007b8e:	3020      	adds	r0, #32
 8007b90:	e7e5      	b.n	8007b5e <__d2b+0x54>
 8007b92:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007b96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b9a:	6030      	str	r0, [r6, #0]
 8007b9c:	6918      	ldr	r0, [r3, #16]
 8007b9e:	f7ff fdb9 	bl	8007714 <__hi0bits>
 8007ba2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007ba6:	e7e1      	b.n	8007b6c <__d2b+0x62>

08007ba8 <_calloc_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	fb02 f401 	mul.w	r4, r2, r1
 8007bae:	4621      	mov	r1, r4
 8007bb0:	f000 f856 	bl	8007c60 <_malloc_r>
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	b118      	cbz	r0, 8007bc0 <_calloc_r+0x18>
 8007bb8:	4622      	mov	r2, r4
 8007bba:	2100      	movs	r1, #0
 8007bbc:	f7fe fa1b 	bl	8005ff6 <memset>
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}

08007bc4 <_free_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	d045      	beq.n	8007c58 <_free_r+0x94>
 8007bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd0:	1f0c      	subs	r4, r1, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bfb8      	it	lt
 8007bd6:	18e4      	addlt	r4, r4, r3
 8007bd8:	f000 fa2c 	bl	8008034 <__malloc_lock>
 8007bdc:	4a1f      	ldr	r2, [pc, #124]	; (8007c5c <_free_r+0x98>)
 8007bde:	6813      	ldr	r3, [r2, #0]
 8007be0:	4610      	mov	r0, r2
 8007be2:	b933      	cbnz	r3, 8007bf2 <_free_r+0x2e>
 8007be4:	6063      	str	r3, [r4, #4]
 8007be6:	6014      	str	r4, [r2, #0]
 8007be8:	4628      	mov	r0, r5
 8007bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bee:	f000 ba22 	b.w	8008036 <__malloc_unlock>
 8007bf2:	42a3      	cmp	r3, r4
 8007bf4:	d90c      	bls.n	8007c10 <_free_r+0x4c>
 8007bf6:	6821      	ldr	r1, [r4, #0]
 8007bf8:	1862      	adds	r2, r4, r1
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	bf04      	itt	eq
 8007bfe:	681a      	ldreq	r2, [r3, #0]
 8007c00:	685b      	ldreq	r3, [r3, #4]
 8007c02:	6063      	str	r3, [r4, #4]
 8007c04:	bf04      	itt	eq
 8007c06:	1852      	addeq	r2, r2, r1
 8007c08:	6022      	streq	r2, [r4, #0]
 8007c0a:	6004      	str	r4, [r0, #0]
 8007c0c:	e7ec      	b.n	8007be8 <_free_r+0x24>
 8007c0e:	4613      	mov	r3, r2
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	b10a      	cbz	r2, 8007c18 <_free_r+0x54>
 8007c14:	42a2      	cmp	r2, r4
 8007c16:	d9fa      	bls.n	8007c0e <_free_r+0x4a>
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	1858      	adds	r0, r3, r1
 8007c1c:	42a0      	cmp	r0, r4
 8007c1e:	d10b      	bne.n	8007c38 <_free_r+0x74>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	4401      	add	r1, r0
 8007c24:	1858      	adds	r0, r3, r1
 8007c26:	4282      	cmp	r2, r0
 8007c28:	6019      	str	r1, [r3, #0]
 8007c2a:	d1dd      	bne.n	8007be8 <_free_r+0x24>
 8007c2c:	6810      	ldr	r0, [r2, #0]
 8007c2e:	6852      	ldr	r2, [r2, #4]
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	4401      	add	r1, r0
 8007c34:	6019      	str	r1, [r3, #0]
 8007c36:	e7d7      	b.n	8007be8 <_free_r+0x24>
 8007c38:	d902      	bls.n	8007c40 <_free_r+0x7c>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	e7d3      	b.n	8007be8 <_free_r+0x24>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	1821      	adds	r1, r4, r0
 8007c44:	428a      	cmp	r2, r1
 8007c46:	bf04      	itt	eq
 8007c48:	6811      	ldreq	r1, [r2, #0]
 8007c4a:	6852      	ldreq	r2, [r2, #4]
 8007c4c:	6062      	str	r2, [r4, #4]
 8007c4e:	bf04      	itt	eq
 8007c50:	1809      	addeq	r1, r1, r0
 8007c52:	6021      	streq	r1, [r4, #0]
 8007c54:	605c      	str	r4, [r3, #4]
 8007c56:	e7c7      	b.n	8007be8 <_free_r+0x24>
 8007c58:	bd38      	pop	{r3, r4, r5, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000234 	.word	0x20000234

08007c60 <_malloc_r>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	1ccd      	adds	r5, r1, #3
 8007c64:	f025 0503 	bic.w	r5, r5, #3
 8007c68:	3508      	adds	r5, #8
 8007c6a:	2d0c      	cmp	r5, #12
 8007c6c:	bf38      	it	cc
 8007c6e:	250c      	movcc	r5, #12
 8007c70:	2d00      	cmp	r5, #0
 8007c72:	4606      	mov	r6, r0
 8007c74:	db01      	blt.n	8007c7a <_malloc_r+0x1a>
 8007c76:	42a9      	cmp	r1, r5
 8007c78:	d903      	bls.n	8007c82 <_malloc_r+0x22>
 8007c7a:	230c      	movs	r3, #12
 8007c7c:	6033      	str	r3, [r6, #0]
 8007c7e:	2000      	movs	r0, #0
 8007c80:	bd70      	pop	{r4, r5, r6, pc}
 8007c82:	f000 f9d7 	bl	8008034 <__malloc_lock>
 8007c86:	4a23      	ldr	r2, [pc, #140]	; (8007d14 <_malloc_r+0xb4>)
 8007c88:	6814      	ldr	r4, [r2, #0]
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	b991      	cbnz	r1, 8007cb4 <_malloc_r+0x54>
 8007c8e:	4c22      	ldr	r4, [pc, #136]	; (8007d18 <_malloc_r+0xb8>)
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	b91b      	cbnz	r3, 8007c9c <_malloc_r+0x3c>
 8007c94:	4630      	mov	r0, r6
 8007c96:	f000 f991 	bl	8007fbc <_sbrk_r>
 8007c9a:	6020      	str	r0, [r4, #0]
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f000 f98c 	bl	8007fbc <_sbrk_r>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d126      	bne.n	8007cf6 <_malloc_r+0x96>
 8007ca8:	230c      	movs	r3, #12
 8007caa:	6033      	str	r3, [r6, #0]
 8007cac:	4630      	mov	r0, r6
 8007cae:	f000 f9c2 	bl	8008036 <__malloc_unlock>
 8007cb2:	e7e4      	b.n	8007c7e <_malloc_r+0x1e>
 8007cb4:	680b      	ldr	r3, [r1, #0]
 8007cb6:	1b5b      	subs	r3, r3, r5
 8007cb8:	d41a      	bmi.n	8007cf0 <_malloc_r+0x90>
 8007cba:	2b0b      	cmp	r3, #11
 8007cbc:	d90f      	bls.n	8007cde <_malloc_r+0x7e>
 8007cbe:	600b      	str	r3, [r1, #0]
 8007cc0:	50cd      	str	r5, [r1, r3]
 8007cc2:	18cc      	adds	r4, r1, r3
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f000 f9b6 	bl	8008036 <__malloc_unlock>
 8007cca:	f104 000b 	add.w	r0, r4, #11
 8007cce:	1d23      	adds	r3, r4, #4
 8007cd0:	f020 0007 	bic.w	r0, r0, #7
 8007cd4:	1ac3      	subs	r3, r0, r3
 8007cd6:	d01b      	beq.n	8007d10 <_malloc_r+0xb0>
 8007cd8:	425a      	negs	r2, r3
 8007cda:	50e2      	str	r2, [r4, r3]
 8007cdc:	bd70      	pop	{r4, r5, r6, pc}
 8007cde:	428c      	cmp	r4, r1
 8007ce0:	bf0d      	iteet	eq
 8007ce2:	6863      	ldreq	r3, [r4, #4]
 8007ce4:	684b      	ldrne	r3, [r1, #4]
 8007ce6:	6063      	strne	r3, [r4, #4]
 8007ce8:	6013      	streq	r3, [r2, #0]
 8007cea:	bf18      	it	ne
 8007cec:	460c      	movne	r4, r1
 8007cee:	e7e9      	b.n	8007cc4 <_malloc_r+0x64>
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	6849      	ldr	r1, [r1, #4]
 8007cf4:	e7ca      	b.n	8007c8c <_malloc_r+0x2c>
 8007cf6:	1cc4      	adds	r4, r0, #3
 8007cf8:	f024 0403 	bic.w	r4, r4, #3
 8007cfc:	42a0      	cmp	r0, r4
 8007cfe:	d005      	beq.n	8007d0c <_malloc_r+0xac>
 8007d00:	1a21      	subs	r1, r4, r0
 8007d02:	4630      	mov	r0, r6
 8007d04:	f000 f95a 	bl	8007fbc <_sbrk_r>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d0cd      	beq.n	8007ca8 <_malloc_r+0x48>
 8007d0c:	6025      	str	r5, [r4, #0]
 8007d0e:	e7d9      	b.n	8007cc4 <_malloc_r+0x64>
 8007d10:	bd70      	pop	{r4, r5, r6, pc}
 8007d12:	bf00      	nop
 8007d14:	20000234 	.word	0x20000234
 8007d18:	20000238 	.word	0x20000238

08007d1c <__ssputs_r>:
 8007d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	688e      	ldr	r6, [r1, #8]
 8007d22:	429e      	cmp	r6, r3
 8007d24:	4682      	mov	sl, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	4691      	mov	r9, r2
 8007d2a:	4698      	mov	r8, r3
 8007d2c:	d835      	bhi.n	8007d9a <__ssputs_r+0x7e>
 8007d2e:	898a      	ldrh	r2, [r1, #12]
 8007d30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d34:	d031      	beq.n	8007d9a <__ssputs_r+0x7e>
 8007d36:	6825      	ldr	r5, [r4, #0]
 8007d38:	6909      	ldr	r1, [r1, #16]
 8007d3a:	1a6f      	subs	r7, r5, r1
 8007d3c:	6965      	ldr	r5, [r4, #20]
 8007d3e:	2302      	movs	r3, #2
 8007d40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d44:	fb95 f5f3 	sdiv	r5, r5, r3
 8007d48:	f108 0301 	add.w	r3, r8, #1
 8007d4c:	443b      	add	r3, r7
 8007d4e:	429d      	cmp	r5, r3
 8007d50:	bf38      	it	cc
 8007d52:	461d      	movcc	r5, r3
 8007d54:	0553      	lsls	r3, r2, #21
 8007d56:	d531      	bpl.n	8007dbc <__ssputs_r+0xa0>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	f7ff ff81 	bl	8007c60 <_malloc_r>
 8007d5e:	4606      	mov	r6, r0
 8007d60:	b950      	cbnz	r0, 8007d78 <__ssputs_r+0x5c>
 8007d62:	230c      	movs	r3, #12
 8007d64:	f8ca 3000 	str.w	r3, [sl]
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d6e:	81a3      	strh	r3, [r4, #12]
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295
 8007d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d78:	463a      	mov	r2, r7
 8007d7a:	6921      	ldr	r1, [r4, #16]
 8007d7c:	f7fe f930 	bl	8005fe0 <memcpy>
 8007d80:	89a3      	ldrh	r3, [r4, #12]
 8007d82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d8a:	81a3      	strh	r3, [r4, #12]
 8007d8c:	6126      	str	r6, [r4, #16]
 8007d8e:	6165      	str	r5, [r4, #20]
 8007d90:	443e      	add	r6, r7
 8007d92:	1bed      	subs	r5, r5, r7
 8007d94:	6026      	str	r6, [r4, #0]
 8007d96:	60a5      	str	r5, [r4, #8]
 8007d98:	4646      	mov	r6, r8
 8007d9a:	4546      	cmp	r6, r8
 8007d9c:	bf28      	it	cs
 8007d9e:	4646      	movcs	r6, r8
 8007da0:	4632      	mov	r2, r6
 8007da2:	4649      	mov	r1, r9
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	f000 f92b 	bl	8008000 <memmove>
 8007daa:	68a3      	ldr	r3, [r4, #8]
 8007dac:	1b9b      	subs	r3, r3, r6
 8007dae:	60a3      	str	r3, [r4, #8]
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	441e      	add	r6, r3
 8007db4:	6026      	str	r6, [r4, #0]
 8007db6:	2000      	movs	r0, #0
 8007db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	f000 f93b 	bl	8008038 <_realloc_r>
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d1e1      	bne.n	8007d8c <__ssputs_r+0x70>
 8007dc8:	6921      	ldr	r1, [r4, #16]
 8007dca:	4650      	mov	r0, sl
 8007dcc:	f7ff fefa 	bl	8007bc4 <_free_r>
 8007dd0:	e7c7      	b.n	8007d62 <__ssputs_r+0x46>
	...

08007dd4 <_svfiprintf_r>:
 8007dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	b09d      	sub	sp, #116	; 0x74
 8007dda:	4680      	mov	r8, r0
 8007ddc:	9303      	str	r3, [sp, #12]
 8007dde:	898b      	ldrh	r3, [r1, #12]
 8007de0:	061c      	lsls	r4, r3, #24
 8007de2:	460d      	mov	r5, r1
 8007de4:	4616      	mov	r6, r2
 8007de6:	d50f      	bpl.n	8007e08 <_svfiprintf_r+0x34>
 8007de8:	690b      	ldr	r3, [r1, #16]
 8007dea:	b96b      	cbnz	r3, 8007e08 <_svfiprintf_r+0x34>
 8007dec:	2140      	movs	r1, #64	; 0x40
 8007dee:	f7ff ff37 	bl	8007c60 <_malloc_r>
 8007df2:	6028      	str	r0, [r5, #0]
 8007df4:	6128      	str	r0, [r5, #16]
 8007df6:	b928      	cbnz	r0, 8007e04 <_svfiprintf_r+0x30>
 8007df8:	230c      	movs	r3, #12
 8007dfa:	f8c8 3000 	str.w	r3, [r8]
 8007dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007e02:	e0c5      	b.n	8007f90 <_svfiprintf_r+0x1bc>
 8007e04:	2340      	movs	r3, #64	; 0x40
 8007e06:	616b      	str	r3, [r5, #20]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e0c:	2320      	movs	r3, #32
 8007e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e12:	2330      	movs	r3, #48	; 0x30
 8007e14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e18:	f04f 0b01 	mov.w	fp, #1
 8007e1c:	4637      	mov	r7, r6
 8007e1e:	463c      	mov	r4, r7
 8007e20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d13c      	bne.n	8007ea2 <_svfiprintf_r+0xce>
 8007e28:	ebb7 0a06 	subs.w	sl, r7, r6
 8007e2c:	d00b      	beq.n	8007e46 <_svfiprintf_r+0x72>
 8007e2e:	4653      	mov	r3, sl
 8007e30:	4632      	mov	r2, r6
 8007e32:	4629      	mov	r1, r5
 8007e34:	4640      	mov	r0, r8
 8007e36:	f7ff ff71 	bl	8007d1c <__ssputs_r>
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	f000 80a3 	beq.w	8007f86 <_svfiprintf_r+0x1b2>
 8007e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e42:	4453      	add	r3, sl
 8007e44:	9309      	str	r3, [sp, #36]	; 0x24
 8007e46:	783b      	ldrb	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 809c 	beq.w	8007f86 <_svfiprintf_r+0x1b2>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f04f 32ff 	mov.w	r2, #4294967295
 8007e54:	9304      	str	r3, [sp, #16]
 8007e56:	9307      	str	r3, [sp, #28]
 8007e58:	9205      	str	r2, [sp, #20]
 8007e5a:	9306      	str	r3, [sp, #24]
 8007e5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e60:	931a      	str	r3, [sp, #104]	; 0x68
 8007e62:	2205      	movs	r2, #5
 8007e64:	7821      	ldrb	r1, [r4, #0]
 8007e66:	4850      	ldr	r0, [pc, #320]	; (8007fa8 <_svfiprintf_r+0x1d4>)
 8007e68:	f7f8 f9ba 	bl	80001e0 <memchr>
 8007e6c:	1c67      	adds	r7, r4, #1
 8007e6e:	9b04      	ldr	r3, [sp, #16]
 8007e70:	b9d8      	cbnz	r0, 8007eaa <_svfiprintf_r+0xd6>
 8007e72:	06d9      	lsls	r1, r3, #27
 8007e74:	bf44      	itt	mi
 8007e76:	2220      	movmi	r2, #32
 8007e78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e7c:	071a      	lsls	r2, r3, #28
 8007e7e:	bf44      	itt	mi
 8007e80:	222b      	movmi	r2, #43	; 0x2b
 8007e82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e86:	7822      	ldrb	r2, [r4, #0]
 8007e88:	2a2a      	cmp	r2, #42	; 0x2a
 8007e8a:	d016      	beq.n	8007eba <_svfiprintf_r+0xe6>
 8007e8c:	9a07      	ldr	r2, [sp, #28]
 8007e8e:	2100      	movs	r1, #0
 8007e90:	200a      	movs	r0, #10
 8007e92:	4627      	mov	r7, r4
 8007e94:	3401      	adds	r4, #1
 8007e96:	783b      	ldrb	r3, [r7, #0]
 8007e98:	3b30      	subs	r3, #48	; 0x30
 8007e9a:	2b09      	cmp	r3, #9
 8007e9c:	d951      	bls.n	8007f42 <_svfiprintf_r+0x16e>
 8007e9e:	b1c9      	cbz	r1, 8007ed4 <_svfiprintf_r+0x100>
 8007ea0:	e011      	b.n	8007ec6 <_svfiprintf_r+0xf2>
 8007ea2:	2b25      	cmp	r3, #37	; 0x25
 8007ea4:	d0c0      	beq.n	8007e28 <_svfiprintf_r+0x54>
 8007ea6:	4627      	mov	r7, r4
 8007ea8:	e7b9      	b.n	8007e1e <_svfiprintf_r+0x4a>
 8007eaa:	4a3f      	ldr	r2, [pc, #252]	; (8007fa8 <_svfiprintf_r+0x1d4>)
 8007eac:	1a80      	subs	r0, r0, r2
 8007eae:	fa0b f000 	lsl.w	r0, fp, r0
 8007eb2:	4318      	orrs	r0, r3
 8007eb4:	9004      	str	r0, [sp, #16]
 8007eb6:	463c      	mov	r4, r7
 8007eb8:	e7d3      	b.n	8007e62 <_svfiprintf_r+0x8e>
 8007eba:	9a03      	ldr	r2, [sp, #12]
 8007ebc:	1d11      	adds	r1, r2, #4
 8007ebe:	6812      	ldr	r2, [r2, #0]
 8007ec0:	9103      	str	r1, [sp, #12]
 8007ec2:	2a00      	cmp	r2, #0
 8007ec4:	db01      	blt.n	8007eca <_svfiprintf_r+0xf6>
 8007ec6:	9207      	str	r2, [sp, #28]
 8007ec8:	e004      	b.n	8007ed4 <_svfiprintf_r+0x100>
 8007eca:	4252      	negs	r2, r2
 8007ecc:	f043 0302 	orr.w	r3, r3, #2
 8007ed0:	9207      	str	r2, [sp, #28]
 8007ed2:	9304      	str	r3, [sp, #16]
 8007ed4:	783b      	ldrb	r3, [r7, #0]
 8007ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ed8:	d10e      	bne.n	8007ef8 <_svfiprintf_r+0x124>
 8007eda:	787b      	ldrb	r3, [r7, #1]
 8007edc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ede:	f107 0101 	add.w	r1, r7, #1
 8007ee2:	d132      	bne.n	8007f4a <_svfiprintf_r+0x176>
 8007ee4:	9b03      	ldr	r3, [sp, #12]
 8007ee6:	1d1a      	adds	r2, r3, #4
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	9203      	str	r2, [sp, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bfb8      	it	lt
 8007ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ef4:	3702      	adds	r7, #2
 8007ef6:	9305      	str	r3, [sp, #20]
 8007ef8:	4c2c      	ldr	r4, [pc, #176]	; (8007fac <_svfiprintf_r+0x1d8>)
 8007efa:	7839      	ldrb	r1, [r7, #0]
 8007efc:	2203      	movs	r2, #3
 8007efe:	4620      	mov	r0, r4
 8007f00:	f7f8 f96e 	bl	80001e0 <memchr>
 8007f04:	b138      	cbz	r0, 8007f16 <_svfiprintf_r+0x142>
 8007f06:	2340      	movs	r3, #64	; 0x40
 8007f08:	1b00      	subs	r0, r0, r4
 8007f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f0e:	9b04      	ldr	r3, [sp, #16]
 8007f10:	4303      	orrs	r3, r0
 8007f12:	9304      	str	r3, [sp, #16]
 8007f14:	3701      	adds	r7, #1
 8007f16:	7839      	ldrb	r1, [r7, #0]
 8007f18:	4825      	ldr	r0, [pc, #148]	; (8007fb0 <_svfiprintf_r+0x1dc>)
 8007f1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f1e:	2206      	movs	r2, #6
 8007f20:	1c7e      	adds	r6, r7, #1
 8007f22:	f7f8 f95d 	bl	80001e0 <memchr>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d035      	beq.n	8007f96 <_svfiprintf_r+0x1c2>
 8007f2a:	4b22      	ldr	r3, [pc, #136]	; (8007fb4 <_svfiprintf_r+0x1e0>)
 8007f2c:	b9fb      	cbnz	r3, 8007f6e <_svfiprintf_r+0x19a>
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	3307      	adds	r3, #7
 8007f32:	f023 0307 	bic.w	r3, r3, #7
 8007f36:	3308      	adds	r3, #8
 8007f38:	9303      	str	r3, [sp, #12]
 8007f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3c:	444b      	add	r3, r9
 8007f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f40:	e76c      	b.n	8007e1c <_svfiprintf_r+0x48>
 8007f42:	fb00 3202 	mla	r2, r0, r2, r3
 8007f46:	2101      	movs	r1, #1
 8007f48:	e7a3      	b.n	8007e92 <_svfiprintf_r+0xbe>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9305      	str	r3, [sp, #20]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	240a      	movs	r4, #10
 8007f52:	460f      	mov	r7, r1
 8007f54:	3101      	adds	r1, #1
 8007f56:	783a      	ldrb	r2, [r7, #0]
 8007f58:	3a30      	subs	r2, #48	; 0x30
 8007f5a:	2a09      	cmp	r2, #9
 8007f5c:	d903      	bls.n	8007f66 <_svfiprintf_r+0x192>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0ca      	beq.n	8007ef8 <_svfiprintf_r+0x124>
 8007f62:	9005      	str	r0, [sp, #20]
 8007f64:	e7c8      	b.n	8007ef8 <_svfiprintf_r+0x124>
 8007f66:	fb04 2000 	mla	r0, r4, r0, r2
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e7f1      	b.n	8007f52 <_svfiprintf_r+0x17e>
 8007f6e:	ab03      	add	r3, sp, #12
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	462a      	mov	r2, r5
 8007f74:	4b10      	ldr	r3, [pc, #64]	; (8007fb8 <_svfiprintf_r+0x1e4>)
 8007f76:	a904      	add	r1, sp, #16
 8007f78:	4640      	mov	r0, r8
 8007f7a:	f7fe f8db 	bl	8006134 <_printf_float>
 8007f7e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f82:	4681      	mov	r9, r0
 8007f84:	d1d9      	bne.n	8007f3a <_svfiprintf_r+0x166>
 8007f86:	89ab      	ldrh	r3, [r5, #12]
 8007f88:	065b      	lsls	r3, r3, #25
 8007f8a:	f53f af38 	bmi.w	8007dfe <_svfiprintf_r+0x2a>
 8007f8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f90:	b01d      	add	sp, #116	; 0x74
 8007f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f96:	ab03      	add	r3, sp, #12
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	462a      	mov	r2, r5
 8007f9c:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <_svfiprintf_r+0x1e4>)
 8007f9e:	a904      	add	r1, sp, #16
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	f7fe fb7d 	bl	80066a0 <_printf_i>
 8007fa6:	e7ea      	b.n	8007f7e <_svfiprintf_r+0x1aa>
 8007fa8:	08008ed4 	.word	0x08008ed4
 8007fac:	08008eda 	.word	0x08008eda
 8007fb0:	08008ede 	.word	0x08008ede
 8007fb4:	08006135 	.word	0x08006135
 8007fb8:	08007d1d 	.word	0x08007d1d

08007fbc <_sbrk_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4c06      	ldr	r4, [pc, #24]	; (8007fd8 <_sbrk_r+0x1c>)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	f000 fe0c 	bl	8008be4 <_sbrk>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_sbrk_r+0x1a>
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_sbrk_r+0x1a>
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	20001524 	.word	0x20001524

08007fdc <__ascii_mbtowc>:
 8007fdc:	b082      	sub	sp, #8
 8007fde:	b901      	cbnz	r1, 8007fe2 <__ascii_mbtowc+0x6>
 8007fe0:	a901      	add	r1, sp, #4
 8007fe2:	b142      	cbz	r2, 8007ff6 <__ascii_mbtowc+0x1a>
 8007fe4:	b14b      	cbz	r3, 8007ffa <__ascii_mbtowc+0x1e>
 8007fe6:	7813      	ldrb	r3, [r2, #0]
 8007fe8:	600b      	str	r3, [r1, #0]
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	1c10      	adds	r0, r2, #0
 8007fee:	bf18      	it	ne
 8007ff0:	2001      	movne	r0, #1
 8007ff2:	b002      	add	sp, #8
 8007ff4:	4770      	bx	lr
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	e7fb      	b.n	8007ff2 <__ascii_mbtowc+0x16>
 8007ffa:	f06f 0001 	mvn.w	r0, #1
 8007ffe:	e7f8      	b.n	8007ff2 <__ascii_mbtowc+0x16>

08008000 <memmove>:
 8008000:	4288      	cmp	r0, r1
 8008002:	b510      	push	{r4, lr}
 8008004:	eb01 0302 	add.w	r3, r1, r2
 8008008:	d803      	bhi.n	8008012 <memmove+0x12>
 800800a:	1e42      	subs	r2, r0, #1
 800800c:	4299      	cmp	r1, r3
 800800e:	d10c      	bne.n	800802a <memmove+0x2a>
 8008010:	bd10      	pop	{r4, pc}
 8008012:	4298      	cmp	r0, r3
 8008014:	d2f9      	bcs.n	800800a <memmove+0xa>
 8008016:	1881      	adds	r1, r0, r2
 8008018:	1ad2      	subs	r2, r2, r3
 800801a:	42d3      	cmn	r3, r2
 800801c:	d100      	bne.n	8008020 <memmove+0x20>
 800801e:	bd10      	pop	{r4, pc}
 8008020:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008024:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008028:	e7f7      	b.n	800801a <memmove+0x1a>
 800802a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800802e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008032:	e7eb      	b.n	800800c <memmove+0xc>

08008034 <__malloc_lock>:
 8008034:	4770      	bx	lr

08008036 <__malloc_unlock>:
 8008036:	4770      	bx	lr

08008038 <_realloc_r>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	4607      	mov	r7, r0
 800803c:	4614      	mov	r4, r2
 800803e:	460e      	mov	r6, r1
 8008040:	b921      	cbnz	r1, 800804c <_realloc_r+0x14>
 8008042:	4611      	mov	r1, r2
 8008044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008048:	f7ff be0a 	b.w	8007c60 <_malloc_r>
 800804c:	b922      	cbnz	r2, 8008058 <_realloc_r+0x20>
 800804e:	f7ff fdb9 	bl	8007bc4 <_free_r>
 8008052:	4625      	mov	r5, r4
 8008054:	4628      	mov	r0, r5
 8008056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008058:	f000 f821 	bl	800809e <_malloc_usable_size_r>
 800805c:	4284      	cmp	r4, r0
 800805e:	d90f      	bls.n	8008080 <_realloc_r+0x48>
 8008060:	4621      	mov	r1, r4
 8008062:	4638      	mov	r0, r7
 8008064:	f7ff fdfc 	bl	8007c60 <_malloc_r>
 8008068:	4605      	mov	r5, r0
 800806a:	2800      	cmp	r0, #0
 800806c:	d0f2      	beq.n	8008054 <_realloc_r+0x1c>
 800806e:	4631      	mov	r1, r6
 8008070:	4622      	mov	r2, r4
 8008072:	f7fd ffb5 	bl	8005fe0 <memcpy>
 8008076:	4631      	mov	r1, r6
 8008078:	4638      	mov	r0, r7
 800807a:	f7ff fda3 	bl	8007bc4 <_free_r>
 800807e:	e7e9      	b.n	8008054 <_realloc_r+0x1c>
 8008080:	4635      	mov	r5, r6
 8008082:	e7e7      	b.n	8008054 <_realloc_r+0x1c>

08008084 <__ascii_wctomb>:
 8008084:	b149      	cbz	r1, 800809a <__ascii_wctomb+0x16>
 8008086:	2aff      	cmp	r2, #255	; 0xff
 8008088:	bf85      	ittet	hi
 800808a:	238a      	movhi	r3, #138	; 0x8a
 800808c:	6003      	strhi	r3, [r0, #0]
 800808e:	700a      	strbls	r2, [r1, #0]
 8008090:	f04f 30ff 	movhi.w	r0, #4294967295
 8008094:	bf98      	it	ls
 8008096:	2001      	movls	r0, #1
 8008098:	4770      	bx	lr
 800809a:	4608      	mov	r0, r1
 800809c:	4770      	bx	lr

0800809e <_malloc_usable_size_r>:
 800809e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f1a0 0004 	sub.w	r0, r0, #4
 80080a8:	bfbc      	itt	lt
 80080aa:	580b      	ldrlt	r3, [r1, r0]
 80080ac:	18c0      	addlt	r0, r0, r3
 80080ae:	4770      	bx	lr

080080b0 <powf>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	ed2d 8b04 	vpush	{d8-d9}
 80080b6:	4cb5      	ldr	r4, [pc, #724]	; (800838c <powf+0x2dc>)
 80080b8:	b08a      	sub	sp, #40	; 0x28
 80080ba:	eef0 8a40 	vmov.f32	s17, s0
 80080be:	eeb0 8a60 	vmov.f32	s16, s1
 80080c2:	f000 f971 	bl	80083a8 <__ieee754_powf>
 80080c6:	f994 5000 	ldrsb.w	r5, [r4]
 80080ca:	1c6b      	adds	r3, r5, #1
 80080cc:	eeb0 9a40 	vmov.f32	s18, s0
 80080d0:	4626      	mov	r6, r4
 80080d2:	d05d      	beq.n	8008190 <powf+0xe0>
 80080d4:	eeb4 8a48 	vcmp.f32	s16, s16
 80080d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080dc:	d658      	bvs.n	8008190 <powf+0xe0>
 80080de:	eef4 8a68 	vcmp.f32	s17, s17
 80080e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e6:	d721      	bvc.n	800812c <powf+0x7c>
 80080e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80080ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f0:	d14e      	bne.n	8008190 <powf+0xe0>
 80080f2:	2301      	movs	r3, #1
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	4ba6      	ldr	r3, [pc, #664]	; (8008390 <powf+0x2e0>)
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	ee18 0a90 	vmov	r0, s17
 80080fe:	2300      	movs	r3, #0
 8008100:	9308      	str	r3, [sp, #32]
 8008102:	f7f8 fa21 	bl	8000548 <__aeabi_f2d>
 8008106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800810a:	ee18 0a10 	vmov	r0, s16
 800810e:	f7f8 fa1b 	bl	8000548 <__aeabi_f2d>
 8008112:	4ba0      	ldr	r3, [pc, #640]	; (8008394 <powf+0x2e4>)
 8008114:	2200      	movs	r2, #0
 8008116:	2d02      	cmp	r5, #2
 8008118:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800811c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008120:	d030      	beq.n	8008184 <powf+0xd4>
 8008122:	4668      	mov	r0, sp
 8008124:	f000 fc49 	bl	80089ba <matherr>
 8008128:	bb30      	cbnz	r0, 8008178 <powf+0xc8>
 800812a:	e062      	b.n	80081f2 <powf+0x142>
 800812c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008134:	d162      	bne.n	80081fc <powf+0x14c>
 8008136:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800813a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800813e:	d12d      	bne.n	800819c <powf+0xec>
 8008140:	2301      	movs	r3, #1
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	4b92      	ldr	r3, [pc, #584]	; (8008390 <powf+0x2e0>)
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	ee18 0a90 	vmov	r0, s17
 800814c:	2300      	movs	r3, #0
 800814e:	9308      	str	r3, [sp, #32]
 8008150:	f7f8 f9fa 	bl	8000548 <__aeabi_f2d>
 8008154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008158:	ee18 0a10 	vmov	r0, s16
 800815c:	f7f8 f9f4 	bl	8000548 <__aeabi_f2d>
 8008160:	2200      	movs	r2, #0
 8008162:	2300      	movs	r3, #0
 8008164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008168:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800816c:	2d00      	cmp	r5, #0
 800816e:	d0d8      	beq.n	8008122 <powf+0x72>
 8008170:	4b88      	ldr	r3, [pc, #544]	; (8008394 <powf+0x2e4>)
 8008172:	2200      	movs	r2, #0
 8008174:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008178:	9b08      	ldr	r3, [sp, #32]
 800817a:	b11b      	cbz	r3, 8008184 <powf+0xd4>
 800817c:	f000 fd2c 	bl	8008bd8 <__errno>
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	6003      	str	r3, [r0, #0]
 8008184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008188:	f7f8 fd0a 	bl	8000ba0 <__aeabi_d2f>
 800818c:	ee09 0a10 	vmov	s18, r0
 8008190:	eeb0 0a49 	vmov.f32	s0, s18
 8008194:	b00a      	add	sp, #40	; 0x28
 8008196:	ecbd 8b04 	vpop	{d8-d9}
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	eeb0 0a48 	vmov.f32	s0, s16
 80081a0:	f000 fc9d 	bl	8008ade <finitef>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d0f3      	beq.n	8008190 <powf+0xe0>
 80081a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80081ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b0:	d5ee      	bpl.n	8008190 <powf+0xe0>
 80081b2:	2301      	movs	r3, #1
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	4b76      	ldr	r3, [pc, #472]	; (8008390 <powf+0x2e0>)
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	ee18 0a90 	vmov	r0, s17
 80081be:	2300      	movs	r3, #0
 80081c0:	9308      	str	r3, [sp, #32]
 80081c2:	f7f8 f9c1 	bl	8000548 <__aeabi_f2d>
 80081c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081ca:	ee18 0a10 	vmov	r0, s16
 80081ce:	f7f8 f9bb 	bl	8000548 <__aeabi_f2d>
 80081d2:	f994 3000 	ldrsb.w	r3, [r4]
 80081d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081da:	b923      	cbnz	r3, 80081e6 <powf+0x136>
 80081dc:	2200      	movs	r2, #0
 80081de:	2300      	movs	r3, #0
 80081e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081e4:	e79d      	b.n	8008122 <powf+0x72>
 80081e6:	496c      	ldr	r1, [pc, #432]	; (8008398 <powf+0x2e8>)
 80081e8:	2000      	movs	r0, #0
 80081ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d197      	bne.n	8008122 <powf+0x72>
 80081f2:	f000 fcf1 	bl	8008bd8 <__errno>
 80081f6:	2321      	movs	r3, #33	; 0x21
 80081f8:	6003      	str	r3, [r0, #0]
 80081fa:	e7bd      	b.n	8008178 <powf+0xc8>
 80081fc:	f000 fc6f 	bl	8008ade <finitef>
 8008200:	4605      	mov	r5, r0
 8008202:	2800      	cmp	r0, #0
 8008204:	f040 8091 	bne.w	800832a <powf+0x27a>
 8008208:	eeb0 0a68 	vmov.f32	s0, s17
 800820c:	f000 fc67 	bl	8008ade <finitef>
 8008210:	2800      	cmp	r0, #0
 8008212:	f000 808a 	beq.w	800832a <powf+0x27a>
 8008216:	eeb0 0a48 	vmov.f32	s0, s16
 800821a:	f000 fc60 	bl	8008ade <finitef>
 800821e:	2800      	cmp	r0, #0
 8008220:	f000 8083 	beq.w	800832a <powf+0x27a>
 8008224:	eeb4 9a49 	vcmp.f32	s18, s18
 8008228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822c:	f994 4000 	ldrsb.w	r4, [r4]
 8008230:	4b57      	ldr	r3, [pc, #348]	; (8008390 <powf+0x2e0>)
 8008232:	d71b      	bvc.n	800826c <powf+0x1bc>
 8008234:	2201      	movs	r2, #1
 8008236:	ee18 0a90 	vmov	r0, s17
 800823a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800823e:	9508      	str	r5, [sp, #32]
 8008240:	f7f8 f982 	bl	8000548 <__aeabi_f2d>
 8008244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008248:	ee18 0a10 	vmov	r0, s16
 800824c:	f7f8 f97c 	bl	8000548 <__aeabi_f2d>
 8008250:	2200      	movs	r2, #0
 8008252:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008256:	2300      	movs	r3, #0
 8008258:	2c00      	cmp	r4, #0
 800825a:	d0c1      	beq.n	80081e0 <powf+0x130>
 800825c:	4610      	mov	r0, r2
 800825e:	4619      	mov	r1, r3
 8008260:	f7f8 faf0 	bl	8000844 <__aeabi_ddiv>
 8008264:	2c02      	cmp	r4, #2
 8008266:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800826a:	e7c1      	b.n	80081f0 <powf+0x140>
 800826c:	2203      	movs	r2, #3
 800826e:	ee18 0a90 	vmov	r0, s17
 8008272:	e88d 000c 	stmia.w	sp, {r2, r3}
 8008276:	9508      	str	r5, [sp, #32]
 8008278:	f7f8 f966 	bl	8000548 <__aeabi_f2d>
 800827c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008280:	ee18 0a10 	vmov	r0, s16
 8008284:	f7f8 f960 	bl	8000548 <__aeabi_f2d>
 8008288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800828c:	bb5c      	cbnz	r4, 80082e6 <powf+0x236>
 800828e:	4b43      	ldr	r3, [pc, #268]	; (800839c <powf+0x2ec>)
 8008290:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008294:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082a0:	d56c      	bpl.n	800837c <powf+0x2cc>
 80082a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80082a6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80082aa:	ee17 0a90 	vmov	r0, s15
 80082ae:	f7f8 f94b 	bl	8000548 <__aeabi_f2d>
 80082b2:	4604      	mov	r4, r0
 80082b4:	460d      	mov	r5, r1
 80082b6:	ec45 4b10 	vmov	d0, r4, r5
 80082ba:	f000 fb81 	bl	80089c0 <rint>
 80082be:	4620      	mov	r0, r4
 80082c0:	ec53 2b10 	vmov	r2, r3, d0
 80082c4:	4629      	mov	r1, r5
 80082c6:	f7f8 fbfb 	bl	8000ac0 <__aeabi_dcmpeq>
 80082ca:	b920      	cbnz	r0, 80082d6 <powf+0x226>
 80082cc:	4b34      	ldr	r3, [pc, #208]	; (80083a0 <powf+0x2f0>)
 80082ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80082d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082d6:	f996 3000 	ldrsb.w	r3, [r6]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d14e      	bne.n	800837c <powf+0x2cc>
 80082de:	f000 fc7b 	bl	8008bd8 <__errno>
 80082e2:	2322      	movs	r3, #34	; 0x22
 80082e4:	e788      	b.n	80081f8 <powf+0x148>
 80082e6:	4b2f      	ldr	r3, [pc, #188]	; (80083a4 <powf+0x2f4>)
 80082e8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80082ec:	2200      	movs	r2, #0
 80082ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082f6:	d5ee      	bpl.n	80082d6 <powf+0x226>
 80082f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80082fc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008300:	ee17 0a90 	vmov	r0, s15
 8008304:	f7f8 f920 	bl	8000548 <__aeabi_f2d>
 8008308:	4604      	mov	r4, r0
 800830a:	460d      	mov	r5, r1
 800830c:	ec45 4b10 	vmov	d0, r4, r5
 8008310:	f000 fb56 	bl	80089c0 <rint>
 8008314:	4620      	mov	r0, r4
 8008316:	ec53 2b10 	vmov	r2, r3, d0
 800831a:	4629      	mov	r1, r5
 800831c:	f7f8 fbd0 	bl	8000ac0 <__aeabi_dcmpeq>
 8008320:	2800      	cmp	r0, #0
 8008322:	d1d8      	bne.n	80082d6 <powf+0x226>
 8008324:	2200      	movs	r2, #0
 8008326:	4b1c      	ldr	r3, [pc, #112]	; (8008398 <powf+0x2e8>)
 8008328:	e7d3      	b.n	80082d2 <powf+0x222>
 800832a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800832e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008332:	f47f af2d 	bne.w	8008190 <powf+0xe0>
 8008336:	eeb0 0a68 	vmov.f32	s0, s17
 800833a:	f000 fbd0 	bl	8008ade <finitef>
 800833e:	2800      	cmp	r0, #0
 8008340:	f43f af26 	beq.w	8008190 <powf+0xe0>
 8008344:	eeb0 0a48 	vmov.f32	s0, s16
 8008348:	f000 fbc9 	bl	8008ade <finitef>
 800834c:	2800      	cmp	r0, #0
 800834e:	f43f af1f 	beq.w	8008190 <powf+0xe0>
 8008352:	2304      	movs	r3, #4
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	4b0e      	ldr	r3, [pc, #56]	; (8008390 <powf+0x2e0>)
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	ee18 0a90 	vmov	r0, s17
 800835e:	2300      	movs	r3, #0
 8008360:	9308      	str	r3, [sp, #32]
 8008362:	f7f8 f8f1 	bl	8000548 <__aeabi_f2d>
 8008366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800836a:	ee18 0a10 	vmov	r0, s16
 800836e:	f7f8 f8eb 	bl	8000548 <__aeabi_f2d>
 8008372:	2200      	movs	r2, #0
 8008374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008378:	2300      	movs	r3, #0
 800837a:	e7aa      	b.n	80082d2 <powf+0x222>
 800837c:	4668      	mov	r0, sp
 800837e:	f000 fb1c 	bl	80089ba <matherr>
 8008382:	2800      	cmp	r0, #0
 8008384:	f47f aef8 	bne.w	8008178 <powf+0xc8>
 8008388:	e7a9      	b.n	80082de <powf+0x22e>
 800838a:	bf00      	nop
 800838c:	200001e0 	.word	0x200001e0
 8008390:	08008ff0 	.word	0x08008ff0
 8008394:	3ff00000 	.word	0x3ff00000
 8008398:	fff00000 	.word	0xfff00000
 800839c:	47efffff 	.word	0x47efffff
 80083a0:	c7efffff 	.word	0xc7efffff
 80083a4:	7ff00000 	.word	0x7ff00000

080083a8 <__ieee754_powf>:
 80083a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	ee10 5a90 	vmov	r5, s1
 80083b0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80083b4:	ed2d 8b02 	vpush	{d8}
 80083b8:	eeb0 8a40 	vmov.f32	s16, s0
 80083bc:	eef0 8a60 	vmov.f32	s17, s1
 80083c0:	f000 8295 	beq.w	80088ee <__ieee754_powf+0x546>
 80083c4:	ee10 8a10 	vmov	r8, s0
 80083c8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80083cc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80083d0:	dc06      	bgt.n	80083e0 <__ieee754_powf+0x38>
 80083d2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80083d6:	dd0a      	ble.n	80083ee <__ieee754_powf+0x46>
 80083d8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80083dc:	f000 8287 	beq.w	80088ee <__ieee754_powf+0x546>
 80083e0:	ecbd 8b02 	vpop	{d8}
 80083e4:	48d9      	ldr	r0, [pc, #868]	; (800874c <__ieee754_powf+0x3a4>)
 80083e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ea:	f000 bb83 	b.w	8008af4 <nanf>
 80083ee:	f1b8 0f00 	cmp.w	r8, #0
 80083f2:	da1d      	bge.n	8008430 <__ieee754_powf+0x88>
 80083f4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80083f8:	da2c      	bge.n	8008454 <__ieee754_powf+0xac>
 80083fa:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80083fe:	db30      	blt.n	8008462 <__ieee754_powf+0xba>
 8008400:	15fb      	asrs	r3, r7, #23
 8008402:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008406:	fa47 f603 	asr.w	r6, r7, r3
 800840a:	fa06 f303 	lsl.w	r3, r6, r3
 800840e:	429f      	cmp	r7, r3
 8008410:	d127      	bne.n	8008462 <__ieee754_powf+0xba>
 8008412:	f006 0601 	and.w	r6, r6, #1
 8008416:	f1c6 0602 	rsb	r6, r6, #2
 800841a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800841e:	d122      	bne.n	8008466 <__ieee754_powf+0xbe>
 8008420:	2d00      	cmp	r5, #0
 8008422:	f280 826a 	bge.w	80088fa <__ieee754_powf+0x552>
 8008426:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800842a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800842e:	e00d      	b.n	800844c <__ieee754_powf+0xa4>
 8008430:	2600      	movs	r6, #0
 8008432:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8008436:	d1f0      	bne.n	800841a <__ieee754_powf+0x72>
 8008438:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800843c:	f000 8257 	beq.w	80088ee <__ieee754_powf+0x546>
 8008440:	dd0a      	ble.n	8008458 <__ieee754_powf+0xb0>
 8008442:	2d00      	cmp	r5, #0
 8008444:	f280 8256 	bge.w	80088f4 <__ieee754_powf+0x54c>
 8008448:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8008750 <__ieee754_powf+0x3a8>
 800844c:	ecbd 8b02 	vpop	{d8}
 8008450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008454:	2602      	movs	r6, #2
 8008456:	e7ec      	b.n	8008432 <__ieee754_powf+0x8a>
 8008458:	2d00      	cmp	r5, #0
 800845a:	daf5      	bge.n	8008448 <__ieee754_powf+0xa0>
 800845c:	eeb1 0a68 	vneg.f32	s0, s17
 8008460:	e7f4      	b.n	800844c <__ieee754_powf+0xa4>
 8008462:	2600      	movs	r6, #0
 8008464:	e7d9      	b.n	800841a <__ieee754_powf+0x72>
 8008466:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800846a:	d102      	bne.n	8008472 <__ieee754_powf+0xca>
 800846c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8008470:	e7ec      	b.n	800844c <__ieee754_powf+0xa4>
 8008472:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8008476:	eeb0 0a48 	vmov.f32	s0, s16
 800847a:	d108      	bne.n	800848e <__ieee754_powf+0xe6>
 800847c:	f1b8 0f00 	cmp.w	r8, #0
 8008480:	db05      	blt.n	800848e <__ieee754_powf+0xe6>
 8008482:	ecbd 8b02 	vpop	{d8}
 8008486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800848a:	f000 ba4f 	b.w	800892c <__ieee754_sqrtf>
 800848e:	f000 fb1f 	bl	8008ad0 <fabsf>
 8008492:	b124      	cbz	r4, 800849e <__ieee754_powf+0xf6>
 8008494:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8008498:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800849c:	d117      	bne.n	80084ce <__ieee754_powf+0x126>
 800849e:	2d00      	cmp	r5, #0
 80084a0:	bfbc      	itt	lt
 80084a2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80084a6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80084aa:	f1b8 0f00 	cmp.w	r8, #0
 80084ae:	dacd      	bge.n	800844c <__ieee754_powf+0xa4>
 80084b0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80084b4:	ea54 0306 	orrs.w	r3, r4, r6
 80084b8:	d104      	bne.n	80084c4 <__ieee754_powf+0x11c>
 80084ba:	ee70 7a40 	vsub.f32	s15, s0, s0
 80084be:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80084c2:	e7c3      	b.n	800844c <__ieee754_powf+0xa4>
 80084c4:	2e01      	cmp	r6, #1
 80084c6:	d1c1      	bne.n	800844c <__ieee754_powf+0xa4>
 80084c8:	eeb1 0a40 	vneg.f32	s0, s0
 80084cc:	e7be      	b.n	800844c <__ieee754_powf+0xa4>
 80084ce:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80084d2:	3801      	subs	r0, #1
 80084d4:	ea56 0300 	orrs.w	r3, r6, r0
 80084d8:	d104      	bne.n	80084e4 <__ieee754_powf+0x13c>
 80084da:	ee38 8a48 	vsub.f32	s16, s16, s16
 80084de:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80084e2:	e7b3      	b.n	800844c <__ieee754_powf+0xa4>
 80084e4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80084e8:	dd6d      	ble.n	80085c6 <__ieee754_powf+0x21e>
 80084ea:	4b9a      	ldr	r3, [pc, #616]	; (8008754 <__ieee754_powf+0x3ac>)
 80084ec:	429c      	cmp	r4, r3
 80084ee:	dc06      	bgt.n	80084fe <__ieee754_powf+0x156>
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	daa9      	bge.n	8008448 <__ieee754_powf+0xa0>
 80084f4:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8008758 <__ieee754_powf+0x3b0>
 80084f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80084fc:	e7a6      	b.n	800844c <__ieee754_powf+0xa4>
 80084fe:	4b97      	ldr	r3, [pc, #604]	; (800875c <__ieee754_powf+0x3b4>)
 8008500:	429c      	cmp	r4, r3
 8008502:	dd02      	ble.n	800850a <__ieee754_powf+0x162>
 8008504:	2d00      	cmp	r5, #0
 8008506:	dcf5      	bgt.n	80084f4 <__ieee754_powf+0x14c>
 8008508:	e79e      	b.n	8008448 <__ieee754_powf+0xa0>
 800850a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800850e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008512:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8008760 <__ieee754_powf+0x3b8>
 8008516:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8008764 <__ieee754_powf+0x3bc>
 800851a:	eef1 6a40 	vneg.f32	s13, s0
 800851e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8008522:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008526:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800852a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800852e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008532:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008536:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8008768 <__ieee754_powf+0x3c0>
 800853a:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800853e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800876c <__ieee754_powf+0x3c4>
 8008542:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008546:	eeb0 7a67 	vmov.f32	s14, s15
 800854a:	eea0 7a06 	vfma.f32	s14, s0, s12
 800854e:	ee17 3a10 	vmov	r3, s14
 8008552:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008556:	f023 030f 	bic.w	r3, r3, #15
 800855a:	ee07 3a10 	vmov	s14, r3
 800855e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8008562:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008566:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800856a:	f025 050f 	bic.w	r5, r5, #15
 800856e:	ee07 5a10 	vmov	s14, r5
 8008572:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8008576:	ee78 8ac7 	vsub.f32	s17, s17, s14
 800857a:	ee07 3a10 	vmov	s14, r3
 800857e:	ee06 5a90 	vmov	s13, r5
 8008582:	eee7 7a28 	vfma.f32	s15, s14, s17
 8008586:	3e01      	subs	r6, #1
 8008588:	ea56 0200 	orrs.w	r2, r6, r0
 800858c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008590:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008594:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008598:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800859c:	ee16 4a90 	vmov	r4, s13
 80085a0:	bf08      	it	eq
 80085a2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80085a6:	2c00      	cmp	r4, #0
 80085a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80085ac:	f340 8186 	ble.w	80088bc <__ieee754_powf+0x514>
 80085b0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80085b4:	f340 80fc 	ble.w	80087b0 <__ieee754_powf+0x408>
 80085b8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8008758 <__ieee754_powf+0x3b0>
 80085bc:	ee28 0a27 	vmul.f32	s0, s16, s15
 80085c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80085c4:	e742      	b.n	800844c <__ieee754_powf+0xa4>
 80085c6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80085ca:	bfbf      	itttt	lt
 80085cc:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8008770 <__ieee754_powf+0x3c8>
 80085d0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80085d4:	f06f 0217 	mvnlt.w	r2, #23
 80085d8:	ee17 4a90 	vmovlt	r4, s15
 80085dc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80085e0:	bfa8      	it	ge
 80085e2:	2200      	movge	r2, #0
 80085e4:	3b7f      	subs	r3, #127	; 0x7f
 80085e6:	4413      	add	r3, r2
 80085e8:	4a62      	ldr	r2, [pc, #392]	; (8008774 <__ieee754_powf+0x3cc>)
 80085ea:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80085ee:	4294      	cmp	r4, r2
 80085f0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80085f4:	dd06      	ble.n	8008604 <__ieee754_powf+0x25c>
 80085f6:	4a60      	ldr	r2, [pc, #384]	; (8008778 <__ieee754_powf+0x3d0>)
 80085f8:	4294      	cmp	r4, r2
 80085fa:	f340 80a5 	ble.w	8008748 <__ieee754_powf+0x3a0>
 80085fe:	3301      	adds	r3, #1
 8008600:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8008604:	2400      	movs	r4, #0
 8008606:	4a5d      	ldr	r2, [pc, #372]	; (800877c <__ieee754_powf+0x3d4>)
 8008608:	00a7      	lsls	r7, r4, #2
 800860a:	443a      	add	r2, r7
 800860c:	ee07 1a90 	vmov	s15, r1
 8008610:	ed92 7a00 	vldr	s14, [r2]
 8008614:	4a5a      	ldr	r2, [pc, #360]	; (8008780 <__ieee754_powf+0x3d8>)
 8008616:	ee77 6a87 	vadd.f32	s13, s15, s14
 800861a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800861e:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 8008622:	1049      	asrs	r1, r1, #1
 8008624:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8008628:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800862c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8008630:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8008634:	ee06 1a90 	vmov	s13, r1
 8008638:	ee66 4a05 	vmul.f32	s9, s12, s10
 800863c:	ee14 ea90 	vmov	lr, s9
 8008640:	ea02 0e0e 	and.w	lr, r2, lr
 8008644:	ee05 ea90 	vmov	s11, lr
 8008648:	eeb1 4a65 	vneg.f32	s8, s11
 800864c:	eea4 6a26 	vfma.f32	s12, s8, s13
 8008650:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8008654:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8008658:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800865c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008784 <__ieee754_powf+0x3dc>
 8008660:	eea4 6a26 	vfma.f32	s12, s8, s13
 8008664:	ee66 6a05 	vmul.f32	s13, s12, s10
 8008668:	ee24 6aa4 	vmul.f32	s12, s9, s9
 800866c:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8008788 <__ieee754_powf+0x3e0>
 8008670:	eee6 7a05 	vfma.f32	s15, s12, s10
 8008674:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800878c <__ieee754_powf+0x3e4>
 8008678:	eea6 5a27 	vfma.f32	s10, s12, s15
 800867c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008760 <__ieee754_powf+0x3b8>
 8008680:	eee6 7a05 	vfma.f32	s15, s12, s10
 8008684:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8008790 <__ieee754_powf+0x3e8>
 8008688:	eea6 5a27 	vfma.f32	s10, s12, s15
 800868c:	eddf 7a41 	vldr	s15, [pc, #260]	; 8008794 <__ieee754_powf+0x3ec>
 8008690:	eee6 7a05 	vfma.f32	s15, s12, s10
 8008694:	ee66 3a06 	vmul.f32	s7, s12, s12
 8008698:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800869c:	ee27 7a26 	vmul.f32	s14, s14, s13
 80086a0:	eeb0 6a45 	vmov.f32	s12, s10
 80086a4:	eea3 7aa7 	vfma.f32	s14, s7, s15
 80086a8:	eea5 6aa5 	vfma.f32	s12, s11, s11
 80086ac:	ee36 6a07 	vadd.f32	s12, s12, s14
 80086b0:	ee16 1a10 	vmov	r1, s12
 80086b4:	4011      	ands	r1, r2
 80086b6:	ee06 1a10 	vmov	s12, r1
 80086ba:	ee76 7a45 	vsub.f32	s15, s12, s10
 80086be:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8008798 <__ieee754_powf+0x3f0>
 80086c2:	eee4 7a25 	vfma.f32	s15, s8, s11
 80086c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086ca:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80086ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 80086d2:	eeb0 7a67 	vmov.f32	s14, s15
 80086d6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80086da:	ee17 1a10 	vmov	r1, s14
 80086de:	4011      	ands	r1, r2
 80086e0:	ee07 1a10 	vmov	s14, r1
 80086e4:	eea4 7a06 	vfma.f32	s14, s8, s12
 80086e8:	ee05 1a90 	vmov	s11, r1
 80086ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086f0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800879c <__ieee754_powf+0x3f4>
 80086f4:	492a      	ldr	r1, [pc, #168]	; (80087a0 <__ieee754_powf+0x3f8>)
 80086f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086fa:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80087a4 <__ieee754_powf+0x3fc>
 80086fe:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008702:	4439      	add	r1, r7
 8008704:	ed91 7a00 	vldr	s14, [r1]
 8008708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800870c:	ee07 3a90 	vmov	s15, r3
 8008710:	eeb0 6a47 	vmov.f32	s12, s14
 8008714:	4b24      	ldr	r3, [pc, #144]	; (80087a8 <__ieee754_powf+0x400>)
 8008716:	eea5 6a85 	vfma.f32	s12, s11, s10
 800871a:	443b      	add	r3, r7
 800871c:	edd3 4a00 	vldr	s9, [r3]
 8008720:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008724:	ee36 6a24 	vadd.f32	s12, s12, s9
 8008728:	ee76 7a26 	vadd.f32	s15, s12, s13
 800872c:	ee17 3a90 	vmov	r3, s15
 8008730:	4013      	ands	r3, r2
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800873a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800873e:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8008742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008746:	e70e      	b.n	8008566 <__ieee754_powf+0x1be>
 8008748:	2401      	movs	r4, #1
 800874a:	e75c      	b.n	8008606 <__ieee754_powf+0x25e>
 800874c:	08008d40 	.word	0x08008d40
 8008750:	00000000 	.word	0x00000000
 8008754:	3f7ffff7 	.word	0x3f7ffff7
 8008758:	7149f2ca 	.word	0x7149f2ca
 800875c:	3f800007 	.word	0x3f800007
 8008760:	3eaaaaab 	.word	0x3eaaaaab
 8008764:	3fb8aa00 	.word	0x3fb8aa00
 8008768:	3fb8aa3b 	.word	0x3fb8aa3b
 800876c:	36eca570 	.word	0x36eca570
 8008770:	4b800000 	.word	0x4b800000
 8008774:	001cc471 	.word	0x001cc471
 8008778:	005db3d6 	.word	0x005db3d6
 800877c:	08008ff8 	.word	0x08008ff8
 8008780:	fffff000 	.word	0xfffff000
 8008784:	3e6c3255 	.word	0x3e6c3255
 8008788:	3e53f142 	.word	0x3e53f142
 800878c:	3e8ba305 	.word	0x3e8ba305
 8008790:	3edb6db7 	.word	0x3edb6db7
 8008794:	3f19999a 	.word	0x3f19999a
 8008798:	3f763800 	.word	0x3f763800
 800879c:	3f76384f 	.word	0x3f76384f
 80087a0:	08009008 	.word	0x08009008
 80087a4:	369dc3a0 	.word	0x369dc3a0
 80087a8:	08009000 	.word	0x08009000
 80087ac:	3338aa3c 	.word	0x3338aa3c
 80087b0:	f040 8094 	bne.w	80088dc <__ieee754_powf+0x534>
 80087b4:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 80087ac <__ieee754_powf+0x404>
 80087b8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80087bc:	ee37 6a86 	vadd.f32	s12, s15, s12
 80087c0:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80087c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c8:	f73f aef6 	bgt.w	80085b8 <__ieee754_powf+0x210>
 80087cc:	15db      	asrs	r3, r3, #23
 80087ce:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80087d2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80087d6:	4103      	asrs	r3, r0
 80087d8:	4423      	add	r3, r4
 80087da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80087de:	4948      	ldr	r1, [pc, #288]	; (8008900 <__ieee754_powf+0x558>)
 80087e0:	3a7f      	subs	r2, #127	; 0x7f
 80087e2:	4111      	asrs	r1, r2
 80087e4:	ea23 0101 	bic.w	r1, r3, r1
 80087e8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80087ec:	ee06 1a90 	vmov	s13, r1
 80087f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80087f4:	f1c2 0217 	rsb	r2, r2, #23
 80087f8:	4110      	asrs	r0, r2
 80087fa:	2c00      	cmp	r4, #0
 80087fc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008800:	bfb8      	it	lt
 8008802:	4240      	neglt	r0, r0
 8008804:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008808:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8008904 <__ieee754_powf+0x55c>
 800880c:	ee16 3a90 	vmov	r3, s13
 8008810:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008814:	f023 030f 	bic.w	r3, r3, #15
 8008818:	ee06 3a90 	vmov	s13, r3
 800881c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008820:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008824:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008908 <__ieee754_powf+0x560>
 8008828:	ee26 7a87 	vmul.f32	s14, s13, s14
 800882c:	eea7 7a86 	vfma.f32	s14, s15, s12
 8008830:	eef0 7a47 	vmov.f32	s15, s14
 8008834:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800890c <__ieee754_powf+0x564>
 8008838:	eeb0 0a67 	vmov.f32	s0, s15
 800883c:	eea6 0a87 	vfma.f32	s0, s13, s14
 8008840:	eeb0 6a40 	vmov.f32	s12, s0
 8008844:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008848:	ee20 7a00 	vmul.f32	s14, s0, s0
 800884c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008850:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8008910 <__ieee754_powf+0x568>
 8008854:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8008914 <__ieee754_powf+0x56c>
 8008858:	eea7 6a26 	vfma.f32	s12, s14, s13
 800885c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8008918 <__ieee754_powf+0x570>
 8008860:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008864:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800891c <__ieee754_powf+0x574>
 8008868:	eea7 6a26 	vfma.f32	s12, s14, s13
 800886c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8008920 <__ieee754_powf+0x578>
 8008870:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008874:	eeb0 6a40 	vmov.f32	s12, s0
 8008878:	eea7 6a66 	vfms.f32	s12, s14, s13
 800887c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008880:	eeb0 7a46 	vmov.f32	s14, s12
 8008884:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008888:	ee20 6a06 	vmul.f32	s12, s0, s12
 800888c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8008890:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008898:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800889c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80088a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80088a4:	ee10 3a10 	vmov	r3, s0
 80088a8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80088ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088b0:	da1a      	bge.n	80088e8 <__ieee754_powf+0x540>
 80088b2:	f000 f925 	bl	8008b00 <scalbnf>
 80088b6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80088ba:	e5c7      	b.n	800844c <__ieee754_powf+0xa4>
 80088bc:	4a19      	ldr	r2, [pc, #100]	; (8008924 <__ieee754_powf+0x57c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	dd02      	ble.n	80088c8 <__ieee754_powf+0x520>
 80088c2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008928 <__ieee754_powf+0x580>
 80088c6:	e679      	b.n	80085bc <__ieee754_powf+0x214>
 80088c8:	d108      	bne.n	80088dc <__ieee754_powf+0x534>
 80088ca:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80088ce:	eef4 7ae6 	vcmpe.f32	s15, s13
 80088d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d6:	f63f af79 	bhi.w	80087cc <__ieee754_powf+0x424>
 80088da:	e7f2      	b.n	80088c2 <__ieee754_powf+0x51a>
 80088dc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80088e0:	f73f af74 	bgt.w	80087cc <__ieee754_powf+0x424>
 80088e4:	2000      	movs	r0, #0
 80088e6:	e78d      	b.n	8008804 <__ieee754_powf+0x45c>
 80088e8:	ee00 3a10 	vmov	s0, r3
 80088ec:	e7e3      	b.n	80088b6 <__ieee754_powf+0x50e>
 80088ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80088f2:	e5ab      	b.n	800844c <__ieee754_powf+0xa4>
 80088f4:	eeb0 0a68 	vmov.f32	s0, s17
 80088f8:	e5a8      	b.n	800844c <__ieee754_powf+0xa4>
 80088fa:	eeb0 0a48 	vmov.f32	s0, s16
 80088fe:	e5a5      	b.n	800844c <__ieee754_powf+0xa4>
 8008900:	007fffff 	.word	0x007fffff
 8008904:	3f317218 	.word	0x3f317218
 8008908:	35bfbe8c 	.word	0x35bfbe8c
 800890c:	3f317200 	.word	0x3f317200
 8008910:	3331bb4c 	.word	0x3331bb4c
 8008914:	b5ddea0e 	.word	0xb5ddea0e
 8008918:	388ab355 	.word	0x388ab355
 800891c:	bb360b61 	.word	0xbb360b61
 8008920:	3e2aaaab 	.word	0x3e2aaaab
 8008924:	43160000 	.word	0x43160000
 8008928:	0da24260 	.word	0x0da24260

0800892c <__ieee754_sqrtf>:
 800892c:	ee10 2a10 	vmov	r2, s0
 8008930:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008934:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	d302      	bcc.n	8008942 <__ieee754_sqrtf+0x16>
 800893c:	eea0 0a00 	vfma.f32	s0, s0, s0
 8008940:	bd70      	pop	{r4, r5, r6, pc}
 8008942:	b3b1      	cbz	r1, 80089b2 <__ieee754_sqrtf+0x86>
 8008944:	2a00      	cmp	r2, #0
 8008946:	da04      	bge.n	8008952 <__ieee754_sqrtf+0x26>
 8008948:	ee70 7a40 	vsub.f32	s15, s0, s0
 800894c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008950:	bd70      	pop	{r4, r5, r6, pc}
 8008952:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8008956:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800895a:	d204      	bcs.n	8008966 <__ieee754_sqrtf+0x3a>
 800895c:	2100      	movs	r1, #0
 800895e:	0210      	lsls	r0, r2, #8
 8008960:	d528      	bpl.n	80089b4 <__ieee754_sqrtf+0x88>
 8008962:	3901      	subs	r1, #1
 8008964:	1a5b      	subs	r3, r3, r1
 8008966:	3b7f      	subs	r3, #127	; 0x7f
 8008968:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800896c:	07d9      	lsls	r1, r3, #31
 800896e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008972:	bf48      	it	mi
 8008974:	0052      	lslmi	r2, r2, #1
 8008976:	1059      	asrs	r1, r3, #1
 8008978:	2300      	movs	r3, #0
 800897a:	0052      	lsls	r2, r2, #1
 800897c:	2419      	movs	r4, #25
 800897e:	461e      	mov	r6, r3
 8008980:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8008984:	1835      	adds	r5, r6, r0
 8008986:	4295      	cmp	r5, r2
 8008988:	bfde      	ittt	le
 800898a:	182e      	addle	r6, r5, r0
 800898c:	1b52      	suble	r2, r2, r5
 800898e:	181b      	addle	r3, r3, r0
 8008990:	3c01      	subs	r4, #1
 8008992:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008996:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800899a:	d1f3      	bne.n	8008984 <__ieee754_sqrtf+0x58>
 800899c:	b112      	cbz	r2, 80089a4 <__ieee754_sqrtf+0x78>
 800899e:	3301      	adds	r3, #1
 80089a0:	f023 0301 	bic.w	r3, r3, #1
 80089a4:	105b      	asrs	r3, r3, #1
 80089a6:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 80089aa:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 80089ae:	ee00 3a10 	vmov	s0, r3
 80089b2:	bd70      	pop	{r4, r5, r6, pc}
 80089b4:	0052      	lsls	r2, r2, #1
 80089b6:	3101      	adds	r1, #1
 80089b8:	e7d1      	b.n	800895e <__ieee754_sqrtf+0x32>

080089ba <matherr>:
 80089ba:	2000      	movs	r0, #0
 80089bc:	4770      	bx	lr
	...

080089c0 <rint>:
 80089c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089c2:	ec51 0b10 	vmov	r0, r1, d0
 80089c6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80089ca:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80089ce:	2e13      	cmp	r6, #19
 80089d0:	ee10 7a10 	vmov	r7, s0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4602      	mov	r2, r0
 80089d8:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80089dc:	dc58      	bgt.n	8008a90 <rint+0xd0>
 80089de:	2e00      	cmp	r6, #0
 80089e0:	da2b      	bge.n	8008a3a <rint+0x7a>
 80089e2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80089e6:	4302      	orrs	r2, r0
 80089e8:	d023      	beq.n	8008a32 <rint+0x72>
 80089ea:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80089ee:	4302      	orrs	r2, r0
 80089f0:	4251      	negs	r1, r2
 80089f2:	4311      	orrs	r1, r2
 80089f4:	0b09      	lsrs	r1, r1, #12
 80089f6:	0c5b      	lsrs	r3, r3, #17
 80089f8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80089fc:	045b      	lsls	r3, r3, #17
 80089fe:	ea41 0703 	orr.w	r7, r1, r3
 8008a02:	4b31      	ldr	r3, [pc, #196]	; (8008ac8 <rint+0x108>)
 8008a04:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008a08:	4639      	mov	r1, r7
 8008a0a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008a0e:	ee10 0a10 	vmov	r0, s0
 8008a12:	4632      	mov	r2, r6
 8008a14:	463b      	mov	r3, r7
 8008a16:	f7f7 fc39 	bl	800028c <__adddf3>
 8008a1a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a1e:	463b      	mov	r3, r7
 8008a20:	4632      	mov	r2, r6
 8008a22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a26:	f7f7 fc2f 	bl	8000288 <__aeabi_dsub>
 8008a2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a2e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8008a32:	ec41 0b10 	vmov	d0, r0, r1
 8008a36:	b003      	add	sp, #12
 8008a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a3a:	4c24      	ldr	r4, [pc, #144]	; (8008acc <rint+0x10c>)
 8008a3c:	4134      	asrs	r4, r6
 8008a3e:	ea01 0704 	and.w	r7, r1, r4
 8008a42:	4307      	orrs	r7, r0
 8008a44:	d0f5      	beq.n	8008a32 <rint+0x72>
 8008a46:	0861      	lsrs	r1, r4, #1
 8008a48:	ea03 0001 	and.w	r0, r3, r1
 8008a4c:	4302      	orrs	r2, r0
 8008a4e:	d00b      	beq.n	8008a68 <rint+0xa8>
 8008a50:	ea23 0101 	bic.w	r1, r3, r1
 8008a54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a58:	2e13      	cmp	r6, #19
 8008a5a:	fa43 f306 	asr.w	r3, r3, r6
 8008a5e:	bf0c      	ite	eq
 8008a60:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8008a64:	2200      	movne	r2, #0
 8008a66:	430b      	orrs	r3, r1
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4b17      	ldr	r3, [pc, #92]	; (8008ac8 <rint+0x108>)
 8008a6c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008a70:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a74:	4610      	mov	r0, r2
 8008a76:	462b      	mov	r3, r5
 8008a78:	4622      	mov	r2, r4
 8008a7a:	f7f7 fc07 	bl	800028c <__adddf3>
 8008a7e:	e9cd 0100 	strd	r0, r1, [sp]
 8008a82:	4622      	mov	r2, r4
 8008a84:	462b      	mov	r3, r5
 8008a86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a8a:	f7f7 fbfd 	bl	8000288 <__aeabi_dsub>
 8008a8e:	e7d0      	b.n	8008a32 <rint+0x72>
 8008a90:	2e33      	cmp	r6, #51	; 0x33
 8008a92:	dd08      	ble.n	8008aa6 <rint+0xe6>
 8008a94:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008a98:	d1cb      	bne.n	8008a32 <rint+0x72>
 8008a9a:	ee10 2a10 	vmov	r2, s0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	f7f7 fbf4 	bl	800028c <__adddf3>
 8008aa4:	e7c5      	b.n	8008a32 <rint+0x72>
 8008aa6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8008aaa:	f04f 34ff 	mov.w	r4, #4294967295
 8008aae:	40f4      	lsrs	r4, r6
 8008ab0:	4220      	tst	r0, r4
 8008ab2:	d0be      	beq.n	8008a32 <rint+0x72>
 8008ab4:	0861      	lsrs	r1, r4, #1
 8008ab6:	420f      	tst	r7, r1
 8008ab8:	bf1f      	itttt	ne
 8008aba:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8008abe:	ea27 0101 	bicne.w	r1, r7, r1
 8008ac2:	4132      	asrne	r2, r6
 8008ac4:	430a      	orrne	r2, r1
 8008ac6:	e7cf      	b.n	8008a68 <rint+0xa8>
 8008ac8:	08009010 	.word	0x08009010
 8008acc:	000fffff 	.word	0x000fffff

08008ad0 <fabsf>:
 8008ad0:	ee10 3a10 	vmov	r3, s0
 8008ad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ad8:	ee00 3a10 	vmov	s0, r3
 8008adc:	4770      	bx	lr

08008ade <finitef>:
 8008ade:	ee10 3a10 	vmov	r3, s0
 8008ae2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8008ae6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008aea:	bfac      	ite	ge
 8008aec:	2000      	movge	r0, #0
 8008aee:	2001      	movlt	r0, #1
 8008af0:	4770      	bx	lr
	...

08008af4 <nanf>:
 8008af4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008afc <nanf+0x8>
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	7fc00000 	.word	0x7fc00000

08008b00 <scalbnf>:
 8008b00:	b508      	push	{r3, lr}
 8008b02:	ee10 2a10 	vmov	r2, s0
 8008b06:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008b0a:	ed2d 8b02 	vpush	{d8}
 8008b0e:	eef0 0a40 	vmov.f32	s1, s0
 8008b12:	d004      	beq.n	8008b1e <scalbnf+0x1e>
 8008b14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008b18:	d306      	bcc.n	8008b28 <scalbnf+0x28>
 8008b1a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008b1e:	ecbd 8b02 	vpop	{d8}
 8008b22:	eeb0 0a60 	vmov.f32	s0, s1
 8008b26:	bd08      	pop	{r3, pc}
 8008b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b2c:	d21c      	bcs.n	8008b68 <scalbnf+0x68>
 8008b2e:	4b1f      	ldr	r3, [pc, #124]	; (8008bac <scalbnf+0xac>)
 8008b30:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008bb0 <scalbnf+0xb0>
 8008b34:	4298      	cmp	r0, r3
 8008b36:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008b3a:	db10      	blt.n	8008b5e <scalbnf+0x5e>
 8008b3c:	ee10 2a90 	vmov	r2, s1
 8008b40:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008b44:	3b19      	subs	r3, #25
 8008b46:	4403      	add	r3, r0
 8008b48:	2bfe      	cmp	r3, #254	; 0xfe
 8008b4a:	dd0f      	ble.n	8008b6c <scalbnf+0x6c>
 8008b4c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008bb4 <scalbnf+0xb4>
 8008b50:	eeb0 0a48 	vmov.f32	s0, s16
 8008b54:	f000 f834 	bl	8008bc0 <copysignf>
 8008b58:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008b5c:	e7df      	b.n	8008b1e <scalbnf+0x1e>
 8008b5e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008bb8 <scalbnf+0xb8>
 8008b62:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008b66:	e7da      	b.n	8008b1e <scalbnf+0x1e>
 8008b68:	0ddb      	lsrs	r3, r3, #23
 8008b6a:	e7ec      	b.n	8008b46 <scalbnf+0x46>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dd06      	ble.n	8008b7e <scalbnf+0x7e>
 8008b70:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008b74:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008b78:	ee00 3a90 	vmov	s1, r3
 8008b7c:	e7cf      	b.n	8008b1e <scalbnf+0x1e>
 8008b7e:	f113 0f16 	cmn.w	r3, #22
 8008b82:	da06      	bge.n	8008b92 <scalbnf+0x92>
 8008b84:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b88:	4298      	cmp	r0, r3
 8008b8a:	dcdf      	bgt.n	8008b4c <scalbnf+0x4c>
 8008b8c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008bb8 <scalbnf+0xb8>
 8008b90:	e7de      	b.n	8008b50 <scalbnf+0x50>
 8008b92:	3319      	adds	r3, #25
 8008b94:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008b98:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008b9c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008bbc <scalbnf+0xbc>
 8008ba0:	ee07 3a10 	vmov	s14, r3
 8008ba4:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008ba8:	e7b9      	b.n	8008b1e <scalbnf+0x1e>
 8008baa:	bf00      	nop
 8008bac:	ffff3cb0 	.word	0xffff3cb0
 8008bb0:	4c000000 	.word	0x4c000000
 8008bb4:	7149f2ca 	.word	0x7149f2ca
 8008bb8:	0da24260 	.word	0x0da24260
 8008bbc:	33000000 	.word	0x33000000

08008bc0 <copysignf>:
 8008bc0:	ee10 3a10 	vmov	r3, s0
 8008bc4:	ee10 2a90 	vmov	r2, s1
 8008bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bcc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	ee00 3a10 	vmov	s0, r3
 8008bd6:	4770      	bx	lr

08008bd8 <__errno>:
 8008bd8:	4b01      	ldr	r3, [pc, #4]	; (8008be0 <__errno+0x8>)
 8008bda:	6818      	ldr	r0, [r3, #0]
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	20000010 	.word	0x20000010

08008be4 <_sbrk>:
 8008be4:	4b04      	ldr	r3, [pc, #16]	; (8008bf8 <_sbrk+0x14>)
 8008be6:	6819      	ldr	r1, [r3, #0]
 8008be8:	4602      	mov	r2, r0
 8008bea:	b909      	cbnz	r1, 8008bf0 <_sbrk+0xc>
 8008bec:	4903      	ldr	r1, [pc, #12]	; (8008bfc <_sbrk+0x18>)
 8008bee:	6019      	str	r1, [r3, #0]
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	4402      	add	r2, r0
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	4770      	bx	lr
 8008bf8:	2000023c 	.word	0x2000023c
 8008bfc:	20001528 	.word	0x20001528

08008c00 <_init>:
 8008c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c02:	bf00      	nop
 8008c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c06:	bc08      	pop	{r3}
 8008c08:	469e      	mov	lr, r3
 8008c0a:	4770      	bx	lr

08008c0c <_fini>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	bf00      	nop
 8008c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c12:	bc08      	pop	{r3}
 8008c14:	469e      	mov	lr, r3
 8008c16:	4770      	bx	lr
